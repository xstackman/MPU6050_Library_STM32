
MPU6050_Lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003404  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080035fc  080035fc  000135fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003614  08003614  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800361c  0800361c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800361c  0800361c  0001361c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003620  08003620  00013620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003630  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003630  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b107  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a63  00000000  00000000  0002b141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002cba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002d540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282fb  00000000  00000000  0002de00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b94f  00000000  00000000  000560fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee28b  00000000  00000000  00061a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014fcd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002704  00000000  00000000  0014fd28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080035e4 	.word	0x080035e4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080035e4 	.word	0x080035e4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <_ZN7MPU6050C1EP19__I2C_HandleTypeDefh>:

MPU6050::MPU6050 () {
	// TODO Auto-generated constructor stub

}
MPU6050::MPU6050 (I2C_HandleTypeDef *dev,uint8_t add)
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	4613      	mov	r3, r2
 800053c:	71fb      	strb	r3, [r7, #7]
{
	_dev=dev;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	68ba      	ldr	r2, [r7, #8]
 8000542:	601a      	str	r2, [r3, #0]
	_dev_address=add;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	79fa      	ldrb	r2, [r7, #7]
 8000548:	711a      	strb	r2, [r3, #4]

}
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4618      	mov	r0, r3
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <_ZN7MPU605010isDetectedEv>:

int MPU6050:: isDetected()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	6078      	str	r0, [r7, #4]
	uint8_t tmp=0,reg=MPU6050_WHO_AM_I;
 8000560:	2300      	movs	r3, #0
 8000562:	737b      	strb	r3, [r7, #13]
 8000564:	2375      	movs	r3, #117	; 0x75
 8000566:	733b      	strb	r3, [r7, #12]
	uint8_t read_add=0xD0;
 8000568:	23d0      	movs	r3, #208	; 0xd0
 800056a:	73fb      	strb	r3, [r7, #15]
	uint8_t write_add=0xD1;
 800056c:	23d1      	movs	r3, #209	; 0xd1
 800056e:	73bb      	strb	r3, [r7, #14]

	if(_dev==NULL)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d101      	bne.n	800057c <_ZN7MPU605010isDetectedEv+0x24>
		return 0;
 8000578:	2300      	movs	r3, #0
 800057a:	e019      	b.n	80005b0 <_ZN7MPU605010isDetectedEv+0x58>
	else
	{
		HAL_I2C_Master_Transmit(_dev,MPU6050_WRITE_ADD,&reg,1,10);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	f107 020c 	add.w	r2, r7, #12
 8000584:	230a      	movs	r3, #10
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2301      	movs	r3, #1
 800058a:	21d0      	movs	r1, #208	; 0xd0
 800058c:	f000 fe7a 	bl	8001284 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(_dev,MPU6050_READ_ADD,&tmp,1,10);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6818      	ldr	r0, [r3, #0]
 8000594:	f107 020d 	add.w	r2, r7, #13
 8000598:	230a      	movs	r3, #10
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2301      	movs	r3, #1
 800059e:	21d1      	movs	r1, #209	; 0xd1
 80005a0:	f000 ff64 	bl	800146c <HAL_I2C_Master_Receive>
		if(tmp==0x68)
 80005a4:	7b7b      	ldrb	r3, [r7, #13]
 80005a6:	2b68      	cmp	r3, #104	; 0x68
 80005a8:	d101      	bne.n	80005ae <_ZN7MPU605010isDetectedEv+0x56>
			return 1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	e000      	b.n	80005b0 <_ZN7MPU605010isDetectedEv+0x58>
		else
			return 0;
 80005ae:	2300      	movs	r3, #0
	}
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 faae 	bl	8000b1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f823 	bl	800060c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f943 	bl	8000850 <_ZL12MX_GPIO_Initv>
  MX_I2C4_Init();
 80005ca:	f000 f8bd 	bl	8000748 <_ZL12MX_I2C4_Initv>
  MX_USART3_UART_Init();
 80005ce:	f000 f909 	bl	80007e4 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  MPU6050 sensor=MPU6050(&hi2c4,0xD3);
 80005d2:	463b      	mov	r3, r7
 80005d4:	22d3      	movs	r2, #211	; 0xd3
 80005d6:	490b      	ldr	r1, [pc, #44]	; (8000604 <main+0x4c>)
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ffa9 	bl	8000530 <_ZN7MPU6050C1EP19__I2C_HandleTypeDefh>
  if(sensor.isDetected())
 80005de:	463b      	mov	r3, r7
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffb9 	bl	8000558 <_ZN7MPU605010isDetectedEv>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf14      	ite	ne
 80005ec:	2301      	movne	r3, #1
 80005ee:	2300      	moveq	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d004      	beq.n	8000600 <main+0x48>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80005f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005fa:	4803      	ldr	r0, [pc, #12]	; (8000608 <main+0x50>)
 80005fc:	f000 fd97 	bl	800112e <HAL_GPIO_TogglePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x48>
 8000602:	bf00      	nop
 8000604:	20000028 	.word	0x20000028
 8000608:	40020400 	.word	0x40020400

0800060c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b0b8      	sub	sp, #224	; 0xe0
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000616:	2234      	movs	r2, #52	; 0x34
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 ffda 	bl	80035d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2290      	movs	r2, #144	; 0x90
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f002 ffcb 	bl	80035d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b3f      	ldr	r3, [pc, #252]	; (800073c <_Z18SystemClock_Configv+0x130>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	4a3e      	ldr	r2, [pc, #248]	; (800073c <_Z18SystemClock_Configv+0x130>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	6413      	str	r3, [r2, #64]	; 0x40
 800064a:	4b3c      	ldr	r3, [pc, #240]	; (800073c <_Z18SystemClock_Configv+0x130>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000656:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <_Z18SystemClock_Configv+0x134>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065e:	4a38      	ldr	r2, [pc, #224]	; (8000740 <_Z18SystemClock_Configv+0x134>)
 8000660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000664:	6013      	str	r3, [r2, #0]
 8000666:	4b36      	ldr	r3, [pc, #216]	; (8000740 <_Z18SystemClock_Configv+0x134>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000672:	2302      	movs	r3, #2
 8000674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067e:	2310      	movs	r3, #16
 8000680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068a:	2300      	movs	r3, #0
 800068c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000690:	2310      	movs	r3, #16
 8000692:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000696:	23c8      	movs	r3, #200	; 0xc8
 8000698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fa4b 	bl	8001b48 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	bf14      	ite	ne
 80006b8:	2301      	movne	r3, #1
 80006ba:	2300      	moveq	r3, #0
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80006c2:	f000 f911 	bl	80008e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006ec:	2103      	movs	r1, #3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fcd8 	bl	80020a4 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf14      	ite	ne
 80006fa:	2301      	movne	r3, #1
 80006fc:	2300      	moveq	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8000704:	f000 f8f0 	bl	80008e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C4;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <_Z18SystemClock_Configv+0x138>)
 800070a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800070c:	2300      	movs	r3, #0
 800070e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000710:	2300      	movs	r3, #0
 8000712:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fe99 	bl	8002450 <HAL_RCCEx_PeriphCLKConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	bf14      	ite	ne
 8000724:	2301      	movne	r3, #1
 8000726:	2300      	moveq	r3, #0
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <_Z18SystemClock_Configv+0x126>
  {
    Error_Handler();
 800072e:	f000 f8db 	bl	80008e8 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	37e0      	adds	r7, #224	; 0xe0
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000
 8000744:	00020100 	.word	0x00020100

08000748 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <_ZL12MX_I2C4_Initv+0x90>)
 800074e:	4a23      	ldr	r2, [pc, #140]	; (80007dc <_ZL12MX_I2C4_Initv+0x94>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00200B2B;
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <_ZL12MX_I2C4_Initv+0x90>)
 8000754:	4a22      	ldr	r2, [pc, #136]	; (80007e0 <_ZL12MX_I2C4_Initv+0x98>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <_ZL12MX_I2C4_Initv+0x90>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <_ZL12MX_I2C4_Initv+0x90>)
 8000760:	2201      	movs	r2, #1
 8000762:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <_ZL12MX_I2C4_Initv+0x90>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <_ZL12MX_I2C4_Initv+0x90>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <_ZL12MX_I2C4_Initv+0x90>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <_ZL12MX_I2C4_Initv+0x90>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <_ZL12MX_I2C4_Initv+0x90>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000782:	4815      	ldr	r0, [pc, #84]	; (80007d8 <_ZL12MX_I2C4_Initv+0x90>)
 8000784:	f000 fcee 	bl	8001164 <HAL_I2C_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf14      	ite	ne
 800078e:	2301      	movne	r3, #1
 8000790:	2300      	moveq	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8000798:	f000 f8a6 	bl	80008e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079c:	2100      	movs	r1, #0
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <_ZL12MX_I2C4_Initv+0x90>)
 80007a0:	f001 f93a 	bl	8001a18 <HAL_I2CEx_ConfigAnalogFilter>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	bf14      	ite	ne
 80007aa:	2301      	movne	r3, #1
 80007ac:	2300      	moveq	r3, #0
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 80007b4:	f000 f898 	bl	80008e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80007b8:	2100      	movs	r1, #0
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <_ZL12MX_I2C4_Initv+0x90>)
 80007bc:	f001 f977 	bl	8001aae <HAL_I2CEx_ConfigDigitalFilter>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	bf14      	ite	ne
 80007c6:	2301      	movne	r3, #1
 80007c8:	2300      	moveq	r3, #0
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 80007d0:	f000 f88a 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000028 	.word	0x20000028
 80007dc:	40006000 	.word	0x40006000
 80007e0:	00200b2b 	.word	0x00200b2b

080007e4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <_ZL19MX_USART3_UART_Initv+0x64>)
 80007ea:	4a18      	ldr	r2, [pc, #96]	; (800084c <_ZL19MX_USART3_UART_Initv+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <_ZL19MX_USART3_UART_Initv+0x64>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <_ZL19MX_USART3_UART_Initv+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <_ZL19MX_USART3_UART_Initv+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <_ZL19MX_USART3_UART_Initv+0x64>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <_ZL19MX_USART3_UART_Initv+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <_ZL19MX_USART3_UART_Initv+0x64>)
 800082c:	f002 fa36 	bl	8002c9c <HAL_MultiProcessor_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	bf14      	ite	ne
 8000836:	2301      	movne	r3, #1
 8000838:	2300      	moveq	r3, #0
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <_ZL19MX_USART3_UART_Initv+0x60>
  {
    Error_Handler();
 8000840:	f000 f852 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000074 	.word	0x20000074
 800084c:	40004800 	.word	0x40004800

08000850 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000866:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <_ZL12MX_GPIO_Initv+0x90>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a1d      	ldr	r2, [pc, #116]	; (80008e0 <_ZL12MX_GPIO_Initv+0x90>)
 800086c:	f043 0320 	orr.w	r3, r3, #32
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <_ZL12MX_GPIO_Initv+0x90>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0320 	and.w	r3, r3, #32
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <_ZL12MX_GPIO_Initv+0x90>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <_ZL12MX_GPIO_Initv+0x90>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <_ZL12MX_GPIO_Initv+0x90>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <_ZL12MX_GPIO_Initv+0x90>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <_ZL12MX_GPIO_Initv+0x90>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <_ZL12MX_GPIO_Initv+0x90>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <_ZL12MX_GPIO_Initv+0x94>)
 80008b6:	f000 fc21 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4619      	mov	r1, r3
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <_ZL12MX_GPIO_Initv+0x94>)
 80008d4:	f000 fa66 	bl	8000da4 <HAL_GPIO_Init>

}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020400 	.word	0x40020400

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x44>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_MspInit+0x44>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_MspInit+0x44>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x44>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_MspInit+0x44>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_MspInit+0x44>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C4)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <HAL_I2C_MspInit+0x7c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d128      	bne.n	80009b0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_I2C_MspInit+0x80>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a16      	ldr	r2, [pc, #88]	; (80009bc <HAL_I2C_MspInit+0x80>)
 8000964:	f043 0320 	orr.w	r3, r3, #32
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_I2C_MspInit+0x80>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0320 	and.w	r3, r3, #32
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000976:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097c:	2312      	movs	r3, #18
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000980:	2301      	movs	r3, #1
 8000982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000988:	2304      	movs	r3, #4
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	480b      	ldr	r0, [pc, #44]	; (80009c0 <HAL_I2C_MspInit+0x84>)
 8000994:	f000 fa06 	bl	8000da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_I2C_MspInit+0x80>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_I2C_MspInit+0x80>)
 800099e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_I2C_MspInit+0x80>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40006000 	.word	0x40006000
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021400 	.word	0x40021400

080009c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <HAL_UART_MspInit+0x7c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d128      	bne.n	8000a38 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <HAL_UART_MspInit+0x80>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <HAL_UART_MspInit+0x80>)
 80009ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <HAL_UART_MspInit+0x80>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_UART_MspInit+0x80>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <HAL_UART_MspInit+0x80>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <HAL_UART_MspInit+0x80>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1c:	2312      	movs	r3, #18
 8000a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a28:	2307      	movs	r3, #7
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <HAL_UART_MspInit+0x84>)
 8000a34:	f000 f9b6 	bl	8000da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40004800 	.word	0x40004800
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020c00 	.word	0x40020c00

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <MemManage_Handler+0x4>

08000a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a98:	f000 f87e 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <SystemInit+0x28>)
 8000aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aaa:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <SystemInit+0x28>)
 8000aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SystemInit+0x28>)
 8000ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aba:	609a      	str	r2, [r3, #8]
#endif
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ad0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ad2:	e003      	b.n	8000adc <LoopCopyDataInit>

08000ad4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ad6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ad8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ada:	3104      	adds	r1, #4

08000adc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ae0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ae2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ae4:	d3f6      	bcc.n	8000ad4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ae8:	e002      	b.n	8000af0 <LoopFillZerobss>

08000aea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000aec:	f842 3b04 	str.w	r3, [r2], #4

08000af0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000af2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000af4:	d3f9      	bcc.n	8000aea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000af6:	f7ff ffd3 	bl	8000aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afa:	f002 fd47 	bl	800358c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afe:	f7ff fd5b 	bl	80005b8 <main>
  bx  lr    
 8000b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b04:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000b08:	08003624 	.word	0x08003624
  ldr  r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b10:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000b14:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000b18:	200000f8 	.word	0x200000f8

08000b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC_IRQHandler>

08000b1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b22:	2003      	movs	r0, #3
 8000b24:	f000 f90a 	bl	8000d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 f805 	bl	8000b38 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b2e:	f7ff fee1 	bl	80008f4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x54>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x58>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f917 	bl	8000d8a <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00e      	b.n	8000b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d80a      	bhi.n	8000b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f000 f8ed 	bl	8000d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <HAL_InitTick+0x5c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000004 	.word	0x20000004

08000b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	200000f4 	.word	0x200000f4

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	200000f4 	.word	0x200000f4

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <__NVIC_SetPriorityGrouping+0x40>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	4313      	orrs	r3, r2
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x40>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00
 8000c1c:	05fa0000 	.word	0x05fa0000

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0a      	blt.n	8000c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	; (8000c88 <__NVIC_SetPriority+0x4c>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	0112      	lsls	r2, r2, #4
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	440b      	add	r3, r1
 8000c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c64:	e00a      	b.n	8000c7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4908      	ldr	r1, [pc, #32]	; (8000c8c <__NVIC_SetPriority+0x50>)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	3b04      	subs	r3, #4
 8000c74:	0112      	lsls	r2, r2, #4
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	440b      	add	r3, r1
 8000c7a:	761a      	strb	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	; 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f1c3 0307 	rsb	r3, r3, #7
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	bf28      	it	cs
 8000cae:	2304      	movcs	r3, #4
 8000cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d902      	bls.n	8000cc0 <NVIC_EncodePriority+0x30>
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3b03      	subs	r3, #3
 8000cbe:	e000      	b.n	8000cc2 <NVIC_EncodePriority+0x32>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43d9      	mvns	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	4313      	orrs	r3, r2
         );
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3724      	adds	r7, #36	; 0x24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d08:	d301      	bcc.n	8000d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00f      	b.n	8000d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <SysTick_Config+0x40>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d16:	210f      	movs	r1, #15
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f7ff ff8e 	bl	8000c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <SysTick_Config+0x40>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <SysTick_Config+0x40>)
 8000d28:	2207      	movs	r2, #7
 8000d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	e000e010 	.word	0xe000e010

08000d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ff47 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d64:	f7ff ff5c 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	f7ff ff8e 	bl	8000c90 <NVIC_EncodePriority>
 8000d74:	4602      	mov	r2, r0
 8000d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff5d 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffb0 	bl	8000cf8 <SysTick_Config>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	e175      	b.n	80010b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f040 8164 	bne.w	80010aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d00b      	beq.n	8000e02 <HAL_GPIO_Init+0x5e>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d007      	beq.n	8000e02 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df6:	2b11      	cmp	r3, #17
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b12      	cmp	r3, #18
 8000e00:	d130      	bne.n	8000e64 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	f003 0201 	and.w	r2, r3, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x100>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b12      	cmp	r3, #18
 8000ea2:	d123      	bne.n	8000eec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	69b9      	ldr	r1, [r7, #24]
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0203 	and.w	r2, r3, #3
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80be 	beq.w	80010aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b66      	ldr	r3, [pc, #408]	; (80010c8 <HAL_GPIO_Init+0x324>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a65      	ldr	r2, [pc, #404]	; (80010c8 <HAL_GPIO_Init+0x324>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <HAL_GPIO_Init+0x324>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f46:	4a61      	ldr	r2, [pc, #388]	; (80010cc <HAL_GPIO_Init+0x328>)
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a58      	ldr	r2, [pc, #352]	; (80010d0 <HAL_GPIO_Init+0x32c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d037      	beq.n	8000fe2 <HAL_GPIO_Init+0x23e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a57      	ldr	r2, [pc, #348]	; (80010d4 <HAL_GPIO_Init+0x330>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d031      	beq.n	8000fde <HAL_GPIO_Init+0x23a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a56      	ldr	r2, [pc, #344]	; (80010d8 <HAL_GPIO_Init+0x334>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d02b      	beq.n	8000fda <HAL_GPIO_Init+0x236>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a55      	ldr	r2, [pc, #340]	; (80010dc <HAL_GPIO_Init+0x338>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d025      	beq.n	8000fd6 <HAL_GPIO_Init+0x232>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a54      	ldr	r2, [pc, #336]	; (80010e0 <HAL_GPIO_Init+0x33c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d01f      	beq.n	8000fd2 <HAL_GPIO_Init+0x22e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a53      	ldr	r2, [pc, #332]	; (80010e4 <HAL_GPIO_Init+0x340>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d019      	beq.n	8000fce <HAL_GPIO_Init+0x22a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <HAL_GPIO_Init+0x344>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0x226>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a51      	ldr	r2, [pc, #324]	; (80010ec <HAL_GPIO_Init+0x348>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_GPIO_Init+0x222>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a50      	ldr	r2, [pc, #320]	; (80010f0 <HAL_GPIO_Init+0x34c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x21e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4f      	ldr	r2, [pc, #316]	; (80010f4 <HAL_GPIO_Init+0x350>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_GPIO_Init+0x21a>
 8000fba:	2309      	movs	r3, #9
 8000fbc:	e012      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fbe:	230a      	movs	r3, #10
 8000fc0:	e010      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	e00e      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	e00c      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fca:	2306      	movs	r3, #6
 8000fcc:	e00a      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fce:	2305      	movs	r3, #5
 8000fd0:	e008      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	f002 0203 	and.w	r2, r2, #3
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	4093      	lsls	r3, r2
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ff4:	4935      	ldr	r1, [pc, #212]	; (80010cc <HAL_GPIO_Init+0x328>)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <HAL_GPIO_Init+0x354>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001026:	4a34      	ldr	r2, [pc, #208]	; (80010f8 <HAL_GPIO_Init+0x354>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800102c:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <HAL_GPIO_Init+0x354>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001050:	4a29      	ldr	r2, [pc, #164]	; (80010f8 <HAL_GPIO_Init+0x354>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HAL_GPIO_Init+0x354>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107a:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <HAL_GPIO_Init+0x354>)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_GPIO_Init+0x354>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <HAL_GPIO_Init+0x354>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3301      	adds	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	2b0f      	cmp	r3, #15
 80010b4:	f67f ae86 	bls.w	8000dc4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40013800 	.word	0x40013800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40021400 	.word	0x40021400
 80010e8:	40021800 	.word	0x40021800
 80010ec:	40021c00 	.word	0x40021c00
 80010f0:	40022000 	.word	0x40022000
 80010f4:	40022400 	.word	0x40022400
 80010f8:	40013c00 	.word	0x40013c00

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695a      	ldr	r2, [r3, #20]
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	4013      	ands	r3, r2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d004      	beq.n	8001150 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	041a      	lsls	r2, r3, #16
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800114e:	e002      	b.n	8001156 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001150:	887a      	ldrh	r2, [r7, #2]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e07f      	b.n	8001276 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d106      	bne.n	8001190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fbd6 	bl	800093c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2224      	movs	r2, #36	; 0x24
 8001194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0201 	bic.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d107      	bne.n	80011de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	e006      	b.n	80011ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d104      	bne.n	80011fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6859      	ldr	r1, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_I2C_Init+0x11c>)
 800120a:	430b      	orrs	r3, r1
 800120c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800121c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	ea42 0103 	orr.w	r1, r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	021a      	lsls	r2, r3, #8
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69d9      	ldr	r1, [r3, #28]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1a      	ldr	r2, [r3, #32]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2220      	movs	r2, #32
 8001262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	02008000 	.word	0x02008000

08001284 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af02      	add	r7, sp, #8
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	461a      	mov	r2, r3
 8001290:	460b      	mov	r3, r1
 8001292:	817b      	strh	r3, [r7, #10]
 8001294:	4613      	mov	r3, r2
 8001296:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b20      	cmp	r3, #32
 80012a2:	f040 80da 	bne.w	800145a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_I2C_Master_Transmit+0x30>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e0d3      	b.n	800145c <HAL_I2C_Master_Transmit+0x1d8>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012bc:	f7ff fc80 	bl	8000bc0 <HAL_GetTick>
 80012c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2319      	movs	r3, #25
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f000 f9e6 	bl	80016a0 <I2C_WaitOnFlagUntilTimeout>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e0be      	b.n	800145c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2221      	movs	r2, #33	; 0x21
 80012e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2210      	movs	r2, #16
 80012ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	893a      	ldrh	r2, [r7, #8]
 80012fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2200      	movs	r2, #0
 8001304:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130a:	b29b      	uxth	r3, r3
 800130c:	2bff      	cmp	r3, #255	; 0xff
 800130e:	d90e      	bls.n	800132e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	22ff      	movs	r2, #255	; 0xff
 8001314:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131a:	b2da      	uxtb	r2, r3
 800131c:	8979      	ldrh	r1, [r7, #10]
 800131e:	4b51      	ldr	r3, [pc, #324]	; (8001464 <HAL_I2C_Master_Transmit+0x1e0>)
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 fb48 	bl	80019bc <I2C_TransferConfig>
 800132c:	e06c      	b.n	8001408 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001332:	b29a      	uxth	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800133c:	b2da      	uxtb	r2, r3
 800133e:	8979      	ldrh	r1, [r7, #10]
 8001340:	4b48      	ldr	r3, [pc, #288]	; (8001464 <HAL_I2C_Master_Transmit+0x1e0>)
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f000 fb37 	bl	80019bc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800134e:	e05b      	b.n	8001408 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	6a39      	ldr	r1, [r7, #32]
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f000 f9e3 	bl	8001720 <I2C_WaitOnTXISFlagUntilTimeout>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e07b      	b.n	800145c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137e:	b29b      	uxth	r3, r3
 8001380:	3b01      	subs	r3, #1
 8001382:	b29a      	uxth	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138c:	3b01      	subs	r3, #1
 800138e:	b29a      	uxth	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001398:	b29b      	uxth	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d034      	beq.n	8001408 <HAL_I2C_Master_Transmit+0x184>
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d130      	bne.n	8001408 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	2200      	movs	r2, #0
 80013ae:	2180      	movs	r1, #128	; 0x80
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f000 f975 	bl	80016a0 <I2C_WaitOnFlagUntilTimeout>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e04d      	b.n	800145c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	2bff      	cmp	r3, #255	; 0xff
 80013c8:	d90e      	bls.n	80013e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	22ff      	movs	r2, #255	; 0xff
 80013ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	8979      	ldrh	r1, [r7, #10]
 80013d8:	2300      	movs	r3, #0
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 faeb 	bl	80019bc <I2C_TransferConfig>
 80013e6:	e00f      	b.n	8001408 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	8979      	ldrh	r1, [r7, #10]
 80013fa:	2300      	movs	r3, #0
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 fada 	bl	80019bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800140c:	b29b      	uxth	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d19e      	bne.n	8001350 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	6a39      	ldr	r1, [r7, #32]
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f000 f9c2 	bl	80017a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e01a      	b.n	800145c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2220      	movs	r2, #32
 800142c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_I2C_Master_Transmit+0x1e4>)
 800143a:	400b      	ands	r3, r1
 800143c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2220      	movs	r2, #32
 8001442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800145a:	2302      	movs	r3, #2
  }
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	80002000 	.word	0x80002000
 8001468:	fe00e800 	.word	0xfe00e800

0800146c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af02      	add	r7, sp, #8
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	461a      	mov	r2, r3
 8001478:	460b      	mov	r3, r1
 800147a:	817b      	strh	r3, [r7, #10]
 800147c:	4613      	mov	r3, r2
 800147e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b20      	cmp	r3, #32
 800148a:	f040 80db 	bne.w	8001644 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <HAL_I2C_Master_Receive+0x30>
 8001498:	2302      	movs	r3, #2
 800149a:	e0d4      	b.n	8001646 <HAL_I2C_Master_Receive+0x1da>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014a4:	f7ff fb8c 	bl	8000bc0 <HAL_GetTick>
 80014a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2319      	movs	r3, #25
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f000 f8f2 	bl	80016a0 <I2C_WaitOnFlagUntilTimeout>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e0bf      	b.n	8001646 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2222      	movs	r2, #34	; 0x22
 80014ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2210      	movs	r2, #16
 80014d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	893a      	ldrh	r2, [r7, #8]
 80014e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	2bff      	cmp	r3, #255	; 0xff
 80014f6:	d90e      	bls.n	8001516 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	22ff      	movs	r2, #255	; 0xff
 80014fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001502:	b2da      	uxtb	r2, r3
 8001504:	8979      	ldrh	r1, [r7, #10]
 8001506:	4b52      	ldr	r3, [pc, #328]	; (8001650 <HAL_I2C_Master_Receive+0x1e4>)
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 fa54 	bl	80019bc <I2C_TransferConfig>
 8001514:	e06d      	b.n	80015f2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800151a:	b29a      	uxth	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001524:	b2da      	uxtb	r2, r3
 8001526:	8979      	ldrh	r1, [r7, #10]
 8001528:	4b49      	ldr	r3, [pc, #292]	; (8001650 <HAL_I2C_Master_Receive+0x1e4>)
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 fa43 	bl	80019bc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001536:	e05c      	b.n	80015f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	6a39      	ldr	r1, [r7, #32]
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f96b 	bl	8001818 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e07c      	b.n	8001646 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001568:	3b01      	subs	r3, #1
 800156a:	b29a      	uxth	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001574:	b29b      	uxth	r3, r3
 8001576:	3b01      	subs	r3, #1
 8001578:	b29a      	uxth	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001582:	b29b      	uxth	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d034      	beq.n	80015f2 <HAL_I2C_Master_Receive+0x186>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158c:	2b00      	cmp	r3, #0
 800158e:	d130      	bne.n	80015f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	2200      	movs	r2, #0
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 f880 	bl	80016a0 <I2C_WaitOnFlagUntilTimeout>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e04d      	b.n	8001646 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	2bff      	cmp	r3, #255	; 0xff
 80015b2:	d90e      	bls.n	80015d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	22ff      	movs	r2, #255	; 0xff
 80015b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	8979      	ldrh	r1, [r7, #10]
 80015c2:	2300      	movs	r3, #0
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f9f6 	bl	80019bc <I2C_TransferConfig>
 80015d0:	e00f      	b.n	80015f2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	8979      	ldrh	r1, [r7, #10]
 80015e4:	2300      	movs	r3, #0
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 f9e5 	bl	80019bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d19d      	bne.n	8001538 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	6a39      	ldr	r1, [r7, #32]
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 f8cd 	bl	80017a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e01a      	b.n	8001646 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2220      	movs	r2, #32
 8001616:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6859      	ldr	r1, [r3, #4]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_I2C_Master_Receive+0x1e8>)
 8001624:	400b      	ands	r3, r1
 8001626:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2220      	movs	r2, #32
 800162c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	e000      	b.n	8001646 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001644:	2302      	movs	r3, #2
  }
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	80002400 	.word	0x80002400
 8001654:	fe00e800 	.word	0xfe00e800

08001658 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b02      	cmp	r3, #2
 800166c:	d103      	bne.n	8001676 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2200      	movs	r2, #0
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b01      	cmp	r3, #1
 8001682:	d007      	beq.n	8001694 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	699a      	ldr	r2, [r3, #24]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	619a      	str	r2, [r3, #24]
  }
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	4613      	mov	r3, r2
 80016ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016b0:	e022      	b.n	80016f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b8:	d01e      	beq.n	80016f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ba:	f7ff fa81 	bl	8000bc0 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d302      	bcc.n	80016d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d113      	bne.n	80016f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d4:	f043 0220 	orr.w	r2, r3, #32
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2220      	movs	r2, #32
 80016e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e00f      	b.n	8001718 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	699a      	ldr	r2, [r3, #24]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	4013      	ands	r3, r2
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	429a      	cmp	r2, r3
 8001706:	bf0c      	ite	eq
 8001708:	2301      	moveq	r3, #1
 800170a:	2300      	movne	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	429a      	cmp	r2, r3
 8001714:	d0cd      	beq.n	80016b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800172c:	e02c      	b.n	8001788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 f8dc 	bl	80018f0 <I2C_IsAcknowledgeFailed>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e02a      	b.n	8001798 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001748:	d01e      	beq.n	8001788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174a:	f7ff fa39 	bl	8000bc0 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	429a      	cmp	r2, r3
 8001758:	d302      	bcc.n	8001760 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d113      	bne.n	8001788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	f043 0220 	orr.w	r2, r3, #32
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2220      	movs	r2, #32
 8001770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e007      	b.n	8001798 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b02      	cmp	r3, #2
 8001794:	d1cb      	bne.n	800172e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017ac:	e028      	b.n	8001800 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f89c 	bl	80018f0 <I2C_IsAcknowledgeFailed>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e026      	b.n	8001810 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017c2:	f7ff f9fd 	bl	8000bc0 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d302      	bcc.n	80017d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d113      	bne.n	8001800 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	f043 0220 	orr.w	r2, r3, #32
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2220      	movs	r2, #32
 80017e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e007      	b.n	8001810 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	2b20      	cmp	r3, #32
 800180c:	d1cf      	bne.n	80017ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001824:	e055      	b.n	80018d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 f860 	bl	80018f0 <I2C_IsAcknowledgeFailed>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e053      	b.n	80018e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0320 	and.w	r3, r3, #32
 8001844:	2b20      	cmp	r3, #32
 8001846:	d129      	bne.n	800189c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b04      	cmp	r3, #4
 8001854:	d105      	bne.n	8001862 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e03f      	b.n	80018e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2220      	movs	r2, #32
 8001868:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6859      	ldr	r1, [r3, #4]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001876:	400b      	ands	r3, r1
 8001878:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2220      	movs	r2, #32
 8001884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e022      	b.n	80018e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800189c:	f7ff f990 	bl	8000bc0 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d302      	bcc.n	80018b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10f      	bne.n	80018d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f043 0220 	orr.w	r2, r3, #32
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2220      	movs	r2, #32
 80018c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e007      	b.n	80018e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d1a2      	bne.n	8001826 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	fe00e800 	.word	0xfe00e800

080018f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2b10      	cmp	r3, #16
 8001908:	d151      	bne.n	80019ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800190a:	e022      	b.n	8001952 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001912:	d01e      	beq.n	8001952 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001914:	f7ff f954 	bl	8000bc0 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	429a      	cmp	r2, r3
 8001922:	d302      	bcc.n	800192a <I2C_IsAcknowledgeFailed+0x3a>
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d113      	bne.n	8001952 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f043 0220 	orr.w	r2, r3, #32
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2220      	movs	r2, #32
 800193a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e02e      	b.n	80019b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0320 	and.w	r3, r3, #32
 800195c:	2b20      	cmp	r3, #32
 800195e:	d1d5      	bne.n	800190c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2210      	movs	r2, #16
 8001966:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2220      	movs	r2, #32
 800196e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7ff fe71 	bl	8001658 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8001982:	400b      	ands	r3, r1
 8001984:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f043 0204 	orr.w	r2, r3, #4
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2220      	movs	r2, #32
 8001996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	fe00e800 	.word	0xfe00e800

080019bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	460b      	mov	r3, r1
 80019c8:	817b      	strh	r3, [r7, #10]
 80019ca:	4613      	mov	r3, r2
 80019cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	0d5b      	lsrs	r3, r3, #21
 80019d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80019dc:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <I2C_TransferConfig+0x58>)
 80019de:	430b      	orrs	r3, r1
 80019e0:	43db      	mvns	r3, r3
 80019e2:	ea02 0103 	and.w	r1, r2, r3
 80019e6:	897b      	ldrh	r3, [r7, #10]
 80019e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019ec:	7a7b      	ldrb	r3, [r7, #9]
 80019ee:	041b      	lsls	r3, r3, #16
 80019f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	431a      	orrs	r2, r3
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	03ff63ff 	.word	0x03ff63ff

08001a18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	d138      	bne.n	8001aa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e032      	b.n	8001aa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2224      	movs	r2, #36	; 0x24
 8001a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6819      	ldr	r1, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e000      	b.n	8001aa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001aa0:	2302      	movs	r3, #2
  }
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d139      	bne.n	8001b38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e033      	b.n	8001b3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2224      	movs	r2, #36	; 0x24
 8001ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0201 	bic.w	r2, r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e000      	b.n	8001b3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b38:	2302      	movs	r3, #2
  }
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e29b      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8087 	beq.w	8001c7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b6c:	4b96      	ldr	r3, [pc, #600]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d00c      	beq.n	8001b92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b78:	4b93      	ldr	r3, [pc, #588]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d112      	bne.n	8001baa <HAL_RCC_OscConfig+0x62>
 8001b84:	4b90      	ldr	r3, [pc, #576]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b90:	d10b      	bne.n	8001baa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b92:	4b8d      	ldr	r3, [pc, #564]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d06c      	beq.n	8001c78 <HAL_RCC_OscConfig+0x130>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d168      	bne.n	8001c78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e275      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x7a>
 8001bb4:	4b84      	ldr	r3, [pc, #528]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a83      	ldr	r2, [pc, #524]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	e02e      	b.n	8001c20 <HAL_RCC_OscConfig+0xd8>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x9c>
 8001bca:	4b7f      	ldr	r3, [pc, #508]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a7e      	ldr	r2, [pc, #504]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b7c      	ldr	r3, [pc, #496]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7b      	ldr	r2, [pc, #492]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e01d      	b.n	8001c20 <HAL_RCC_OscConfig+0xd8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0xc0>
 8001bee:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a75      	ldr	r2, [pc, #468]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a72      	ldr	r2, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xd8>
 8001c08:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b6c      	ldr	r3, [pc, #432]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a6b      	ldr	r2, [pc, #428]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7fe ffca 	bl	8000bc0 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7fe ffc6 	bl	8000bc0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e229      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0xe8>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7fe ffb6 	bl	8000bc0 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7fe ffb2 	bl	8000bc0 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e215      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x110>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d069      	beq.n	8001d5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c86:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c92:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d11c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x190>
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d116      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x17a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e1e9      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	493d      	ldr	r1, [pc, #244]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	e040      	b.n	8001d5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d023      	beq.n	8001d28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a38      	ldr	r2, [pc, #224]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7fe ff68 	bl	8000bc0 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7fe ff64 	bl	8000bc0 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1c7      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4929      	ldr	r1, [pc, #164]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
 8001d26:	e018      	b.n	8001d5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a26      	ldr	r2, [pc, #152]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7fe ff44 	bl	8000bc0 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7fe ff40 	bl	8000bc0 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1a3      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d038      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d019      	beq.n	8001da2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d72:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7a:	f7fe ff21 	bl	8000bc0 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d82:	f7fe ff1d 	bl	8000bc0 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e180      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x23a>
 8001da0:	e01a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dae:	f7fe ff07 	bl	8000bc0 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db6:	f7fe ff03 	bl	8000bc0 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d903      	bls.n	8001dcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e166      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
 8001dc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dcc:	4b92      	ldr	r3, [pc, #584]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ee      	bne.n	8001db6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80a4 	beq.w	8001f2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de6:	4b8c      	ldr	r3, [pc, #560]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10d      	bne.n	8001e0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	4b89      	ldr	r3, [pc, #548]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a88      	ldr	r2, [pc, #544]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfe:	4b86      	ldr	r3, [pc, #536]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0e:	4b83      	ldr	r3, [pc, #524]	; (800201c <HAL_RCC_OscConfig+0x4d4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d118      	bne.n	8001e4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e1a:	4b80      	ldr	r3, [pc, #512]	; (800201c <HAL_RCC_OscConfig+0x4d4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a7f      	ldr	r2, [pc, #508]	; (800201c <HAL_RCC_OscConfig+0x4d4>)
 8001e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e26:	f7fe fecb 	bl	8000bc0 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2e:	f7fe fec7 	bl	8000bc0 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b64      	cmp	r3, #100	; 0x64
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e12a      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e40:	4b76      	ldr	r3, [pc, #472]	; (800201c <HAL_RCC_OscConfig+0x4d4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x31a>
 8001e54:	4b70      	ldr	r3, [pc, #448]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	4a6f      	ldr	r2, [pc, #444]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e60:	e02d      	b.n	8001ebe <HAL_RCC_OscConfig+0x376>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x33c>
 8001e6a:	4b6b      	ldr	r3, [pc, #428]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6e:	4a6a      	ldr	r2, [pc, #424]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	6713      	str	r3, [r2, #112]	; 0x70
 8001e76:	4b68      	ldr	r3, [pc, #416]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7a:	4a67      	ldr	r2, [pc, #412]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	6713      	str	r3, [r2, #112]	; 0x70
 8001e82:	e01c      	b.n	8001ebe <HAL_RCC_OscConfig+0x376>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d10c      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x35e>
 8001e8c:	4b62      	ldr	r3, [pc, #392]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	4a61      	ldr	r2, [pc, #388]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	6713      	str	r3, [r2, #112]	; 0x70
 8001e98:	4b5f      	ldr	r3, [pc, #380]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	4a5e      	ldr	r2, [pc, #376]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea4:	e00b      	b.n	8001ebe <HAL_RCC_OscConfig+0x376>
 8001ea6:	4b5c      	ldr	r3, [pc, #368]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eaa:	4a5b      	ldr	r2, [pc, #364]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb2:	4b59      	ldr	r3, [pc, #356]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb6:	4a58      	ldr	r2, [pc, #352]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001eb8:	f023 0304 	bic.w	r3, r3, #4
 8001ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d015      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec6:	f7fe fe7b 	bl	8000bc0 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7fe fe77 	bl	8000bc0 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e0d8      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee4:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0ee      	beq.n	8001ece <HAL_RCC_OscConfig+0x386>
 8001ef0:	e014      	b.n	8001f1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef2:	f7fe fe65 	bl	8000bc0 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7fe fe61 	bl	8000bc0 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0c2      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1ee      	bne.n	8001efa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d105      	bne.n	8001f2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a3c      	ldr	r2, [pc, #240]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80ae 	beq.w	8002094 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f38:	4b37      	ldr	r3, [pc, #220]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d06d      	beq.n	8002020 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d14b      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4c:	4b32      	ldr	r3, [pc, #200]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a31      	ldr	r2, [pc, #196]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7fe fe32 	bl	8000bc0 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7fe fe2e 	bl	8000bc0 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e091      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f72:	4b29      	ldr	r3, [pc, #164]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	019b      	lsls	r3, r3, #6
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	3b01      	subs	r3, #1
 8001f98:	041b      	lsls	r3, r3, #16
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	061b      	lsls	r3, r3, #24
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	071b      	lsls	r3, r3, #28
 8001faa:	491b      	ldr	r1, [pc, #108]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a18      	ldr	r2, [pc, #96]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7fe fe00 	bl	8000bc0 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7fe fdfc 	bl	8000bc0 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e05f      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x47c>
 8001fe2:	e057      	b.n	8002094 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 8001fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fde6 	bl	8000bc0 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7fe fde2 	bl	8000bc0 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e045      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200a:	4b03      	ldr	r3, [pc, #12]	; (8002018 <HAL_RCC_OscConfig+0x4d0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4b0>
 8002016:	e03d      	b.n	8002094 <HAL_RCC_OscConfig+0x54c>
 8002018:	40023800 	.word	0x40023800
 800201c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <HAL_RCC_OscConfig+0x558>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d030      	beq.n	8002090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002038:	429a      	cmp	r2, r3
 800203a:	d129      	bne.n	8002090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d122      	bne.n	8002090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002050:	4013      	ands	r3, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002056:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002058:	4293      	cmp	r3, r2
 800205a:	d119      	bne.n	8002090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	085b      	lsrs	r3, r3, #1
 8002068:	3b01      	subs	r3, #1
 800206a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800206c:	429a      	cmp	r2, r3
 800206e:	d10f      	bne.n	8002090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800207c:	429a      	cmp	r2, r3
 800207e:	d107      	bne.n	8002090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800

080020a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0d0      	b.n	800225e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d910      	bls.n	80020ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b67      	ldr	r3, [pc, #412]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 020f 	bic.w	r2, r3, #15
 80020d2:	4965      	ldr	r1, [pc, #404]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b63      	ldr	r3, [pc, #396]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0b8      	b.n	800225e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002104:	4b59      	ldr	r3, [pc, #356]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4a58      	ldr	r2, [pc, #352]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 800210a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800210e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800211c:	4b53      	ldr	r3, [pc, #332]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4a52      	ldr	r2, [pc, #328]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002126:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002128:	4b50      	ldr	r3, [pc, #320]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	494d      	ldr	r1, [pc, #308]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d040      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b47      	ldr	r3, [pc, #284]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d115      	bne.n	8002186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e07f      	b.n	800225e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	4b41      	ldr	r3, [pc, #260]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e073      	b.n	800225e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002176:	4b3d      	ldr	r3, [pc, #244]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e06b      	b.n	800225e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002186:	4b39      	ldr	r3, [pc, #228]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f023 0203 	bic.w	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4936      	ldr	r1, [pc, #216]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	4313      	orrs	r3, r2
 8002196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002198:	f7fe fd12 	bl	8000bc0 <HAL_GetTick>
 800219c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7fe fd0e 	bl	8000bc0 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e053      	b.n	800225e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 020c 	and.w	r2, r3, #12
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1eb      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d210      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 020f 	bic.w	r2, r3, #15
 80021de:	4922      	ldr	r1, [pc, #136]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e032      	b.n	800225e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4916      	ldr	r1, [pc, #88]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	490e      	ldr	r1, [pc, #56]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002236:	f000 f821 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800223a:	4602      	mov	r2, r0
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	490a      	ldr	r1, [pc, #40]	; (8002270 <HAL_RCC_ClockConfig+0x1cc>)
 8002248:	5ccb      	ldrb	r3, [r1, r3]
 800224a:	fa22 f303 	lsr.w	r3, r2, r3
 800224e:	4a09      	ldr	r2, [pc, #36]	; (8002274 <HAL_RCC_ClockConfig+0x1d0>)
 8002250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1d4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fc6e 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023c00 	.word	0x40023c00
 800226c:	40023800 	.word	0x40023800
 8002270:	080035fc 	.word	0x080035fc
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	b5b0      	push	{r4, r5, r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002282:	2100      	movs	r1, #0
 8002284:	6079      	str	r1, [r7, #4]
 8002286:	2100      	movs	r1, #0
 8002288:	60f9      	str	r1, [r7, #12]
 800228a:	2100      	movs	r1, #0
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800228e:	2100      	movs	r1, #0
 8002290:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002292:	4952      	ldr	r1, [pc, #328]	; (80023dc <HAL_RCC_GetSysClockFreq+0x160>)
 8002294:	6889      	ldr	r1, [r1, #8]
 8002296:	f001 010c 	and.w	r1, r1, #12
 800229a:	2908      	cmp	r1, #8
 800229c:	d00d      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0x3e>
 800229e:	2908      	cmp	r1, #8
 80022a0:	f200 8094 	bhi.w	80023cc <HAL_RCC_GetSysClockFreq+0x150>
 80022a4:	2900      	cmp	r1, #0
 80022a6:	d002      	beq.n	80022ae <HAL_RCC_GetSysClockFreq+0x32>
 80022a8:	2904      	cmp	r1, #4
 80022aa:	d003      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x38>
 80022ac:	e08e      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022ae:	4b4c      	ldr	r3, [pc, #304]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80022b0:	60bb      	str	r3, [r7, #8]
      break;
 80022b2:	e08e      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b4:	4b4b      	ldr	r3, [pc, #300]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80022b6:	60bb      	str	r3, [r7, #8]
      break;
 80022b8:	e08b      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022ba:	4948      	ldr	r1, [pc, #288]	; (80023dc <HAL_RCC_GetSysClockFreq+0x160>)
 80022bc:	6849      	ldr	r1, [r1, #4]
 80022be:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80022c2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80022c4:	4945      	ldr	r1, [pc, #276]	; (80023dc <HAL_RCC_GetSysClockFreq+0x160>)
 80022c6:	6849      	ldr	r1, [r1, #4]
 80022c8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80022cc:	2900      	cmp	r1, #0
 80022ce:	d024      	beq.n	800231a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d0:	4942      	ldr	r1, [pc, #264]	; (80023dc <HAL_RCC_GetSysClockFreq+0x160>)
 80022d2:	6849      	ldr	r1, [r1, #4]
 80022d4:	0989      	lsrs	r1, r1, #6
 80022d6:	4608      	mov	r0, r1
 80022d8:	f04f 0100 	mov.w	r1, #0
 80022dc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80022e0:	f04f 0500 	mov.w	r5, #0
 80022e4:	ea00 0204 	and.w	r2, r0, r4
 80022e8:	ea01 0305 	and.w	r3, r1, r5
 80022ec:	493d      	ldr	r1, [pc, #244]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80022ee:	fb01 f003 	mul.w	r0, r1, r3
 80022f2:	2100      	movs	r1, #0
 80022f4:	fb01 f102 	mul.w	r1, r1, r2
 80022f8:	1844      	adds	r4, r0, r1
 80022fa:	493a      	ldr	r1, [pc, #232]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80022fc:	fba2 0101 	umull	r0, r1, r2, r1
 8002300:	1863      	adds	r3, r4, r1
 8002302:	4619      	mov	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	461a      	mov	r2, r3
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	f7fd ff94 	bl	8000238 <__aeabi_uldivmod>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4613      	mov	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e04a      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231a:	4b30      	ldr	r3, [pc, #192]	; (80023dc <HAL_RCC_GetSysClockFreq+0x160>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	099b      	lsrs	r3, r3, #6
 8002320:	461a      	mov	r2, r3
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	f240 10ff 	movw	r0, #511	; 0x1ff
 800232a:	f04f 0100 	mov.w	r1, #0
 800232e:	ea02 0400 	and.w	r4, r2, r0
 8002332:	ea03 0501 	and.w	r5, r3, r1
 8002336:	4620      	mov	r0, r4
 8002338:	4629      	mov	r1, r5
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	014b      	lsls	r3, r1, #5
 8002344:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002348:	0142      	lsls	r2, r0, #5
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	1b00      	subs	r0, r0, r4
 8002350:	eb61 0105 	sbc.w	r1, r1, r5
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	018b      	lsls	r3, r1, #6
 800235e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002362:	0182      	lsls	r2, r0, #6
 8002364:	1a12      	subs	r2, r2, r0
 8002366:	eb63 0301 	sbc.w	r3, r3, r1
 800236a:	f04f 0000 	mov.w	r0, #0
 800236e:	f04f 0100 	mov.w	r1, #0
 8002372:	00d9      	lsls	r1, r3, #3
 8002374:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002378:	00d0      	lsls	r0, r2, #3
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	1912      	adds	r2, r2, r4
 8002380:	eb45 0303 	adc.w	r3, r5, r3
 8002384:	f04f 0000 	mov.w	r0, #0
 8002388:	f04f 0100 	mov.w	r1, #0
 800238c:	0299      	lsls	r1, r3, #10
 800238e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002392:	0290      	lsls	r0, r2, #10
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	461a      	mov	r2, r3
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	f7fd ff48 	bl	8000238 <__aeabi_uldivmod>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4613      	mov	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_RCC_GetSysClockFreq+0x160>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	0c1b      	lsrs	r3, r3, #16
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	3301      	adds	r3, #1
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	60bb      	str	r3, [r7, #8]
      break;
 80023ca:	e002      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80023ce:	60bb      	str	r3, [r7, #8]
      break;
 80023d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d2:	68bb      	ldr	r3, [r7, #8]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bdb0      	pop	{r4, r5, r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	00f42400 	.word	0x00f42400
 80023e4:	017d7840 	.word	0x017d7840

080023e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000000 	.word	0x20000000

08002400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002404:	f7ff fff0 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 8002408:	4602      	mov	r2, r0
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	0a9b      	lsrs	r3, r3, #10
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	4903      	ldr	r1, [pc, #12]	; (8002424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002416:	5ccb      	ldrb	r3, [r1, r3]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40023800 	.word	0x40023800
 8002424:	0800360c 	.word	0x0800360c

08002428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800242c:	f7ff ffdc 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 8002430:	4602      	mov	r2, r0
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	0b5b      	lsrs	r3, r3, #13
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	4903      	ldr	r1, [pc, #12]	; (800244c <HAL_RCC_GetPCLK2Freq+0x24>)
 800243e:	5ccb      	ldrb	r3, [r1, r3]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40023800 	.word	0x40023800
 800244c:	0800360c 	.word	0x0800360c

08002450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d012      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002478:	4b69      	ldr	r3, [pc, #420]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4a68      	ldr	r2, [pc, #416]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002482:	6093      	str	r3, [r2, #8]
 8002484:	4b66      	ldr	r3, [pc, #408]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248c:	4964      	ldr	r1, [pc, #400]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800249a:	2301      	movs	r3, #1
 800249c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d017      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024aa:	4b5d      	ldr	r3, [pc, #372]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	4959      	ldr	r1, [pc, #356]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024c8:	d101      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80024d6:	2301      	movs	r3, #1
 80024d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d017      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024e6:	4b4e      	ldr	r3, [pc, #312]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	494a      	ldr	r1, [pc, #296]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002504:	d101      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002506:	2301      	movs	r3, #1
 8002508:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002512:	2301      	movs	r3, #1
 8002514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002522:	2301      	movs	r3, #1
 8002524:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 808b 	beq.w	800264a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002534:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	4a39      	ldr	r2, [pc, #228]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253e:	6413      	str	r3, [r2, #64]	; 0x40
 8002540:	4b37      	ldr	r3, [pc, #220]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800254c:	4b35      	ldr	r3, [pc, #212]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a34      	ldr	r2, [pc, #208]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002558:	f7fe fb32 	bl	8000bc0 <HAL_GetTick>
 800255c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002560:	f7fe fb2e 	bl	8000bc0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e38d      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002572:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800257e:	4b28      	ldr	r3, [pc, #160]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002586:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d035      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	429a      	cmp	r2, r3
 800259a:	d02e      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800259c:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025be:	4a18      	ldr	r2, [pc, #96]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d114      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe faf6 	bl	8000bc0 <HAL_GetTick>
 80025d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d6:	e00a      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d8:	f7fe faf2 	bl	8000bc0 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e34f      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0ee      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002606:	d111      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002616:	400b      	ands	r3, r1
 8002618:	4901      	ldr	r1, [pc, #4]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261a:	4313      	orrs	r3, r2
 800261c:	608b      	str	r3, [r1, #8]
 800261e:	e00b      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002620:	40023800 	.word	0x40023800
 8002624:	40007000 	.word	0x40007000
 8002628:	0ffffcff 	.word	0x0ffffcff
 800262c:	4bb3      	ldr	r3, [pc, #716]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4ab2      	ldr	r2, [pc, #712]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002632:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002636:	6093      	str	r3, [r2, #8]
 8002638:	4bb0      	ldr	r3, [pc, #704]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800263a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002644:	49ad      	ldr	r1, [pc, #692]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002646:	4313      	orrs	r3, r2
 8002648:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	d010      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002656:	4ba9      	ldr	r3, [pc, #676]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800265c:	4aa7      	ldr	r2, [pc, #668]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800265e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002662:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002666:	4ba5      	ldr	r3, [pc, #660]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002668:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	49a2      	ldr	r1, [pc, #648]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002684:	4b9d      	ldr	r3, [pc, #628]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002692:	499a      	ldr	r1, [pc, #616]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026a6:	4b95      	ldr	r3, [pc, #596]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026b4:	4991      	ldr	r1, [pc, #580]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026c8:	4b8c      	ldr	r3, [pc, #560]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d6:	4989      	ldr	r1, [pc, #548]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026ea:	4b84      	ldr	r3, [pc, #528]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	4980      	ldr	r1, [pc, #512]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800270c:	4b7b      	ldr	r3, [pc, #492]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	f023 0203 	bic.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4978      	ldr	r1, [pc, #480]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800272e:	4b73      	ldr	r3, [pc, #460]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002734:	f023 020c 	bic.w	r2, r3, #12
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800273c:	496f      	ldr	r1, [pc, #444]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002750:	4b6a      	ldr	r3, [pc, #424]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275e:	4967      	ldr	r1, [pc, #412]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002772:	4b62      	ldr	r3, [pc, #392]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002778:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002780:	495e      	ldr	r1, [pc, #376]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002794:	4b59      	ldr	r3, [pc, #356]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	4956      	ldr	r1, [pc, #344]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027b6:	4b51      	ldr	r3, [pc, #324]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	494d      	ldr	r1, [pc, #308]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80027d8:	4b48      	ldr	r3, [pc, #288]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	4945      	ldr	r1, [pc, #276]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027fa:	4b40      	ldr	r3, [pc, #256]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002800:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002808:	493c      	ldr	r1, [pc, #240]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800281c:	4b37      	ldr	r3, [pc, #220]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002822:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800282a:	4934      	ldr	r1, [pc, #208]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d011      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800283e:	4b2f      	ldr	r3, [pc, #188]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284c:	492b      	ldr	r1, [pc, #172]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800285c:	d101      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800285e:	2301      	movs	r3, #1
 8002860:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800286e:	2301      	movs	r3, #1
 8002870:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800287e:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002884:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288c:	491b      	ldr	r1, [pc, #108]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00b      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028b0:	4912      	ldr	r1, [pc, #72]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80028c4:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d4:	4909      	ldr	r1, [pc, #36]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00f      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f8:	e002      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800
 8002900:	4985      	ldr	r1, [pc, #532]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00b      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002914:	4b80      	ldr	r3, [pc, #512]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800291a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002924:	497c      	ldr	r1, [pc, #496]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d005      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800293a:	f040 80d6 	bne.w	8002aea <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800293e:	4b76      	ldr	r3, [pc, #472]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a75      	ldr	r2, [pc, #468]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002944:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294a:	f7fe f939 	bl	8000bc0 <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002952:	f7fe f935 	bl	8000bc0 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b64      	cmp	r3, #100	; 0x64
 800295e:	d901      	bls.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e194      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002964:	4b6c      	ldr	r3, [pc, #432]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d021      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002980:	2b00      	cmp	r3, #0
 8002982:	d11d      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002984:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800298a:	0c1b      	lsrs	r3, r3, #16
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002992:	4b61      	ldr	r3, [pc, #388]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002998:	0e1b      	lsrs	r3, r3, #24
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	019a      	lsls	r2, r3, #6
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	041b      	lsls	r3, r3, #16
 80029aa:	431a      	orrs	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	061b      	lsls	r3, r3, #24
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	071b      	lsls	r3, r3, #28
 80029b8:	4957      	ldr	r1, [pc, #348]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d02e      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ea:	d129      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029ec:	4b4a      	ldr	r3, [pc, #296]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f2:	0c1b      	lsrs	r3, r3, #16
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a00:	0f1b      	lsrs	r3, r3, #28
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	019a      	lsls	r2, r3, #6
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	071b      	lsls	r3, r3, #28
 8002a20:	493d      	ldr	r1, [pc, #244]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a28:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2e:	f023 021f 	bic.w	r2, r3, #31
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	3b01      	subs	r3, #1
 8002a38:	4937      	ldr	r1, [pc, #220]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01d      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a52:	0e1b      	lsrs	r3, r3, #24
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a5a:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a60:	0f1b      	lsrs	r3, r3, #28
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	019a      	lsls	r2, r3, #6
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	041b      	lsls	r3, r3, #16
 8002a74:	431a      	orrs	r2, r3
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	071b      	lsls	r3, r3, #28
 8002a80:	4925      	ldr	r1, [pc, #148]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d011      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	019a      	lsls	r2, r3, #6
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	061b      	lsls	r3, r3, #24
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	071b      	lsls	r3, r3, #28
 8002ab0:	4919      	ldr	r1, [pc, #100]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ab8:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002abe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac4:	f7fe f87c 	bl	8000bc0 <HAL_GetTick>
 8002ac8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002acc:	f7fe f878 	bl	8000bc0 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	; 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e0d7      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	f040 80cd 	bne.w	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afe:	f7fe f85f 	bl	8000bc0 <HAL_GetTick>
 8002b02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b06:	f7fe f85b 	bl	8000bc0 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b64      	cmp	r3, #100	; 0x64
 8002b12:	d903      	bls.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0ba      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002b18:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b1c:	4b5e      	ldr	r3, [pc, #376]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b28:	d0ed      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d02e      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d12a      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b52:	4b51      	ldr	r3, [pc, #324]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b58:	0c1b      	lsrs	r3, r3, #16
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b60:	4b4d      	ldr	r3, [pc, #308]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	0f1b      	lsrs	r3, r3, #28
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	019a      	lsls	r2, r3, #6
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	041b      	lsls	r3, r3, #16
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	061b      	lsls	r3, r3, #24
 8002b80:	431a      	orrs	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	071b      	lsls	r3, r3, #28
 8002b86:	4944      	ldr	r1, [pc, #272]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b8e:	4b42      	ldr	r3, [pc, #264]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	493d      	ldr	r1, [pc, #244]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d022      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bbc:	d11d      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bbe:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	0e1b      	lsrs	r3, r3, #24
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bcc:	4b32      	ldr	r3, [pc, #200]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	0f1b      	lsrs	r3, r3, #28
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	019a      	lsls	r2, r3, #6
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	061b      	lsls	r3, r3, #24
 8002bec:	431a      	orrs	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	071b      	lsls	r3, r3, #28
 8002bf2:	4929      	ldr	r1, [pc, #164]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d028      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	0e1b      	lsrs	r3, r3, #24
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c14:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	0c1b      	lsrs	r3, r3, #16
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	019a      	lsls	r2, r3, #6
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	061b      	lsls	r3, r3, #24
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	071b      	lsls	r3, r3, #28
 8002c3a:	4917      	ldr	r1, [pc, #92]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	4911      	ldr	r1, [pc, #68]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c64:	f7fd ffac 	bl	8000bc0 <HAL_GetTick>
 8002c68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c6c:	f7fd ffa8 	bl	8000bc0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e007      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c8a:	d1ef      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3720      	adds	r7, #32
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800

08002c9c <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e059      	b.n	8002d68 <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d106      	bne.n	8002cca <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f7fd fe7d 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2224      	movs	r2, #36	; 0x24
 8002cce:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f845 	bl	8002d70 <UART_SetConfig>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_MultiProcessor_Init+0x54>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e03b      	b.n	8002d68 <HAL_MultiProcessor_Init+0xcc>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_MultiProcessor_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fae5 	bl	80032c8 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d1c:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d24:	d10a      	bne.n	8002d3c <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8002d30:	7afb      	ldrb	r3, [r7, #11]
 8002d32:	061a      	lsls	r2, r3, #24
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fb53 	bl	800340c <UART_CheckIdleState>
 8002d66:	4603      	mov	r3, r0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4ba7      	ldr	r3, [pc, #668]	; (800303c <UART_SetConfig+0x2cc>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	6939      	ldr	r1, [r7, #16]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a95      	ldr	r2, [pc, #596]	; (8003040 <UART_SetConfig+0x2d0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d120      	bne.n	8002e32 <UART_SetConfig+0xc2>
 8002df0:	4b94      	ldr	r3, [pc, #592]	; (8003044 <UART_SetConfig+0x2d4>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d816      	bhi.n	8002e2c <UART_SetConfig+0xbc>
 8002dfe:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <UART_SetConfig+0x94>)
 8002e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e04:	08002e15 	.word	0x08002e15
 8002e08:	08002e21 	.word	0x08002e21
 8002e0c:	08002e1b 	.word	0x08002e1b
 8002e10:	08002e27 	.word	0x08002e27
 8002e14:	2301      	movs	r3, #1
 8002e16:	77fb      	strb	r3, [r7, #31]
 8002e18:	e14f      	b.n	80030ba <UART_SetConfig+0x34a>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	e14c      	b.n	80030ba <UART_SetConfig+0x34a>
 8002e20:	2304      	movs	r3, #4
 8002e22:	77fb      	strb	r3, [r7, #31]
 8002e24:	e149      	b.n	80030ba <UART_SetConfig+0x34a>
 8002e26:	2308      	movs	r3, #8
 8002e28:	77fb      	strb	r3, [r7, #31]
 8002e2a:	e146      	b.n	80030ba <UART_SetConfig+0x34a>
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	77fb      	strb	r3, [r7, #31]
 8002e30:	e143      	b.n	80030ba <UART_SetConfig+0x34a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a84      	ldr	r2, [pc, #528]	; (8003048 <UART_SetConfig+0x2d8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d132      	bne.n	8002ea2 <UART_SetConfig+0x132>
 8002e3c:	4b81      	ldr	r3, [pc, #516]	; (8003044 <UART_SetConfig+0x2d4>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d828      	bhi.n	8002e9c <UART_SetConfig+0x12c>
 8002e4a:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <UART_SetConfig+0xe0>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002e85 	.word	0x08002e85
 8002e54:	08002e9d 	.word	0x08002e9d
 8002e58:	08002e9d 	.word	0x08002e9d
 8002e5c:	08002e9d 	.word	0x08002e9d
 8002e60:	08002e91 	.word	0x08002e91
 8002e64:	08002e9d 	.word	0x08002e9d
 8002e68:	08002e9d 	.word	0x08002e9d
 8002e6c:	08002e9d 	.word	0x08002e9d
 8002e70:	08002e8b 	.word	0x08002e8b
 8002e74:	08002e9d 	.word	0x08002e9d
 8002e78:	08002e9d 	.word	0x08002e9d
 8002e7c:	08002e9d 	.word	0x08002e9d
 8002e80:	08002e97 	.word	0x08002e97
 8002e84:	2300      	movs	r3, #0
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e117      	b.n	80030ba <UART_SetConfig+0x34a>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	e114      	b.n	80030ba <UART_SetConfig+0x34a>
 8002e90:	2304      	movs	r3, #4
 8002e92:	77fb      	strb	r3, [r7, #31]
 8002e94:	e111      	b.n	80030ba <UART_SetConfig+0x34a>
 8002e96:	2308      	movs	r3, #8
 8002e98:	77fb      	strb	r3, [r7, #31]
 8002e9a:	e10e      	b.n	80030ba <UART_SetConfig+0x34a>
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	77fb      	strb	r3, [r7, #31]
 8002ea0:	e10b      	b.n	80030ba <UART_SetConfig+0x34a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a69      	ldr	r2, [pc, #420]	; (800304c <UART_SetConfig+0x2dc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d120      	bne.n	8002eee <UART_SetConfig+0x17e>
 8002eac:	4b65      	ldr	r3, [pc, #404]	; (8003044 <UART_SetConfig+0x2d4>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002eb6:	2b30      	cmp	r3, #48	; 0x30
 8002eb8:	d013      	beq.n	8002ee2 <UART_SetConfig+0x172>
 8002eba:	2b30      	cmp	r3, #48	; 0x30
 8002ebc:	d814      	bhi.n	8002ee8 <UART_SetConfig+0x178>
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d009      	beq.n	8002ed6 <UART_SetConfig+0x166>
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d810      	bhi.n	8002ee8 <UART_SetConfig+0x178>
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <UART_SetConfig+0x160>
 8002eca:	2b10      	cmp	r3, #16
 8002ecc:	d006      	beq.n	8002edc <UART_SetConfig+0x16c>
 8002ece:	e00b      	b.n	8002ee8 <UART_SetConfig+0x178>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	77fb      	strb	r3, [r7, #31]
 8002ed4:	e0f1      	b.n	80030ba <UART_SetConfig+0x34a>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	77fb      	strb	r3, [r7, #31]
 8002eda:	e0ee      	b.n	80030ba <UART_SetConfig+0x34a>
 8002edc:	2304      	movs	r3, #4
 8002ede:	77fb      	strb	r3, [r7, #31]
 8002ee0:	e0eb      	b.n	80030ba <UART_SetConfig+0x34a>
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	77fb      	strb	r3, [r7, #31]
 8002ee6:	e0e8      	b.n	80030ba <UART_SetConfig+0x34a>
 8002ee8:	2310      	movs	r3, #16
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e0e5      	b.n	80030ba <UART_SetConfig+0x34a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a57      	ldr	r2, [pc, #348]	; (8003050 <UART_SetConfig+0x2e0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d120      	bne.n	8002f3a <UART_SetConfig+0x1ca>
 8002ef8:	4b52      	ldr	r3, [pc, #328]	; (8003044 <UART_SetConfig+0x2d4>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f02:	2bc0      	cmp	r3, #192	; 0xc0
 8002f04:	d013      	beq.n	8002f2e <UART_SetConfig+0x1be>
 8002f06:	2bc0      	cmp	r3, #192	; 0xc0
 8002f08:	d814      	bhi.n	8002f34 <UART_SetConfig+0x1c4>
 8002f0a:	2b80      	cmp	r3, #128	; 0x80
 8002f0c:	d009      	beq.n	8002f22 <UART_SetConfig+0x1b2>
 8002f0e:	2b80      	cmp	r3, #128	; 0x80
 8002f10:	d810      	bhi.n	8002f34 <UART_SetConfig+0x1c4>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <UART_SetConfig+0x1ac>
 8002f16:	2b40      	cmp	r3, #64	; 0x40
 8002f18:	d006      	beq.n	8002f28 <UART_SetConfig+0x1b8>
 8002f1a:	e00b      	b.n	8002f34 <UART_SetConfig+0x1c4>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	77fb      	strb	r3, [r7, #31]
 8002f20:	e0cb      	b.n	80030ba <UART_SetConfig+0x34a>
 8002f22:	2302      	movs	r3, #2
 8002f24:	77fb      	strb	r3, [r7, #31]
 8002f26:	e0c8      	b.n	80030ba <UART_SetConfig+0x34a>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	77fb      	strb	r3, [r7, #31]
 8002f2c:	e0c5      	b.n	80030ba <UART_SetConfig+0x34a>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	77fb      	strb	r3, [r7, #31]
 8002f32:	e0c2      	b.n	80030ba <UART_SetConfig+0x34a>
 8002f34:	2310      	movs	r3, #16
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e0bf      	b.n	80030ba <UART_SetConfig+0x34a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a45      	ldr	r2, [pc, #276]	; (8003054 <UART_SetConfig+0x2e4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d125      	bne.n	8002f90 <UART_SetConfig+0x220>
 8002f44:	4b3f      	ldr	r3, [pc, #252]	; (8003044 <UART_SetConfig+0x2d4>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f52:	d017      	beq.n	8002f84 <UART_SetConfig+0x214>
 8002f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f58:	d817      	bhi.n	8002f8a <UART_SetConfig+0x21a>
 8002f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f5e:	d00b      	beq.n	8002f78 <UART_SetConfig+0x208>
 8002f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f64:	d811      	bhi.n	8002f8a <UART_SetConfig+0x21a>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <UART_SetConfig+0x202>
 8002f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6e:	d006      	beq.n	8002f7e <UART_SetConfig+0x20e>
 8002f70:	e00b      	b.n	8002f8a <UART_SetConfig+0x21a>
 8002f72:	2300      	movs	r3, #0
 8002f74:	77fb      	strb	r3, [r7, #31]
 8002f76:	e0a0      	b.n	80030ba <UART_SetConfig+0x34a>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	77fb      	strb	r3, [r7, #31]
 8002f7c:	e09d      	b.n	80030ba <UART_SetConfig+0x34a>
 8002f7e:	2304      	movs	r3, #4
 8002f80:	77fb      	strb	r3, [r7, #31]
 8002f82:	e09a      	b.n	80030ba <UART_SetConfig+0x34a>
 8002f84:	2308      	movs	r3, #8
 8002f86:	77fb      	strb	r3, [r7, #31]
 8002f88:	e097      	b.n	80030ba <UART_SetConfig+0x34a>
 8002f8a:	2310      	movs	r3, #16
 8002f8c:	77fb      	strb	r3, [r7, #31]
 8002f8e:	e094      	b.n	80030ba <UART_SetConfig+0x34a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a30      	ldr	r2, [pc, #192]	; (8003058 <UART_SetConfig+0x2e8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d125      	bne.n	8002fe6 <UART_SetConfig+0x276>
 8002f9a:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <UART_SetConfig+0x2d4>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fa8:	d017      	beq.n	8002fda <UART_SetConfig+0x26a>
 8002faa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fae:	d817      	bhi.n	8002fe0 <UART_SetConfig+0x270>
 8002fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb4:	d00b      	beq.n	8002fce <UART_SetConfig+0x25e>
 8002fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fba:	d811      	bhi.n	8002fe0 <UART_SetConfig+0x270>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <UART_SetConfig+0x258>
 8002fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc4:	d006      	beq.n	8002fd4 <UART_SetConfig+0x264>
 8002fc6:	e00b      	b.n	8002fe0 <UART_SetConfig+0x270>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e075      	b.n	80030ba <UART_SetConfig+0x34a>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	77fb      	strb	r3, [r7, #31]
 8002fd2:	e072      	b.n	80030ba <UART_SetConfig+0x34a>
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	e06f      	b.n	80030ba <UART_SetConfig+0x34a>
 8002fda:	2308      	movs	r3, #8
 8002fdc:	77fb      	strb	r3, [r7, #31]
 8002fde:	e06c      	b.n	80030ba <UART_SetConfig+0x34a>
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	e069      	b.n	80030ba <UART_SetConfig+0x34a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1c      	ldr	r2, [pc, #112]	; (800305c <UART_SetConfig+0x2ec>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d137      	bne.n	8003060 <UART_SetConfig+0x2f0>
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <UART_SetConfig+0x2d4>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ffa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ffe:	d017      	beq.n	8003030 <UART_SetConfig+0x2c0>
 8003000:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003004:	d817      	bhi.n	8003036 <UART_SetConfig+0x2c6>
 8003006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300a:	d00b      	beq.n	8003024 <UART_SetConfig+0x2b4>
 800300c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003010:	d811      	bhi.n	8003036 <UART_SetConfig+0x2c6>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <UART_SetConfig+0x2ae>
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301a:	d006      	beq.n	800302a <UART_SetConfig+0x2ba>
 800301c:	e00b      	b.n	8003036 <UART_SetConfig+0x2c6>
 800301e:	2300      	movs	r3, #0
 8003020:	77fb      	strb	r3, [r7, #31]
 8003022:	e04a      	b.n	80030ba <UART_SetConfig+0x34a>
 8003024:	2302      	movs	r3, #2
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	e047      	b.n	80030ba <UART_SetConfig+0x34a>
 800302a:	2304      	movs	r3, #4
 800302c:	77fb      	strb	r3, [r7, #31]
 800302e:	e044      	b.n	80030ba <UART_SetConfig+0x34a>
 8003030:	2308      	movs	r3, #8
 8003032:	77fb      	strb	r3, [r7, #31]
 8003034:	e041      	b.n	80030ba <UART_SetConfig+0x34a>
 8003036:	2310      	movs	r3, #16
 8003038:	77fb      	strb	r3, [r7, #31]
 800303a:	e03e      	b.n	80030ba <UART_SetConfig+0x34a>
 800303c:	efff69f3 	.word	0xefff69f3
 8003040:	40011000 	.word	0x40011000
 8003044:	40023800 	.word	0x40023800
 8003048:	40004400 	.word	0x40004400
 800304c:	40004800 	.word	0x40004800
 8003050:	40004c00 	.word	0x40004c00
 8003054:	40005000 	.word	0x40005000
 8003058:	40011400 	.word	0x40011400
 800305c:	40007800 	.word	0x40007800
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a94      	ldr	r2, [pc, #592]	; (80032b8 <UART_SetConfig+0x548>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d125      	bne.n	80030b6 <UART_SetConfig+0x346>
 800306a:	4b94      	ldr	r3, [pc, #592]	; (80032bc <UART_SetConfig+0x54c>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003074:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003078:	d017      	beq.n	80030aa <UART_SetConfig+0x33a>
 800307a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800307e:	d817      	bhi.n	80030b0 <UART_SetConfig+0x340>
 8003080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003084:	d00b      	beq.n	800309e <UART_SetConfig+0x32e>
 8003086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800308a:	d811      	bhi.n	80030b0 <UART_SetConfig+0x340>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <UART_SetConfig+0x328>
 8003090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003094:	d006      	beq.n	80030a4 <UART_SetConfig+0x334>
 8003096:	e00b      	b.n	80030b0 <UART_SetConfig+0x340>
 8003098:	2300      	movs	r3, #0
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e00d      	b.n	80030ba <UART_SetConfig+0x34a>
 800309e:	2302      	movs	r3, #2
 80030a0:	77fb      	strb	r3, [r7, #31]
 80030a2:	e00a      	b.n	80030ba <UART_SetConfig+0x34a>
 80030a4:	2304      	movs	r3, #4
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e007      	b.n	80030ba <UART_SetConfig+0x34a>
 80030aa:	2308      	movs	r3, #8
 80030ac:	77fb      	strb	r3, [r7, #31]
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x34a>
 80030b0:	2310      	movs	r3, #16
 80030b2:	77fb      	strb	r3, [r7, #31]
 80030b4:	e001      	b.n	80030ba <UART_SetConfig+0x34a>
 80030b6:	2310      	movs	r3, #16
 80030b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c2:	d17f      	bne.n	80031c4 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 80030c4:	7ffb      	ldrb	r3, [r7, #31]
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d85c      	bhi.n	8003184 <UART_SetConfig+0x414>
 80030ca:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <UART_SetConfig+0x360>)
 80030cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d0:	080030f5 	.word	0x080030f5
 80030d4:	08003115 	.word	0x08003115
 80030d8:	08003135 	.word	0x08003135
 80030dc:	08003185 	.word	0x08003185
 80030e0:	0800314d 	.word	0x0800314d
 80030e4:	08003185 	.word	0x08003185
 80030e8:	08003185 	.word	0x08003185
 80030ec:	08003185 	.word	0x08003185
 80030f0:	0800316d 	.word	0x0800316d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f4:	f7ff f984 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 80030f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	005a      	lsls	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	441a      	add	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	b29b      	uxth	r3, r3
 8003110:	61bb      	str	r3, [r7, #24]
        break;
 8003112:	e03a      	b.n	800318a <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003114:	f7ff f988 	bl	8002428 <HAL_RCC_GetPCLK2Freq>
 8003118:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	005a      	lsls	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	441a      	add	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	fbb2 f3f3 	udiv	r3, r2, r3
 800312e:	b29b      	uxth	r3, r3
 8003130:	61bb      	str	r3, [r7, #24]
        break;
 8003132:	e02a      	b.n	800318a <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	085a      	lsrs	r2, r3, #1
 800313a:	4b61      	ldr	r3, [pc, #388]	; (80032c0 <UART_SetConfig+0x550>)
 800313c:	4413      	add	r3, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6852      	ldr	r2, [r2, #4]
 8003142:	fbb3 f3f2 	udiv	r3, r3, r2
 8003146:	b29b      	uxth	r3, r3
 8003148:	61bb      	str	r3, [r7, #24]
        break;
 800314a:	e01e      	b.n	800318a <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800314c:	f7ff f896 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8003150:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	005a      	lsls	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	441a      	add	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	fbb2 f3f3 	udiv	r3, r2, r3
 8003166:	b29b      	uxth	r3, r3
 8003168:	61bb      	str	r3, [r7, #24]
        break;
 800316a:	e00e      	b.n	800318a <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	b29b      	uxth	r3, r3
 8003180:	61bb      	str	r3, [r7, #24]
        break;
 8003182:	e002      	b.n	800318a <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	75fb      	strb	r3, [r7, #23]
        break;
 8003188:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	2b0f      	cmp	r3, #15
 800318e:	d916      	bls.n	80031be <UART_SetConfig+0x44e>
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003196:	d212      	bcs.n	80031be <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	b29b      	uxth	r3, r3
 800319c:	f023 030f 	bic.w	r3, r3, #15
 80031a0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	085b      	lsrs	r3, r3, #1
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	897b      	ldrh	r3, [r7, #10]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	897a      	ldrh	r2, [r7, #10]
 80031ba:	60da      	str	r2, [r3, #12]
 80031bc:	e070      	b.n	80032a0 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
 80031c2:	e06d      	b.n	80032a0 <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 80031c4:	7ffb      	ldrb	r3, [r7, #31]
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d859      	bhi.n	800327e <UART_SetConfig+0x50e>
 80031ca:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <UART_SetConfig+0x460>)
 80031cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d0:	080031f5 	.word	0x080031f5
 80031d4:	08003213 	.word	0x08003213
 80031d8:	08003231 	.word	0x08003231
 80031dc:	0800327f 	.word	0x0800327f
 80031e0:	08003249 	.word	0x08003249
 80031e4:	0800327f 	.word	0x0800327f
 80031e8:	0800327f 	.word	0x0800327f
 80031ec:	0800327f 	.word	0x0800327f
 80031f0:	08003267 	.word	0x08003267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f4:	f7ff f904 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 80031f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	085a      	lsrs	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	441a      	add	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	b29b      	uxth	r3, r3
 800320e:	61bb      	str	r3, [r7, #24]
        break;
 8003210:	e038      	b.n	8003284 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003212:	f7ff f909 	bl	8002428 <HAL_RCC_GetPCLK2Freq>
 8003216:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	085a      	lsrs	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	441a      	add	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	b29b      	uxth	r3, r3
 800322c:	61bb      	str	r3, [r7, #24]
        break;
 800322e:	e029      	b.n	8003284 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	085a      	lsrs	r2, r3, #1
 8003236:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <UART_SetConfig+0x554>)
 8003238:	4413      	add	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6852      	ldr	r2, [r2, #4]
 800323e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003242:	b29b      	uxth	r3, r3
 8003244:	61bb      	str	r3, [r7, #24]
        break;
 8003246:	e01d      	b.n	8003284 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003248:	f7ff f818 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800324c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	085a      	lsrs	r2, r3, #1
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	441a      	add	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	b29b      	uxth	r3, r3
 8003262:	61bb      	str	r3, [r7, #24]
        break;
 8003264:	e00e      	b.n	8003284 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	b29b      	uxth	r3, r3
 800327a:	61bb      	str	r3, [r7, #24]
        break;
 800327c:	e002      	b.n	8003284 <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
        break;
 8003282:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b0f      	cmp	r3, #15
 8003288:	d908      	bls.n	800329c <UART_SetConfig+0x52c>
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003290:	d204      	bcs.n	800329c <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	e001      	b.n	80032a0 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3720      	adds	r7, #32
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40007c00 	.word	0x40007c00
 80032bc:	40023800 	.word	0x40023800
 80032c0:	01e84800 	.word	0x01e84800
 80032c4:	00f42400 	.word	0x00f42400

080032c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01a      	beq.n	80033de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033c6:	d10a      	bne.n	80033de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]
  }
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af02      	add	r7, sp, #8
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800341a:	f7fd fbd1 	bl	8000bc0 <HAL_GetTick>
 800341e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b08      	cmp	r3, #8
 800342c:	d10e      	bne.n	800344c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800342e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f82a 	bl	8003496 <UART_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e020      	b.n	800348e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b04      	cmp	r3, #4
 8003458:	d10e      	bne.n	8003478 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800345a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f814 	bl	8003496 <UART_WaitOnFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e00a      	b.n	800348e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	4613      	mov	r3, r2
 80034a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a6:	e05d      	b.n	8003564 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d059      	beq.n	8003564 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b0:	f7fd fb86 	bl	8000bc0 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d302      	bcc.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d11b      	bne.n	80034fe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0201 	bic.w	r2, r2, #1
 80034e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e042      	b.n	8003584 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d02b      	beq.n	8003564 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800351a:	d123      	bne.n	8003564 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003524:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003534:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0201 	bic.w	r2, r2, #1
 8003544:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e00f      	b.n	8003584 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4013      	ands	r3, r2
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	429a      	cmp	r2, r3
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	429a      	cmp	r2, r3
 8003580:	d092      	beq.n	80034a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <__libc_init_array>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	4d0d      	ldr	r5, [pc, #52]	; (80035c4 <__libc_init_array+0x38>)
 8003590:	4c0d      	ldr	r4, [pc, #52]	; (80035c8 <__libc_init_array+0x3c>)
 8003592:	1b64      	subs	r4, r4, r5
 8003594:	10a4      	asrs	r4, r4, #2
 8003596:	2600      	movs	r6, #0
 8003598:	42a6      	cmp	r6, r4
 800359a:	d109      	bne.n	80035b0 <__libc_init_array+0x24>
 800359c:	4d0b      	ldr	r5, [pc, #44]	; (80035cc <__libc_init_array+0x40>)
 800359e:	4c0c      	ldr	r4, [pc, #48]	; (80035d0 <__libc_init_array+0x44>)
 80035a0:	f000 f820 	bl	80035e4 <_init>
 80035a4:	1b64      	subs	r4, r4, r5
 80035a6:	10a4      	asrs	r4, r4, #2
 80035a8:	2600      	movs	r6, #0
 80035aa:	42a6      	cmp	r6, r4
 80035ac:	d105      	bne.n	80035ba <__libc_init_array+0x2e>
 80035ae:	bd70      	pop	{r4, r5, r6, pc}
 80035b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b4:	4798      	blx	r3
 80035b6:	3601      	adds	r6, #1
 80035b8:	e7ee      	b.n	8003598 <__libc_init_array+0xc>
 80035ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80035be:	4798      	blx	r3
 80035c0:	3601      	adds	r6, #1
 80035c2:	e7f2      	b.n	80035aa <__libc_init_array+0x1e>
 80035c4:	0800361c 	.word	0x0800361c
 80035c8:	0800361c 	.word	0x0800361c
 80035cc:	0800361c 	.word	0x0800361c
 80035d0:	08003620 	.word	0x08003620

080035d4 <memset>:
 80035d4:	4402      	add	r2, r0
 80035d6:	4603      	mov	r3, r0
 80035d8:	4293      	cmp	r3, r2
 80035da:	d100      	bne.n	80035de <memset+0xa>
 80035dc:	4770      	bx	lr
 80035de:	f803 1b01 	strb.w	r1, [r3], #1
 80035e2:	e7f9      	b.n	80035d8 <memset+0x4>

080035e4 <_init>:
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e6:	bf00      	nop
 80035e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ea:	bc08      	pop	{r3}
 80035ec:	469e      	mov	lr, r3
 80035ee:	4770      	bx	lr

080035f0 <_fini>:
 80035f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f2:	bf00      	nop
 80035f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f6:	bc08      	pop	{r3}
 80035f8:	469e      	mov	lr, r3
 80035fa:	4770      	bx	lr
