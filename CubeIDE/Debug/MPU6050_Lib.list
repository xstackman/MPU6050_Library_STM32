
MPU6050_Lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  080067b0  080067b0  000167b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bac  08006bac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006bac  08006bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bb4  08006bb4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bb8  08006bb8  00016bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  200001dc  08006d98  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08006d98  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5d7  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4a  00000000  00000000  0002d7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002f730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  000301b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a1c8  00000000  00000000  00030b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8e1  00000000  00000000  0005ad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3c8d  00000000  00000000  000675e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015b26e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a10  00000000  00000000  0015b2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08006798 	.word	0x08006798

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08006798 	.word	0x08006798

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <_ZN7MPU6050C1EP19__I2C_HandleTypeDefh>:

MPU6050::MPU6050 () {
	// TODO Auto-generated constructor stub

}
MPU6050::MPU6050 (I2C_HandleTypeDef *dev,uint8_t add)
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	4613      	mov	r3, r2
 80005f4:	71fb      	strb	r3, [r7, #7]
{
	_dev=dev;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	68ba      	ldr	r2, [r7, #8]
 80005fa:	601a      	str	r2, [r3, #0]
	_dev_address=add;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	79fa      	ldrb	r2, [r7, #7]
 8000600:	711a      	strb	r2, [r3, #4]

}
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	4618      	mov	r0, r3
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <_ZN7MPU605010isDetectedEv>:

int MPU6050:: isDetected()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]
	uint8_t tmp=0,reg=MPU6050_WHO_AM_I;
 8000618:	2300      	movs	r3, #0
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	2375      	movs	r3, #117	; 0x75
 800061e:	73bb      	strb	r3, [r7, #14]


	if(_dev==NULL)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d101      	bne.n	800062c <_ZN7MPU605010isDetectedEv+0x1c>
		return 0;
 8000628:	2300      	movs	r3, #0
 800062a:	e019      	b.n	8000660 <_ZN7MPU605010isDetectedEv+0x50>
	else
	{
		HAL_I2C_Master_Transmit(_dev,MPU6050_WRITE_ADD,&reg,1,10);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	f107 020e 	add.w	r2, r7, #14
 8000634:	230a      	movs	r3, #10
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2301      	movs	r3, #1
 800063a:	21d0      	movs	r1, #208	; 0xd0
 800063c:	f001 f84c 	bl	80016d8 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(_dev,MPU6050_READ_ADD,&tmp,1,10);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	f107 020f 	add.w	r2, r7, #15
 8000648:	230a      	movs	r3, #10
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2301      	movs	r3, #1
 800064e:	21d1      	movs	r1, #209	; 0xd1
 8000650:	f001 f936 	bl	80018c0 <HAL_I2C_Master_Receive>
		if(tmp==0x68)
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	2b68      	cmp	r3, #104	; 0x68
 8000658:	d101      	bne.n	800065e <_ZN7MPU605010isDetectedEv+0x4e>
			return 1;
 800065a:	2301      	movs	r3, #1
 800065c:	e000      	b.n	8000660 <_ZN7MPU605010isDetectedEv+0x50>
		else
			return 0;
 800065e:	2300      	movs	r3, #0
	}
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <_ZN7MPU605012setConfigRegEh>:

void  MPU6050::setConfigReg(uint8_t val)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af02      	add	r7, sp, #8
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]
	/* Bits: X | X | EXT_SYNC_SET[2:0] | DLPF_CFG[2:0] */
	uint8_t pm1=0x00;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]


	uint8_t buffer[2];
	buffer[0]=MPU6050_PWR_MGMT_1;
 8000678:	236b      	movs	r3, #107	; 0x6b
 800067a:	733b      	strb	r3, [r7, #12]
	buffer[1]=0x00;
 800067c:	2300      	movs	r3, #0
 800067e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_dev,MPU6050_WRITE_ADD,buffer,2,10);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	f107 020c 	add.w	r2, r7, #12
 8000688:	230a      	movs	r3, #10
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2302      	movs	r3, #2
 800068e:	21d0      	movs	r1, #208	; 0xd0
 8000690:	f001 f822 	bl	80016d8 <HAL_I2C_Master_Transmit>


	buffer[0]=MPU6050_CONFIG;
 8000694:	231a      	movs	r3, #26
 8000696:	733b      	strb	r3, [r7, #12]
	buffer[1]=val;
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_dev,MPU6050_WRITE_ADD,buffer,2,10);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	f107 020c 	add.w	r2, r7, #12
 80006a4:	230a      	movs	r3, #10
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2302      	movs	r3, #2
 80006aa:	21d0      	movs	r1, #208	; 0xd0
 80006ac:	f001 f814 	bl	80016d8 <HAL_I2C_Master_Transmit>

}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <_ZN7MPU605016setSampleRateDivEh>:

void  MPU6050::setSampleRateDiv(uint8_t val)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af02      	add	r7, sp, #8
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[2];
	buffer[0]=MPU6050_SMPLRT_DIV;
 80006c4:	2319      	movs	r3, #25
 80006c6:	733b      	strb	r3, [r7, #12]
	buffer[1]=val;
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_dev,MPU6050_WRITE_ADD,buffer,2,10);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6818      	ldr	r0, [r3, #0]
 80006d0:	f107 020c 	add.w	r2, r7, #12
 80006d4:	230a      	movs	r3, #10
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2302      	movs	r3, #2
 80006da:	21d0      	movs	r1, #208	; 0xd0
 80006dc:	f000 fffc 	bl	80016d8 <HAL_I2C_Master_Transmit>
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <_ZN7MPU605013setFifoEnableEh>:
void  MPU6050::setFifoEnable(uint8_t val)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af02      	add	r7, sp, #8
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[2];
	buffer[0]=MPU6050_FIFO_EN;
 80006f4:	2323      	movs	r3, #35	; 0x23
 80006f6:	733b      	strb	r3, [r7, #12]
	buffer[1]=val;
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_dev,MPU6050_WRITE_ADD,buffer,2,10);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	f107 020c 	add.w	r2, r7, #12
 8000704:	230a      	movs	r3, #10
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2302      	movs	r3, #2
 800070a:	21d0      	movs	r1, #208	; 0xd0
 800070c:	f000 ffe4 	bl	80016d8 <HAL_I2C_Master_Transmit>
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <_ZN7MPU605014getTemperatureEv>:
float MPU6050::getTemperature()
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af02      	add	r7, sp, #8
 800071e:	6078      	str	r0, [r7, #4]
	uint8_t temp_reg[2]={MPU6050_TEMP_OUT_H,MPU6050_TEMP_OUT_L};
 8000720:	f244 2341 	movw	r3, #16961	; 0x4241
 8000724:	823b      	strh	r3, [r7, #16]
	uint8_t temp_val[2];


	HAL_I2C_Master_Transmit(_dev,MPU6050_TEMP_OUT_H,&temp_reg[0],1,10);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	f107 0210 	add.w	r2, r7, #16
 800072e:	230a      	movs	r3, #10
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2301      	movs	r3, #1
 8000734:	2141      	movs	r1, #65	; 0x41
 8000736:	f000 ffcf 	bl	80016d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_dev,MPU6050_READ_ADD,&temp_val[0],1,10);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	f107 020c 	add.w	r2, r7, #12
 8000742:	230a      	movs	r3, #10
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2301      	movs	r3, #1
 8000748:	21d1      	movs	r1, #209	; 0xd1
 800074a:	f001 f8b9 	bl	80018c0 <HAL_I2C_Master_Receive>
	HAL_Delay(10);
 800074e:	200a      	movs	r0, #10
 8000750:	f000 fc48 	bl	8000fe4 <HAL_Delay>
	HAL_I2C_Master_Transmit(_dev,MPU6050_TEMP_OUT_H,&temp_reg[1],1,10);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	230a      	movs	r3, #10
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2301      	movs	r3, #1
 8000764:	2141      	movs	r1, #65	; 0x41
 8000766:	f000 ffb7 	bl	80016d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_dev,MPU6050_READ_ADD,&temp_val[1],1,10);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	230a      	movs	r3, #10
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2301      	movs	r3, #1
 800077a:	21d1      	movs	r1, #209	; 0xd1
 800077c:	f001 f8a0 	bl	80018c0 <HAL_I2C_Master_Receive>

	float temp= ((uint16_t)*temp_val/340.0)+36.53;
 8000780:	7b3b      	ldrb	r3, [r7, #12]
 8000782:	ee07 3a90 	vmov	s15, r3
 8000786:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800078a:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007b8 <_ZN7MPU605014getTemperatureEv+0xa0>
 800078e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000792:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c0 <_ZN7MPU605014getTemperatureEv+0xa8>
 8000796:	ee37 7b06 	vadd.f64	d7, d7, d6
 800079a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800079e:	edc7 7a05 	vstr	s15, [r7, #20]
	return temp;
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	ee07 3a90 	vmov	s15, r3

}
 80007a8:	eeb0 0a67 	vmov.f32	s0, s15
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	40754000 	.word	0x40754000
 80007c0:	0a3d70a4 	.word	0x0a3d70a4
 80007c4:	404243d7 	.word	0x404243d7

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f000 fbac 	bl	8000f2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f85b 	bl	800088c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d6:	f000 f97b 	bl	8000ad0 <_ZL12MX_GPIO_Initv>
  MX_I2C4_Init();
 80007da:	f000 f8f5 	bl	80009c8 <_ZL12MX_I2C4_Initv>
  MX_USART3_UART_Init();
 80007de:	f000 f941 	bl	8000a64 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  MPU6050 sensor=MPU6050(&hi2c4,0xD3);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	22d3      	movs	r2, #211	; 0xd3
 80007e8:	4924      	ldr	r1, [pc, #144]	; (800087c <main+0xb4>)
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fefc 	bl	80005e8 <_ZN7MPU6050C1EP19__I2C_HandleTypeDefh>
  if(sensor.isDetected())
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff0b 	bl	8000610 <_ZN7MPU605010isDetectedEv>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	bf14      	ite	ne
 8000800:	2301      	movne	r3, #1
 8000802:	2300      	moveq	r3, #0
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d004      	beq.n	8000814 <main+0x4c>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800080a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080e:	481c      	ldr	r0, [pc, #112]	; (8000880 <main+0xb8>)
 8000810:	f000 feb7 	bl	8001582 <HAL_GPIO_TogglePin>
  sensor.setConfigReg(0x00);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff24 	bl	8000668 <_ZN7MPU605012setConfigRegEh>
  sensor.setSampleRateDiv(0x00);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff46 	bl	80006b8 <_ZN7MPU605016setSampleRateDivEh>
  sensor.setFifoEnable(0x80);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff58 	bl	80006e8 <_ZN7MPU605013setFifoEnableEh>

  float temperature=0;
 8000838:	f04f 0300 	mov.w	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  temperature=sensor.getTemperature();
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff68 	bl	8000718 <_ZN7MPU605014getTemperatureEv>
 8000848:	ed87 0a07 	vstr	s0, [r7, #28]
	  snprintf ( buffer_uart,20, "%f\n",temperature );
 800084c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000850:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000854:	463b      	mov	r3, r7
 8000856:	ed8d 7b00 	vstr	d7, [sp]
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <main+0xbc>)
 800085c:	2114      	movs	r1, #20
 800085e:	4618      	mov	r0, r3
 8000860:	f003 fdc4 	bl	80043ec <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *)buffer_uart, 20, 10);
 8000864:	4639      	mov	r1, r7
 8000866:	230a      	movs	r3, #10
 8000868:	2214      	movs	r2, #20
 800086a:	4807      	ldr	r0, [pc, #28]	; (8000888 <main+0xc0>)
 800086c:	f002 fcaa 	bl	80031c4 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000870:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000874:	f000 fbb6 	bl	8000fe4 <HAL_Delay>
	  temperature=sensor.getTemperature();
 8000878:	e7e1      	b.n	800083e <main+0x76>
 800087a:	bf00      	nop
 800087c:	200001f8 	.word	0x200001f8
 8000880:	40020400 	.word	0x40020400
 8000884:	080067b0 	.word	0x080067b0
 8000888:	20000244 	.word	0x20000244

0800088c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b0b8      	sub	sp, #224	; 0xe0
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000896:	2234      	movs	r2, #52	; 0x34
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f003 f95c 	bl	8003b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	2290      	movs	r2, #144	; 0x90
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f003 f94d 	bl	8003b58 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b3f      	ldr	r3, [pc, #252]	; (80009bc <_Z18SystemClock_Configv+0x130>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a3e      	ldr	r2, [pc, #248]	; (80009bc <_Z18SystemClock_Configv+0x130>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ca:	4b3c      	ldr	r3, [pc, #240]	; (80009bc <_Z18SystemClock_Configv+0x130>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008d6:	4b3a      	ldr	r3, [pc, #232]	; (80009c0 <_Z18SystemClock_Configv+0x134>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008de:	4a38      	ldr	r2, [pc, #224]	; (80009c0 <_Z18SystemClock_Configv+0x134>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <_Z18SystemClock_Configv+0x134>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f2:	2302      	movs	r3, #2
 80008f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f8:	2301      	movs	r3, #1
 80008fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fe:	2310      	movs	r3, #16
 8000900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000904:	2302      	movs	r3, #2
 8000906:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800090a:	2300      	movs	r3, #0
 800090c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000910:	2310      	movs	r3, #16
 8000912:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000916:	23c8      	movs	r3, #200	; 0xc8
 8000918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800091c:	2302      	movs	r3, #2
 800091e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000922:	2302      	movs	r3, #2
 8000924:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fb35 	bl	8001f9c <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	bf14      	ite	ne
 8000938:	2301      	movne	r3, #1
 800093a:	2300      	moveq	r3, #0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000942:	f000 f911 	bl	8000b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	230f      	movs	r3, #15
 8000948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094c:	2302      	movs	r3, #2
 800094e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000958:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800095c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000968:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800096c:	2103      	movs	r1, #3
 800096e:	4618      	mov	r0, r3
 8000970:	f001 fdc2 	bl	80024f8 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	bf14      	ite	ne
 800097a:	2301      	movne	r3, #1
 800097c:	2300      	moveq	r3, #0
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8000984:	f000 f8f0 	bl	8000b68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C4;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <_Z18SystemClock_Configv+0x138>)
 800098a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800098c:	2300      	movs	r3, #0
 800098e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000990:	2300      	movs	r3, #0
 8000992:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000994:	f107 0308 	add.w	r3, r7, #8
 8000998:	4618      	mov	r0, r3
 800099a:	f001 ff83 	bl	80028a4 <HAL_RCCEx_PeriphCLKConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	bf14      	ite	ne
 80009a4:	2301      	movne	r3, #1
 80009a6:	2300      	moveq	r3, #0
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <_Z18SystemClock_Configv+0x126>
  {
    Error_Handler();
 80009ae:	f000 f8db 	bl	8000b68 <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	37e0      	adds	r7, #224	; 0xe0
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40007000 	.word	0x40007000
 80009c4:	00020100 	.word	0x00020100

080009c8 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <_ZL12MX_I2C4_Initv+0x90>)
 80009ce:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <_ZL12MX_I2C4_Initv+0x94>)
 80009d0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00200B2B;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <_ZL12MX_I2C4_Initv+0x90>)
 80009d4:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <_ZL12MX_I2C4_Initv+0x98>)
 80009d6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <_ZL12MX_I2C4_Initv+0x90>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <_ZL12MX_I2C4_Initv+0x90>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e4:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <_ZL12MX_I2C4_Initv+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <_ZL12MX_I2C4_Initv+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <_ZL12MX_I2C4_Initv+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <_ZL12MX_I2C4_Initv+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <_ZL12MX_I2C4_Initv+0x90>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a02:	4815      	ldr	r0, [pc, #84]	; (8000a58 <_ZL12MX_I2C4_Initv+0x90>)
 8000a04:	f000 fdd8 	bl	80015b8 <HAL_I2C_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf14      	ite	ne
 8000a0e:	2301      	movne	r3, #1
 8000a10:	2300      	moveq	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8000a18:	f000 f8a6 	bl	8000b68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <_ZL12MX_I2C4_Initv+0x90>)
 8000a20:	f001 fa24 	bl	8001e6c <HAL_I2CEx_ConfigAnalogFilter>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	bf14      	ite	ne
 8000a2a:	2301      	movne	r3, #1
 8000a2c:	2300      	moveq	r3, #0
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8000a34:	f000 f898 	bl	8000b68 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4807      	ldr	r0, [pc, #28]	; (8000a58 <_ZL12MX_I2C4_Initv+0x90>)
 8000a3c:	f001 fa61 	bl	8001f02 <HAL_I2CEx_ConfigDigitalFilter>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bf14      	ite	ne
 8000a46:	2301      	movne	r3, #1
 8000a48:	2300      	moveq	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8000a50:	f000 f88a 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200001f8 	.word	0x200001f8
 8000a5c:	40006000 	.word	0x40006000
 8000a60:	00200b2b 	.word	0x00200b2b

08000a64 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000a6a:	4a18      	ldr	r2, [pc, #96]	; (8000acc <_ZL19MX_USART3_UART_Initv+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000aac:	f002 fb20 	bl	80030f0 <HAL_MultiProcessor_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	bf14      	ite	ne
 8000ab6:	2301      	movne	r3, #1
 8000ab8:	2300      	moveq	r3, #0
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <_ZL19MX_USART3_UART_Initv+0x60>
  {
    Error_Handler();
 8000ac0:	f000 f852 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000244 	.word	0x20000244
 8000acc:	40004800 	.word	0x40004800

08000ad0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <_ZL12MX_GPIO_Initv+0x90>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <_ZL12MX_GPIO_Initv+0x90>)
 8000aec:	f043 0320 	orr.w	r3, r3, #32
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <_ZL12MX_GPIO_Initv+0x90>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0320 	and.w	r3, r3, #32
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <_ZL12MX_GPIO_Initv+0x90>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <_ZL12MX_GPIO_Initv+0x90>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <_ZL12MX_GPIO_Initv+0x90>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <_ZL12MX_GPIO_Initv+0x90>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <_ZL12MX_GPIO_Initv+0x90>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <_ZL12MX_GPIO_Initv+0x90>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <_ZL12MX_GPIO_Initv+0x94>)
 8000b36:	f000 fd0b 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	4619      	mov	r1, r3
 8000b52:	4804      	ldr	r0, [pc, #16]	; (8000b64 <_ZL12MX_GPIO_Initv+0x94>)
 8000b54:	f000 fb50 	bl	80011f8 <HAL_GPIO_Init>

}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020400 	.word	0x40020400

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x44>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C4)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_I2C_MspInit+0x7c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d128      	bne.n	8000c30 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <HAL_I2C_MspInit+0x80>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <HAL_I2C_MspInit+0x80>)
 8000be4:	f043 0320 	orr.w	r3, r3, #32
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_I2C_MspInit+0x80>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0320 	and.w	r3, r3, #32
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000bf6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfc:	2312      	movs	r3, #18
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <HAL_I2C_MspInit+0x84>)
 8000c14:	f000 faf0 	bl	80011f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <HAL_I2C_MspInit+0x80>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_I2C_MspInit+0x80>)
 8000c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c22:	6413      	str	r3, [r2, #64]	; 0x40
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_I2C_MspInit+0x80>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	; 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40006000 	.word	0x40006000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40021400 	.word	0x40021400

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <HAL_UART_MspInit+0x7c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d128      	bne.n	8000cb8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9c:	2312      	movs	r3, #18
 8000c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <HAL_UART_MspInit+0x84>)
 8000cb4:	f000 faa0 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	; 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40004800 	.word	0x40004800
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020c00 	.word	0x40020c00

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d18:	f000 f944 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	return 1;
 8000d24:	2301      	movs	r3, #1
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <_kill>:

int _kill(int pid, int sig)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d3a:	f002 fee3 	bl	8003b04 <__errno>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2216      	movs	r2, #22
 8000d42:	601a      	str	r2, [r3, #0]
	return -1;
 8000d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_exit>:

void _exit (int status)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ffe7 	bl	8000d30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d62:	e7fe      	b.n	8000d62 <_exit+0x12>

08000d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	e00a      	b.n	8000d8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d76:	f3af 8000 	nop.w
 8000d7a:	4601      	mov	r1, r0
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	60ba      	str	r2, [r7, #8]
 8000d82:	b2ca      	uxtb	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dbf0      	blt.n	8000d76 <_read+0x12>
	}

return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	e009      	b.n	8000dc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	60ba      	str	r2, [r7, #8]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dbf1      	blt.n	8000db0 <_write+0x12>
	}
	return len;
 8000dcc:	687b      	ldr	r3, [r7, #4]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <_close>:

int _close(int file)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
	return -1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dfe:	605a      	str	r2, [r3, #4]
	return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <_isatty>:

int _isatty(int file)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
	return 1;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d207      	bcs.n	8000e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e70:	f002 fe48 	bl	8003b04 <__errno>
 8000e74:	4603      	mov	r3, r0
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20080000 	.word	0x20080000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	200002c4 	.word	0x200002c4
 8000ea8:	200002e8 	.word	0x200002e8

08000eac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <SystemInit+0x28>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <SystemInit+0x28>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SystemInit+0x28>)
 8000ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000edc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ede:	e003      	b.n	8000ee8 <LoopCopyDataInit>

08000ee0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ee2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ee4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ee6:	3104      	adds	r1, #4

08000ee8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ee8:	480b      	ldr	r0, [pc, #44]	; (8000f18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000eec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ef0:	d3f6      	bcc.n	8000ee0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ef4:	e002      	b.n	8000efc <LoopFillZerobss>

08000ef6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ef6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ef8:	f842 3b04 	str.w	r3, [r2], #4

08000efc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000efe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f00:	d3f9      	bcc.n	8000ef6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f02:	f7ff ffd3 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f002 fe03 	bl	8003b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fc5d 	bl	80007c8 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000f14:	08006bbc 	.word	0x08006bbc
  ldr  r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f1c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8000f20:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8000f24:	200002e4 	.word	0x200002e4

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>

08000f2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f000 f92e 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f000 f805 	bl	8000f44 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f3a:	f7ff fe1b 	bl	8000b74 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x54>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x58>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f93b 	bl	80011de <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00e      	b.n	8000f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d80a      	bhi.n	8000f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f000 f911 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_InitTick+0x5c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	200002d0 	.word	0x200002d0

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	200002d0 	.word	0x200002d0

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff ffee 	bl	8000fcc <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_Delay+0x44>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800100a:	bf00      	nop
 800100c:	f7ff ffde 	bl	8000fcc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <__NVIC_SetPriorityGrouping+0x40>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	4313      	orrs	r3, r2
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x40>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	05fa0000 	.word	0x05fa0000

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff47 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff5c 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff8e 	bl	80010e4 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5d 	bl	8001090 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffb0 	bl	800114c <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	e175      	b.n	8001504 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	429a      	cmp	r2, r3
 8001232:	f040 8164 	bne.w	80014fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d00b      	beq.n	8001256 <HAL_GPIO_Init+0x5e>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800124a:	2b11      	cmp	r3, #17
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b12      	cmp	r3, #18
 8001254:	d130      	bne.n	80012b8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 0201 	and.w	r2, r3, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x100>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b12      	cmp	r3, #18
 80012f6:	d123      	bne.n	8001340 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	08da      	lsrs	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3208      	adds	r2, #8
 800133a:	69b9      	ldr	r1, [r7, #24]
 800133c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0203 	and.w	r2, r3, #3
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80be 	beq.w	80014fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b66      	ldr	r3, [pc, #408]	; (800151c <HAL_GPIO_Init+0x324>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a65      	ldr	r2, [pc, #404]	; (800151c <HAL_GPIO_Init+0x324>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b63      	ldr	r3, [pc, #396]	; (800151c <HAL_GPIO_Init+0x324>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800139a:	4a61      	ldr	r2, [pc, #388]	; (8001520 <HAL_GPIO_Init+0x328>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a58      	ldr	r2, [pc, #352]	; (8001524 <HAL_GPIO_Init+0x32c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d037      	beq.n	8001436 <HAL_GPIO_Init+0x23e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a57      	ldr	r2, [pc, #348]	; (8001528 <HAL_GPIO_Init+0x330>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d031      	beq.n	8001432 <HAL_GPIO_Init+0x23a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a56      	ldr	r2, [pc, #344]	; (800152c <HAL_GPIO_Init+0x334>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d02b      	beq.n	800142e <HAL_GPIO_Init+0x236>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a55      	ldr	r2, [pc, #340]	; (8001530 <HAL_GPIO_Init+0x338>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d025      	beq.n	800142a <HAL_GPIO_Init+0x232>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a54      	ldr	r2, [pc, #336]	; (8001534 <HAL_GPIO_Init+0x33c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01f      	beq.n	8001426 <HAL_GPIO_Init+0x22e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a53      	ldr	r2, [pc, #332]	; (8001538 <HAL_GPIO_Init+0x340>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d019      	beq.n	8001422 <HAL_GPIO_Init+0x22a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a52      	ldr	r2, [pc, #328]	; (800153c <HAL_GPIO_Init+0x344>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0x226>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a51      	ldr	r2, [pc, #324]	; (8001540 <HAL_GPIO_Init+0x348>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00d      	beq.n	800141a <HAL_GPIO_Init+0x222>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a50      	ldr	r2, [pc, #320]	; (8001544 <HAL_GPIO_Init+0x34c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_Init+0x21e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4f      	ldr	r2, [pc, #316]	; (8001548 <HAL_GPIO_Init+0x350>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_GPIO_Init+0x21a>
 800140e:	2309      	movs	r3, #9
 8001410:	e012      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001412:	230a      	movs	r3, #10
 8001414:	e010      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001416:	2308      	movs	r3, #8
 8001418:	e00e      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800141a:	2307      	movs	r3, #7
 800141c:	e00c      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800141e:	2306      	movs	r3, #6
 8001420:	e00a      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001422:	2305      	movs	r3, #5
 8001424:	e008      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001426:	2304      	movs	r3, #4
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001436:	2300      	movs	r3, #0
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001448:	4935      	ldr	r1, [pc, #212]	; (8001520 <HAL_GPIO_Init+0x328>)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_GPIO_Init+0x354>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800147a:	4a34      	ldr	r2, [pc, #208]	; (800154c <HAL_GPIO_Init+0x354>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <HAL_GPIO_Init+0x354>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a4:	4a29      	ldr	r2, [pc, #164]	; (800154c <HAL_GPIO_Init+0x354>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014aa:	4b28      	ldr	r3, [pc, #160]	; (800154c <HAL_GPIO_Init+0x354>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ce:	4a1f      	ldr	r2, [pc, #124]	; (800154c <HAL_GPIO_Init+0x354>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_GPIO_Init+0x354>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <HAL_GPIO_Init+0x354>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	f67f ae86 	bls.w	8001218 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40013800 	.word	0x40013800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020400 	.word	0x40020400
 800152c:	40020800 	.word	0x40020800
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40021400 	.word	0x40021400
 800153c:	40021800 	.word	0x40021800
 8001540:	40021c00 	.word	0x40021c00
 8001544:	40022000 	.word	0x40022000
 8001548:	40022400 	.word	0x40022400
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	041a      	lsls	r2, r3, #16
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80015a2:	e002      	b.n	80015aa <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	619a      	str	r2, [r3, #24]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e07f      	b.n	80016ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d106      	bne.n	80015e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff faec 	bl	8000bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2224      	movs	r2, #36	; 0x24
 80015e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001608:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001618:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d107      	bne.n	8001632 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	e006      	b.n	8001640 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800163e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d104      	bne.n	8001652 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001650:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_I2C_Init+0x11c>)
 800165e:	430b      	orrs	r3, r1
 8001660:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001670:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	ea42 0103 	orr.w	r1, r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	021a      	lsls	r2, r3, #8
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69d9      	ldr	r1, [r3, #28]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1a      	ldr	r2, [r3, #32]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2220      	movs	r2, #32
 80016b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	02008000 	.word	0x02008000

080016d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af02      	add	r7, sp, #8
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	461a      	mov	r2, r3
 80016e4:	460b      	mov	r3, r1
 80016e6:	817b      	strh	r3, [r7, #10]
 80016e8:	4613      	mov	r3, r2
 80016ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b20      	cmp	r3, #32
 80016f6:	f040 80da 	bne.w	80018ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_I2C_Master_Transmit+0x30>
 8001704:	2302      	movs	r3, #2
 8001706:	e0d3      	b.n	80018b0 <HAL_I2C_Master_Transmit+0x1d8>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001710:	f7ff fc5c 	bl	8000fcc <HAL_GetTick>
 8001714:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2319      	movs	r3, #25
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 f9e6 	bl	8001af4 <I2C_WaitOnFlagUntilTimeout>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e0be      	b.n	80018b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2221      	movs	r2, #33	; 0x21
 8001736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2210      	movs	r2, #16
 800173e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	893a      	ldrh	r2, [r7, #8]
 8001752:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175e:	b29b      	uxth	r3, r3
 8001760:	2bff      	cmp	r3, #255	; 0xff
 8001762:	d90e      	bls.n	8001782 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	22ff      	movs	r2, #255	; 0xff
 8001768:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176e:	b2da      	uxtb	r2, r3
 8001770:	8979      	ldrh	r1, [r7, #10]
 8001772:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 fb48 	bl	8001e10 <I2C_TransferConfig>
 8001780:	e06c      	b.n	800185c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001790:	b2da      	uxtb	r2, r3
 8001792:	8979      	ldrh	r1, [r7, #10]
 8001794:	4b48      	ldr	r3, [pc, #288]	; (80018b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 fb37 	bl	8001e10 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80017a2:	e05b      	b.n	800185c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	6a39      	ldr	r1, [r7, #32]
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 f9e3 	bl	8001b74 <I2C_WaitOnTXISFlagUntilTimeout>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e07b      	b.n	80018b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	3b01      	subs	r3, #1
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d034      	beq.n	800185c <HAL_I2C_Master_Transmit+0x184>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d130      	bne.n	800185c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	2200      	movs	r2, #0
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 f975 	bl	8001af4 <I2C_WaitOnFlagUntilTimeout>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e04d      	b.n	80018b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001818:	b29b      	uxth	r3, r3
 800181a:	2bff      	cmp	r3, #255	; 0xff
 800181c:	d90e      	bls.n	800183c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	22ff      	movs	r2, #255	; 0xff
 8001822:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001828:	b2da      	uxtb	r2, r3
 800182a:	8979      	ldrh	r1, [r7, #10]
 800182c:	2300      	movs	r3, #0
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 faeb 	bl	8001e10 <I2C_TransferConfig>
 800183a:	e00f      	b.n	800185c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001840:	b29a      	uxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184a:	b2da      	uxtb	r2, r3
 800184c:	8979      	ldrh	r1, [r7, #10]
 800184e:	2300      	movs	r3, #0
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 fada 	bl	8001e10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001860:	b29b      	uxth	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d19e      	bne.n	80017a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	6a39      	ldr	r1, [r7, #32]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 f9c2 	bl	8001bf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e01a      	b.n	80018b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2220      	movs	r2, #32
 8001880:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6859      	ldr	r1, [r3, #4]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_I2C_Master_Transmit+0x1e4>)
 800188e:	400b      	ands	r3, r1
 8001890:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2220      	movs	r2, #32
 8001896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e000      	b.n	80018b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80018ae:	2302      	movs	r3, #2
  }
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	80002000 	.word	0x80002000
 80018bc:	fe00e800 	.word	0xfe00e800

080018c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	461a      	mov	r2, r3
 80018cc:	460b      	mov	r3, r1
 80018ce:	817b      	strh	r3, [r7, #10]
 80018d0:	4613      	mov	r3, r2
 80018d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b20      	cmp	r3, #32
 80018de:	f040 80db 	bne.w	8001a98 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_I2C_Master_Receive+0x30>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e0d4      	b.n	8001a9a <HAL_I2C_Master_Receive+0x1da>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018f8:	f7ff fb68 	bl	8000fcc <HAL_GetTick>
 80018fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2319      	movs	r3, #25
 8001904:	2201      	movs	r2, #1
 8001906:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f8f2 	bl	8001af4 <I2C_WaitOnFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0bf      	b.n	8001a9a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2222      	movs	r2, #34	; 0x22
 800191e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2210      	movs	r2, #16
 8001926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	893a      	ldrh	r2, [r7, #8]
 800193a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001946:	b29b      	uxth	r3, r3
 8001948:	2bff      	cmp	r3, #255	; 0xff
 800194a:	d90e      	bls.n	800196a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	22ff      	movs	r2, #255	; 0xff
 8001950:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001956:	b2da      	uxtb	r2, r3
 8001958:	8979      	ldrh	r1, [r7, #10]
 800195a:	4b52      	ldr	r3, [pc, #328]	; (8001aa4 <HAL_I2C_Master_Receive+0x1e4>)
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 fa54 	bl	8001e10 <I2C_TransferConfig>
 8001968:	e06d      	b.n	8001a46 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001978:	b2da      	uxtb	r2, r3
 800197a:	8979      	ldrh	r1, [r7, #10]
 800197c:	4b49      	ldr	r3, [pc, #292]	; (8001aa4 <HAL_I2C_Master_Receive+0x1e4>)
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 fa43 	bl	8001e10 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800198a:	e05c      	b.n	8001a46 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	6a39      	ldr	r1, [r7, #32]
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 f96b 	bl	8001c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e07c      	b.n	8001a9a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d034      	beq.n	8001a46 <HAL_I2C_Master_Receive+0x186>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d130      	bne.n	8001a46 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	2200      	movs	r2, #0
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f880 	bl	8001af4 <I2C_WaitOnFlagUntilTimeout>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e04d      	b.n	8001a9a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2bff      	cmp	r3, #255	; 0xff
 8001a06:	d90e      	bls.n	8001a26 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	22ff      	movs	r2, #255	; 0xff
 8001a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	8979      	ldrh	r1, [r7, #10]
 8001a16:	2300      	movs	r3, #0
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 f9f6 	bl	8001e10 <I2C_TransferConfig>
 8001a24:	e00f      	b.n	8001a46 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	8979      	ldrh	r1, [r7, #10]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f000 f9e5 	bl	8001e10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d19d      	bne.n	800198c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	6a39      	ldr	r1, [r7, #32]
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f8cd 	bl	8001bf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e01a      	b.n	8001a9a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6859      	ldr	r1, [r3, #4]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_I2C_Master_Receive+0x1e8>)
 8001a78:	400b      	ands	r3, r1
 8001a7a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e000      	b.n	8001a9a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001a98:	2302      	movs	r3, #2
  }
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	80002400 	.word	0x80002400
 8001aa8:	fe00e800 	.word	0xfe00e800

08001aac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d103      	bne.n	8001aca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d007      	beq.n	8001ae8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	619a      	str	r2, [r3, #24]
  }
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	4613      	mov	r3, r2
 8001b02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b04:	e022      	b.n	8001b4c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d01e      	beq.n	8001b4c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b0e:	f7ff fa5d 	bl	8000fcc <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d302      	bcc.n	8001b24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d113      	bne.n	8001b4c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	f043 0220 	orr.w	r2, r3, #32
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e00f      	b.n	8001b6c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	4013      	ands	r3, r2
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	bf0c      	ite	eq
 8001b5c:	2301      	moveq	r3, #1
 8001b5e:	2300      	movne	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d0cd      	beq.n	8001b06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b80:	e02c      	b.n	8001bdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 f8dc 	bl	8001d44 <I2C_IsAcknowledgeFailed>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e02a      	b.n	8001bec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d01e      	beq.n	8001bdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b9e:	f7ff fa15 	bl	8000fcc <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d302      	bcc.n	8001bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d113      	bne.n	8001bdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb8:	f043 0220 	orr.w	r2, r3, #32
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e007      	b.n	8001bec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d1cb      	bne.n	8001b82 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c00:	e028      	b.n	8001c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f89c 	bl	8001d44 <I2C_IsAcknowledgeFailed>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e026      	b.n	8001c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c16:	f7ff f9d9 	bl	8000fcc <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d302      	bcc.n	8001c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d113      	bne.n	8001c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c30:	f043 0220 	orr.w	r2, r3, #32
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e007      	b.n	8001c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f003 0320 	and.w	r3, r3, #32
 8001c5e:	2b20      	cmp	r3, #32
 8001c60:	d1cf      	bne.n	8001c02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c78:	e055      	b.n	8001d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f860 	bl	8001d44 <I2C_IsAcknowledgeFailed>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e053      	b.n	8001d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d129      	bne.n	8001cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d105      	bne.n	8001cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e03f      	b.n	8001d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001cca:	400b      	ands	r3, r1
 8001ccc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e022      	b.n	8001d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf0:	f7ff f96c 	bl	8000fcc <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d302      	bcc.n	8001d06 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10f      	bne.n	8001d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f043 0220 	orr.w	r2, r3, #32
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e007      	b.n	8001d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d1a2      	bne.n	8001c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	fe00e800 	.word	0xfe00e800

08001d44 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d151      	bne.n	8001e02 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d5e:	e022      	b.n	8001da6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d66:	d01e      	beq.n	8001da6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d68:	f7ff f930 	bl	8000fcc <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d302      	bcc.n	8001d7e <I2C_IsAcknowledgeFailed+0x3a>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d113      	bne.n	8001da6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f043 0220 	orr.w	r2, r3, #32
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e02e      	b.n	8001e04 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0320 	and.w	r3, r3, #32
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d1d5      	bne.n	8001d60 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2210      	movs	r2, #16
 8001dba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f7ff fe71 	bl	8001aac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <I2C_IsAcknowledgeFailed+0xc8>)
 8001dd6:	400b      	ands	r3, r1
 8001dd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f043 0204 	orr.w	r2, r3, #4
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2220      	movs	r2, #32
 8001dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	fe00e800 	.word	0xfe00e800

08001e10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	817b      	strh	r3, [r7, #10]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	0d5b      	lsrs	r3, r3, #21
 8001e2c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <I2C_TransferConfig+0x58>)
 8001e32:	430b      	orrs	r3, r1
 8001e34:	43db      	mvns	r3, r3
 8001e36:	ea02 0103 	and.w	r1, r2, r3
 8001e3a:	897b      	ldrh	r3, [r7, #10]
 8001e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e40:	7a7b      	ldrb	r3, [r7, #9]
 8001e42:	041b      	lsls	r3, r3, #16
 8001e44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	03ff63ff 	.word	0x03ff63ff

08001e6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	d138      	bne.n	8001ef4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e032      	b.n	8001ef6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2224      	movs	r2, #36	; 0x24
 8001e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ebe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6819      	ldr	r1, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e000      	b.n	8001ef6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ef4:	2302      	movs	r3, #2
  }
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b085      	sub	sp, #20
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b20      	cmp	r3, #32
 8001f16:	d139      	bne.n	8001f8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e033      	b.n	8001f8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2224      	movs	r2, #36	; 0x24
 8001f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0201 	bic.w	r2, r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e000      	b.n	8001f8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f8c:	2302      	movs	r3, #2
  }
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e29b      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8087 	beq.w	80020ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc0:	4b96      	ldr	r3, [pc, #600]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d00c      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fcc:	4b93      	ldr	r3, [pc, #588]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d112      	bne.n	8001ffe <HAL_RCC_OscConfig+0x62>
 8001fd8:	4b90      	ldr	r3, [pc, #576]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe4:	d10b      	bne.n	8001ffe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe6:	4b8d      	ldr	r3, [pc, #564]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d06c      	beq.n	80020cc <HAL_RCC_OscConfig+0x130>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d168      	bne.n	80020cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e275      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x7a>
 8002008:	4b84      	ldr	r3, [pc, #528]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a83      	ldr	r2, [pc, #524]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800200e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	e02e      	b.n	8002074 <HAL_RCC_OscConfig+0xd8>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x9c>
 800201e:	4b7f      	ldr	r3, [pc, #508]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a7e      	ldr	r2, [pc, #504]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b7c      	ldr	r3, [pc, #496]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7b      	ldr	r2, [pc, #492]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e01d      	b.n	8002074 <HAL_RCC_OscConfig+0xd8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0xc0>
 8002042:	4b76      	ldr	r3, [pc, #472]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a75      	ldr	r2, [pc, #468]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b73      	ldr	r3, [pc, #460]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a72      	ldr	r2, [pc, #456]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e00b      	b.n	8002074 <HAL_RCC_OscConfig+0xd8>
 800205c:	4b6f      	ldr	r3, [pc, #444]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a6e      	ldr	r2, [pc, #440]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b6c      	ldr	r3, [pc, #432]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a6b      	ldr	r2, [pc, #428]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800206e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d013      	beq.n	80020a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7fe ffa6 	bl	8000fcc <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002084:	f7fe ffa2 	bl	8000fcc <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e229      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b61      	ldr	r3, [pc, #388]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0xe8>
 80020a2:	e014      	b.n	80020ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7fe ff92 	bl	8000fcc <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7fe ff8e 	bl	8000fcc <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e215      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020be:	4b57      	ldr	r3, [pc, #348]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x110>
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d069      	beq.n	80021ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020da:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00b      	beq.n	80020fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e6:	4b4d      	ldr	r3, [pc, #308]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d11c      	bne.n	800212c <HAL_RCC_OscConfig+0x190>
 80020f2:	4b4a      	ldr	r3, [pc, #296]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d116      	bne.n	800212c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_RCC_OscConfig+0x17a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d001      	beq.n	8002116 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e1e9      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	493d      	ldr	r1, [pc, #244]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	e040      	b.n	80021ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d023      	beq.n	800217c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002134:	4b39      	ldr	r3, [pc, #228]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a38      	ldr	r2, [pc, #224]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe ff44 	bl	8000fcc <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7fe ff40 	bl	8000fcc <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1c7      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215a:	4b30      	ldr	r3, [pc, #192]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4b2d      	ldr	r3, [pc, #180]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4929      	ldr	r1, [pc, #164]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
 800217a:	e018      	b.n	80021ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a26      	ldr	r2, [pc, #152]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe ff20 	bl	8000fcc <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002190:	f7fe ff1c 	bl	8000fcc <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e1a3      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d038      	beq.n	800222c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d019      	beq.n	80021f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80021c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c6:	4a15      	ldr	r2, [pc, #84]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7fe fefd 	bl	8000fcc <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d6:	f7fe fef9 	bl	8000fcc <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e180      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80021ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x23a>
 80021f4:	e01a      	b.n	800222c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80021f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7fe fee3 	bl	8000fcc <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220a:	f7fe fedf 	bl	8000fcc <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d903      	bls.n	8002220 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e166      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
 800221c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	4b92      	ldr	r3, [pc, #584]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ee      	bne.n	800220a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a4 	beq.w	8002382 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223a:	4b8c      	ldr	r3, [pc, #560]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10d      	bne.n	8002262 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	4b89      	ldr	r3, [pc, #548]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	4a88      	ldr	r2, [pc, #544]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
 8002252:	4b86      	ldr	r3, [pc, #536]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225e:	2301      	movs	r3, #1
 8002260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002262:	4b83      	ldr	r3, [pc, #524]	; (8002470 <HAL_RCC_OscConfig+0x4d4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d118      	bne.n	80022a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800226e:	4b80      	ldr	r3, [pc, #512]	; (8002470 <HAL_RCC_OscConfig+0x4d4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a7f      	ldr	r2, [pc, #508]	; (8002470 <HAL_RCC_OscConfig+0x4d4>)
 8002274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227a:	f7fe fea7 	bl	8000fcc <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002282:	f7fe fea3 	bl	8000fcc <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b64      	cmp	r3, #100	; 0x64
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e12a      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002294:	4b76      	ldr	r3, [pc, #472]	; (8002470 <HAL_RCC_OscConfig+0x4d4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x31a>
 80022a8:	4b70      	ldr	r3, [pc, #448]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	4a6f      	ldr	r2, [pc, #444]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70
 80022b4:	e02d      	b.n	8002312 <HAL_RCC_OscConfig+0x376>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x33c>
 80022be:	4b6b      	ldr	r3, [pc, #428]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	4a6a      	ldr	r2, [pc, #424]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ca:	4b68      	ldr	r3, [pc, #416]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	4a67      	ldr	r2, [pc, #412]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022d0:	f023 0304 	bic.w	r3, r3, #4
 80022d4:	6713      	str	r3, [r2, #112]	; 0x70
 80022d6:	e01c      	b.n	8002312 <HAL_RCC_OscConfig+0x376>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d10c      	bne.n	80022fa <HAL_RCC_OscConfig+0x35e>
 80022e0:	4b62      	ldr	r3, [pc, #392]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	4a61      	ldr	r2, [pc, #388]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	6713      	str	r3, [r2, #112]	; 0x70
 80022ec:	4b5f      	ldr	r3, [pc, #380]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	4a5e      	ldr	r2, [pc, #376]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6713      	str	r3, [r2, #112]	; 0x70
 80022f8:	e00b      	b.n	8002312 <HAL_RCC_OscConfig+0x376>
 80022fa:	4b5c      	ldr	r3, [pc, #368]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a5b      	ldr	r2, [pc, #364]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
 8002306:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	4a58      	ldr	r2, [pc, #352]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800230c:	f023 0304 	bic.w	r3, r3, #4
 8002310:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d015      	beq.n	8002346 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7fe fe57 	bl	8000fcc <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe fe53 	bl	8000fcc <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e0d8      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002338:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ee      	beq.n	8002322 <HAL_RCC_OscConfig+0x386>
 8002344:	e014      	b.n	8002370 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7fe fe41 	bl	8000fcc <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7fe fe3d 	bl	8000fcc <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0c2      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002364:	4b41      	ldr	r3, [pc, #260]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ee      	bne.n	800234e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002370:	7dfb      	ldrb	r3, [r7, #23]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d105      	bne.n	8002382 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a3c      	ldr	r2, [pc, #240]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800237c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80ae 	beq.w	80024e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800238c:	4b37      	ldr	r3, [pc, #220]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b08      	cmp	r3, #8
 8002396:	d06d      	beq.n	8002474 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d14b      	bne.n	8002438 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a0:	4b32      	ldr	r3, [pc, #200]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a31      	ldr	r2, [pc, #196]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80023a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe fe0e 	bl	8000fcc <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b4:	f7fe fe0a 	bl	8000fcc <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e091      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	4b29      	ldr	r3, [pc, #164]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	019b      	lsls	r3, r3, #6
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	085b      	lsrs	r3, r3, #1
 80023ea:	3b01      	subs	r3, #1
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	061b      	lsls	r3, r3, #24
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	071b      	lsls	r3, r3, #28
 80023fe:	491b      	ldr	r1, [pc, #108]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800240a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7fe fddc 	bl	8000fcc <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fdd8 	bl	8000fcc <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e05f      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x47c>
 8002436:	e057      	b.n	80024e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0b      	ldr	r2, [pc, #44]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800243e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7fe fdc2 	bl	8000fcc <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fdbe 	bl	8000fcc <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e045      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x4b0>
 800246a:	e03d      	b.n	80024e8 <HAL_RCC_OscConfig+0x54c>
 800246c:	40023800 	.word	0x40023800
 8002470:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002474:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <HAL_RCC_OscConfig+0x558>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d030      	beq.n	80024e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d129      	bne.n	80024e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d122      	bne.n	80024e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024a4:	4013      	ands	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d119      	bne.n	80024e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	085b      	lsrs	r3, r3, #1
 80024bc:	3b01      	subs	r3, #1
 80024be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d10f      	bne.n	80024e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800

080024f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0d0      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d910      	bls.n	8002540 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b67      	ldr	r3, [pc, #412]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 020f 	bic.w	r2, r3, #15
 8002526:	4965      	ldr	r1, [pc, #404]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b63      	ldr	r3, [pc, #396]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0b8      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002558:	4b59      	ldr	r3, [pc, #356]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a58      	ldr	r2, [pc, #352]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800255e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002562:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002570:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a52      	ldr	r2, [pc, #328]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002576:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800257a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	494d      	ldr	r1, [pc, #308]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d040      	beq.n	800261c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d115      	bne.n	80025da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e07f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ba:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e073      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ca:	4b3d      	ldr	r3, [pc, #244]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e06b      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025da:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f023 0203 	bic.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4936      	ldr	r1, [pc, #216]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ec:	f7fe fcee 	bl	8000fcc <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	e00a      	b.n	800260a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f4:	f7fe fcea 	bl	8000fcc <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e053      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 020c 	and.w	r2, r3, #12
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	429a      	cmp	r2, r3
 800261a:	d1eb      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d210      	bcs.n	800264c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 020f 	bic.w	r2, r3, #15
 8002632:	4922      	ldr	r1, [pc, #136]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e032      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4916      	ldr	r1, [pc, #88]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	490e      	ldr	r1, [pc, #56]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800268a:	f000 f821 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 800268e:	4602      	mov	r2, r0
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	490a      	ldr	r1, [pc, #40]	; (80026c4 <HAL_RCC_ClockConfig+0x1cc>)
 800269c:	5ccb      	ldrb	r3, [r1, r3]
 800269e:	fa22 f303 	lsr.w	r3, r2, r3
 80026a2:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <HAL_RCC_ClockConfig+0x1d0>)
 80026a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_RCC_ClockConfig+0x1d4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fc4a 	bl	8000f44 <HAL_InitTick>

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023c00 	.word	0x40023c00
 80026c0:	40023800 	.word	0x40023800
 80026c4:	080067b4 	.word	0x080067b4
 80026c8:	20000000 	.word	0x20000000
 80026cc:	20000004 	.word	0x20000004

080026d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	b5b0      	push	{r4, r5, r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026d6:	2100      	movs	r1, #0
 80026d8:	6079      	str	r1, [r7, #4]
 80026da:	2100      	movs	r1, #0
 80026dc:	60f9      	str	r1, [r7, #12]
 80026de:	2100      	movs	r1, #0
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80026e2:	2100      	movs	r1, #0
 80026e4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e6:	4952      	ldr	r1, [pc, #328]	; (8002830 <HAL_RCC_GetSysClockFreq+0x160>)
 80026e8:	6889      	ldr	r1, [r1, #8]
 80026ea:	f001 010c 	and.w	r1, r1, #12
 80026ee:	2908      	cmp	r1, #8
 80026f0:	d00d      	beq.n	800270e <HAL_RCC_GetSysClockFreq+0x3e>
 80026f2:	2908      	cmp	r1, #8
 80026f4:	f200 8094 	bhi.w	8002820 <HAL_RCC_GetSysClockFreq+0x150>
 80026f8:	2900      	cmp	r1, #0
 80026fa:	d002      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x32>
 80026fc:	2904      	cmp	r1, #4
 80026fe:	d003      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x38>
 8002700:	e08e      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002702:	4b4c      	ldr	r3, [pc, #304]	; (8002834 <HAL_RCC_GetSysClockFreq+0x164>)
 8002704:	60bb      	str	r3, [r7, #8]
      break;
 8002706:	e08e      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002708:	4b4b      	ldr	r3, [pc, #300]	; (8002838 <HAL_RCC_GetSysClockFreq+0x168>)
 800270a:	60bb      	str	r3, [r7, #8]
      break;
 800270c:	e08b      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800270e:	4948      	ldr	r1, [pc, #288]	; (8002830 <HAL_RCC_GetSysClockFreq+0x160>)
 8002710:	6849      	ldr	r1, [r1, #4]
 8002712:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002716:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002718:	4945      	ldr	r1, [pc, #276]	; (8002830 <HAL_RCC_GetSysClockFreq+0x160>)
 800271a:	6849      	ldr	r1, [r1, #4]
 800271c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002720:	2900      	cmp	r1, #0
 8002722:	d024      	beq.n	800276e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002724:	4942      	ldr	r1, [pc, #264]	; (8002830 <HAL_RCC_GetSysClockFreq+0x160>)
 8002726:	6849      	ldr	r1, [r1, #4]
 8002728:	0989      	lsrs	r1, r1, #6
 800272a:	4608      	mov	r0, r1
 800272c:	f04f 0100 	mov.w	r1, #0
 8002730:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002734:	f04f 0500 	mov.w	r5, #0
 8002738:	ea00 0204 	and.w	r2, r0, r4
 800273c:	ea01 0305 	and.w	r3, r1, r5
 8002740:	493d      	ldr	r1, [pc, #244]	; (8002838 <HAL_RCC_GetSysClockFreq+0x168>)
 8002742:	fb01 f003 	mul.w	r0, r1, r3
 8002746:	2100      	movs	r1, #0
 8002748:	fb01 f102 	mul.w	r1, r1, r2
 800274c:	1844      	adds	r4, r0, r1
 800274e:	493a      	ldr	r1, [pc, #232]	; (8002838 <HAL_RCC_GetSysClockFreq+0x168>)
 8002750:	fba2 0101 	umull	r0, r1, r2, r1
 8002754:	1863      	adds	r3, r4, r1
 8002756:	4619      	mov	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	461a      	mov	r2, r3
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	f7fd fdc6 	bl	80002f0 <__aeabi_uldivmod>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4613      	mov	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	e04a      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276e:	4b30      	ldr	r3, [pc, #192]	; (8002830 <HAL_RCC_GetSysClockFreq+0x160>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	099b      	lsrs	r3, r3, #6
 8002774:	461a      	mov	r2, r3
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800277e:	f04f 0100 	mov.w	r1, #0
 8002782:	ea02 0400 	and.w	r4, r2, r0
 8002786:	ea03 0501 	and.w	r5, r3, r1
 800278a:	4620      	mov	r0, r4
 800278c:	4629      	mov	r1, r5
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	014b      	lsls	r3, r1, #5
 8002798:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800279c:	0142      	lsls	r2, r0, #5
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	1b00      	subs	r0, r0, r4
 80027a4:	eb61 0105 	sbc.w	r1, r1, r5
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	018b      	lsls	r3, r1, #6
 80027b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027b6:	0182      	lsls	r2, r0, #6
 80027b8:	1a12      	subs	r2, r2, r0
 80027ba:	eb63 0301 	sbc.w	r3, r3, r1
 80027be:	f04f 0000 	mov.w	r0, #0
 80027c2:	f04f 0100 	mov.w	r1, #0
 80027c6:	00d9      	lsls	r1, r3, #3
 80027c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027cc:	00d0      	lsls	r0, r2, #3
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	1912      	adds	r2, r2, r4
 80027d4:	eb45 0303 	adc.w	r3, r5, r3
 80027d8:	f04f 0000 	mov.w	r0, #0
 80027dc:	f04f 0100 	mov.w	r1, #0
 80027e0:	0299      	lsls	r1, r3, #10
 80027e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027e6:	0290      	lsls	r0, r2, #10
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	f7fd fd7a 	bl	80002f0 <__aeabi_uldivmod>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4613      	mov	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_RCC_GetSysClockFreq+0x160>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	3301      	adds	r3, #1
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	60bb      	str	r3, [r7, #8]
      break;
 800281e:	e002      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <HAL_RCC_GetSysClockFreq+0x164>)
 8002822:	60bb      	str	r3, [r7, #8]
      break;
 8002824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002826:	68bb      	ldr	r3, [r7, #8]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bdb0      	pop	{r4, r5, r7, pc}
 8002830:	40023800 	.word	0x40023800
 8002834:	00f42400 	.word	0x00f42400
 8002838:	017d7840 	.word	0x017d7840

0800283c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_RCC_GetHCLKFreq+0x14>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000000 	.word	0x20000000

08002854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002858:	f7ff fff0 	bl	800283c <HAL_RCC_GetHCLKFreq>
 800285c:	4602      	mov	r2, r0
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	0a9b      	lsrs	r3, r3, #10
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	4903      	ldr	r1, [pc, #12]	; (8002878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40023800 	.word	0x40023800
 8002878:	080067c4 	.word	0x080067c4

0800287c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002880:	f7ff ffdc 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0b5b      	lsrs	r3, r3, #13
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	080067c4 	.word	0x080067c4

080028a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d012      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028cc:	4b69      	ldr	r3, [pc, #420]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a68      	ldr	r2, [pc, #416]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028d6:	6093      	str	r3, [r2, #8]
 80028d8:	4b66      	ldr	r3, [pc, #408]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e0:	4964      	ldr	r1, [pc, #400]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028ee:	2301      	movs	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d017      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028fe:	4b5d      	ldr	r3, [pc, #372]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002904:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290c:	4959      	ldr	r1, [pc, #356]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800291c:	d101      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800291e:	2301      	movs	r3, #1
 8002920:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800292a:	2301      	movs	r3, #1
 800292c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d017      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800293a:	4b4e      	ldr	r3, [pc, #312]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002940:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	494a      	ldr	r1, [pc, #296]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002958:	d101      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800295a:	2301      	movs	r3, #1
 800295c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002976:	2301      	movs	r3, #1
 8002978:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 808b 	beq.w	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002988:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	4a39      	ldr	r2, [pc, #228]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002992:	6413      	str	r3, [r2, #64]	; 0x40
 8002994:	4b37      	ldr	r3, [pc, #220]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029a0:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a34      	ldr	r2, [pc, #208]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ac:	f7fe fb0e 	bl	8000fcc <HAL_GetTick>
 80029b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b4:	f7fe fb0a 	bl	8000fcc <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	; 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e38d      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029c6:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029d2:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d035      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d02e      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029f0:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029fa:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a1d      	ldr	r2, [pc, #116]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a06:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a12:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a18:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d114      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fad2 	bl	8000fcc <HAL_GetTick>
 8002a28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a2c:	f7fe face 	bl	8000fcc <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e34f      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0ee      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a5a:	d111      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a68:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	4901      	ldr	r1, [pc, #4]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
 8002a72:	e00b      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40007000 	.word	0x40007000
 8002a7c:	0ffffcff 	.word	0x0ffffcff
 8002a80:	4bb3      	ldr	r3, [pc, #716]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4ab2      	ldr	r2, [pc, #712]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a8a:	6093      	str	r3, [r2, #8]
 8002a8c:	4bb0      	ldr	r3, [pc, #704]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	49ad      	ldr	r1, [pc, #692]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d010      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002aaa:	4ba9      	ldr	r3, [pc, #676]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab0:	4aa7      	ldr	r2, [pc, #668]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002aba:	4ba5      	ldr	r3, [pc, #660]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002abc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac4:	49a2      	ldr	r1, [pc, #648]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ad8:	4b9d      	ldr	r3, [pc, #628]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ade:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ae6:	499a      	ldr	r1, [pc, #616]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002afa:	4b95      	ldr	r3, [pc, #596]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b08:	4991      	ldr	r1, [pc, #580]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b1c:	4b8c      	ldr	r3, [pc, #560]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b2a:	4989      	ldr	r1, [pc, #548]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b3e:	4b84      	ldr	r3, [pc, #528]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	4980      	ldr	r1, [pc, #512]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b60:	4b7b      	ldr	r3, [pc, #492]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	f023 0203 	bic.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	4978      	ldr	r1, [pc, #480]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b82:	4b73      	ldr	r3, [pc, #460]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	f023 020c 	bic.w	r2, r3, #12
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b90:	496f      	ldr	r1, [pc, #444]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ba4:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb2:	4967      	ldr	r1, [pc, #412]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bc6:	4b62      	ldr	r3, [pc, #392]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bcc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd4:	495e      	ldr	r1, [pc, #376]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002be8:	4b59      	ldr	r3, [pc, #356]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	4956      	ldr	r1, [pc, #344]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c0a:	4b51      	ldr	r3, [pc, #324]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	494d      	ldr	r1, [pc, #308]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c2c:	4b48      	ldr	r3, [pc, #288]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	4945      	ldr	r1, [pc, #276]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c4e:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5c:	493c      	ldr	r1, [pc, #240]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c70:	4b37      	ldr	r3, [pc, #220]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c7e:	4934      	ldr	r1, [pc, #208]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d011      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c92:	4b2f      	ldr	r3, [pc, #188]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca0:	492b      	ldr	r1, [pc, #172]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce0:	491b      	ldr	r1, [pc, #108]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00b      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cf4:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d04:	4912      	ldr	r1, [pc, #72]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d18:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d28:	4909      	ldr	r1, [pc, #36]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00f      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	e002      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
 8002d54:	4985      	ldr	r1, [pc, #532]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00b      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d68:	4b80      	ldr	r3, [pc, #512]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d78:	497c      	ldr	r1, [pc, #496]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d005      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d8e:	f040 80d6 	bne.w	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d92:	4b76      	ldr	r3, [pc, #472]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a75      	ldr	r2, [pc, #468]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d9e:	f7fe f915 	bl	8000fcc <HAL_GetTick>
 8002da2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002da6:	f7fe f911 	bl	8000fcc <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b64      	cmp	r3, #100	; 0x64
 8002db2:	d901      	bls.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e194      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002db8:	4b6c      	ldr	r3, [pc, #432]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f0      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d021      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d11d      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dd8:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dde:	0c1b      	lsrs	r3, r3, #16
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002de6:	4b61      	ldr	r3, [pc, #388]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dec:	0e1b      	lsrs	r3, r3, #24
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	019a      	lsls	r2, r3, #6
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	061b      	lsls	r3, r3, #24
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	071b      	lsls	r3, r3, #28
 8002e0c:	4957      	ldr	r1, [pc, #348]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d004      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e28:	d00a      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d02e      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e3e:	d129      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e40:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e46:	0c1b      	lsrs	r3, r3, #16
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e4e:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e54:	0f1b      	lsrs	r3, r3, #28
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	019a      	lsls	r2, r3, #6
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	041b      	lsls	r3, r3, #16
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	071b      	lsls	r3, r3, #28
 8002e74:	493d      	ldr	r1, [pc, #244]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e82:	f023 021f 	bic.w	r2, r3, #31
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	4937      	ldr	r1, [pc, #220]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01d      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ea0:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea6:	0e1b      	lsrs	r3, r3, #24
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002eae:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb4:	0f1b      	lsrs	r3, r3, #28
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	019a      	lsls	r2, r3, #6
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	041b      	lsls	r3, r3, #16
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	061b      	lsls	r3, r3, #24
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	071b      	lsls	r3, r3, #28
 8002ed4:	4925      	ldr	r1, [pc, #148]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d011      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	019a      	lsls	r2, r3, #6
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	061b      	lsls	r3, r3, #24
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	071b      	lsls	r3, r3, #28
 8002f04:	4919      	ldr	r1, [pc, #100]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f0c:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a16      	ldr	r2, [pc, #88]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f18:	f7fe f858 	bl	8000fcc <HAL_GetTick>
 8002f1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f20:	f7fe f854 	bl	8000fcc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e0d7      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f32:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	f040 80cd 	bne.w	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f52:	f7fe f83b 	bl	8000fcc <HAL_GetTick>
 8002f56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f58:	e00a      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f5a:	f7fe f837 	bl	8000fcc <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b64      	cmp	r3, #100	; 0x64
 8002f66:	d903      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e0ba      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002f6c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f70:	4b5e      	ldr	r3, [pc, #376]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f7c:	d0ed      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d02e      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d12a      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fa6:	4b51      	ldr	r3, [pc, #324]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fb4:	4b4d      	ldr	r3, [pc, #308]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	0f1b      	lsrs	r3, r3, #28
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	019a      	lsls	r2, r3, #6
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	041b      	lsls	r3, r3, #16
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	061b      	lsls	r3, r3, #24
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	071b      	lsls	r3, r3, #28
 8002fda:	4944      	ldr	r1, [pc, #272]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fe2:	4b42      	ldr	r3, [pc, #264]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fe8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	493d      	ldr	r1, [pc, #244]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d022      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800300c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003010:	d11d      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003012:	4b36      	ldr	r3, [pc, #216]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	0e1b      	lsrs	r3, r3, #24
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003020:	4b32      	ldr	r3, [pc, #200]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	0f1b      	lsrs	r3, r3, #28
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	019a      	lsls	r2, r3, #6
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	431a      	orrs	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	061b      	lsls	r3, r3, #24
 8003040:	431a      	orrs	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	071b      	lsls	r3, r3, #28
 8003046:	4929      	ldr	r1, [pc, #164]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d028      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800305a:	4b24      	ldr	r3, [pc, #144]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003060:	0e1b      	lsrs	r3, r3, #24
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003068:	4b20      	ldr	r3, [pc, #128]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	0c1b      	lsrs	r3, r3, #16
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	019a      	lsls	r2, r3, #6
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	041b      	lsls	r3, r3, #16
 8003080:	431a      	orrs	r2, r3
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	061b      	lsls	r3, r3, #24
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	071b      	lsls	r3, r3, #28
 800308e:	4917      	ldr	r1, [pc, #92]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800309c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	4911      	ldr	r1, [pc, #68]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0e      	ldr	r2, [pc, #56]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b8:	f7fd ff88 	bl	8000fcc <HAL_GetTick>
 80030bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030c0:	f7fd ff84 	bl	8000fcc <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e007      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030de:	d1ef      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800

080030f0 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	460b      	mov	r3, r1
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e059      	b.n	80031bc <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310c:	2b00      	cmp	r3, #0
 800310e:	d106      	bne.n	800311e <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7fd fd93 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2224      	movs	r2, #36	; 0x24
 8003122:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f8d7 	bl	80032e8 <UART_SetConfig>
 800313a:	4603      	mov	r3, r0
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_MultiProcessor_Init+0x54>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e03b      	b.n	80031bc <HAL_MultiProcessor_Init+0xcc>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_MultiProcessor_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fb77 	bl	8003840 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003160:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003170:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003178:	d10a      	bne.n	8003190 <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8003184:	7afb      	ldrb	r3, [r7, #11]
 8003186:	061a      	lsls	r2, r3, #24
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 fbe5 	bl	8003984 <UART_CheckIdleState>
 80031ba:	4603      	mov	r3, r0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	; 0x28
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d17f      	bne.n	80032dc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_UART_Transmit+0x24>
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e078      	b.n	80032de <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Transmit+0x36>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e071      	b.n	80032de <HAL_UART_Transmit+0x11a>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2221      	movs	r2, #33	; 0x21
 800320c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800320e:	f7fd fedd 	bl	8000fcc <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322c:	d108      	bne.n	8003240 <HAL_UART_Transmit+0x7c>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d104      	bne.n	8003240 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	e003      	b.n	8003248 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003244:	2300      	movs	r3, #0
 8003246:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003250:	e02c      	b.n	80032ac <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	2180      	movs	r1, #128	; 0x80
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fbd6 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e038      	b.n	80032de <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10b      	bne.n	800328a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003280:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	3302      	adds	r3, #2
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	e007      	b.n	800329a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	781a      	ldrb	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	3301      	adds	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1cc      	bne.n	8003252 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2200      	movs	r2, #0
 80032c0:	2140      	movs	r1, #64	; 0x40
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fba3 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e005      	b.n	80032de <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	e000      	b.n	80032de <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4ba7      	ldr	r3, [pc, #668]	; (80035b4 <UART_SetConfig+0x2cc>)
 8003318:	4013      	ands	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	6939      	ldr	r1, [r7, #16]
 8003320:	430b      	orrs	r3, r1
 8003322:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	430a      	orrs	r2, r1
 800335c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a95      	ldr	r2, [pc, #596]	; (80035b8 <UART_SetConfig+0x2d0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d120      	bne.n	80033aa <UART_SetConfig+0xc2>
 8003368:	4b94      	ldr	r3, [pc, #592]	; (80035bc <UART_SetConfig+0x2d4>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b03      	cmp	r3, #3
 8003374:	d816      	bhi.n	80033a4 <UART_SetConfig+0xbc>
 8003376:	a201      	add	r2, pc, #4	; (adr r2, 800337c <UART_SetConfig+0x94>)
 8003378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337c:	0800338d 	.word	0x0800338d
 8003380:	08003399 	.word	0x08003399
 8003384:	08003393 	.word	0x08003393
 8003388:	0800339f 	.word	0x0800339f
 800338c:	2301      	movs	r3, #1
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	e14f      	b.n	8003632 <UART_SetConfig+0x34a>
 8003392:	2302      	movs	r3, #2
 8003394:	77fb      	strb	r3, [r7, #31]
 8003396:	e14c      	b.n	8003632 <UART_SetConfig+0x34a>
 8003398:	2304      	movs	r3, #4
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e149      	b.n	8003632 <UART_SetConfig+0x34a>
 800339e:	2308      	movs	r3, #8
 80033a0:	77fb      	strb	r3, [r7, #31]
 80033a2:	e146      	b.n	8003632 <UART_SetConfig+0x34a>
 80033a4:	2310      	movs	r3, #16
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e143      	b.n	8003632 <UART_SetConfig+0x34a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a84      	ldr	r2, [pc, #528]	; (80035c0 <UART_SetConfig+0x2d8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d132      	bne.n	800341a <UART_SetConfig+0x132>
 80033b4:	4b81      	ldr	r3, [pc, #516]	; (80035bc <UART_SetConfig+0x2d4>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b0c      	cmp	r3, #12
 80033c0:	d828      	bhi.n	8003414 <UART_SetConfig+0x12c>
 80033c2:	a201      	add	r2, pc, #4	; (adr r2, 80033c8 <UART_SetConfig+0xe0>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033fd 	.word	0x080033fd
 80033cc:	08003415 	.word	0x08003415
 80033d0:	08003415 	.word	0x08003415
 80033d4:	08003415 	.word	0x08003415
 80033d8:	08003409 	.word	0x08003409
 80033dc:	08003415 	.word	0x08003415
 80033e0:	08003415 	.word	0x08003415
 80033e4:	08003415 	.word	0x08003415
 80033e8:	08003403 	.word	0x08003403
 80033ec:	08003415 	.word	0x08003415
 80033f0:	08003415 	.word	0x08003415
 80033f4:	08003415 	.word	0x08003415
 80033f8:	0800340f 	.word	0x0800340f
 80033fc:	2300      	movs	r3, #0
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e117      	b.n	8003632 <UART_SetConfig+0x34a>
 8003402:	2302      	movs	r3, #2
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	e114      	b.n	8003632 <UART_SetConfig+0x34a>
 8003408:	2304      	movs	r3, #4
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e111      	b.n	8003632 <UART_SetConfig+0x34a>
 800340e:	2308      	movs	r3, #8
 8003410:	77fb      	strb	r3, [r7, #31]
 8003412:	e10e      	b.n	8003632 <UART_SetConfig+0x34a>
 8003414:	2310      	movs	r3, #16
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e10b      	b.n	8003632 <UART_SetConfig+0x34a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a69      	ldr	r2, [pc, #420]	; (80035c4 <UART_SetConfig+0x2dc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d120      	bne.n	8003466 <UART_SetConfig+0x17e>
 8003424:	4b65      	ldr	r3, [pc, #404]	; (80035bc <UART_SetConfig+0x2d4>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800342e:	2b30      	cmp	r3, #48	; 0x30
 8003430:	d013      	beq.n	800345a <UART_SetConfig+0x172>
 8003432:	2b30      	cmp	r3, #48	; 0x30
 8003434:	d814      	bhi.n	8003460 <UART_SetConfig+0x178>
 8003436:	2b20      	cmp	r3, #32
 8003438:	d009      	beq.n	800344e <UART_SetConfig+0x166>
 800343a:	2b20      	cmp	r3, #32
 800343c:	d810      	bhi.n	8003460 <UART_SetConfig+0x178>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <UART_SetConfig+0x160>
 8003442:	2b10      	cmp	r3, #16
 8003444:	d006      	beq.n	8003454 <UART_SetConfig+0x16c>
 8003446:	e00b      	b.n	8003460 <UART_SetConfig+0x178>
 8003448:	2300      	movs	r3, #0
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e0f1      	b.n	8003632 <UART_SetConfig+0x34a>
 800344e:	2302      	movs	r3, #2
 8003450:	77fb      	strb	r3, [r7, #31]
 8003452:	e0ee      	b.n	8003632 <UART_SetConfig+0x34a>
 8003454:	2304      	movs	r3, #4
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e0eb      	b.n	8003632 <UART_SetConfig+0x34a>
 800345a:	2308      	movs	r3, #8
 800345c:	77fb      	strb	r3, [r7, #31]
 800345e:	e0e8      	b.n	8003632 <UART_SetConfig+0x34a>
 8003460:	2310      	movs	r3, #16
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e0e5      	b.n	8003632 <UART_SetConfig+0x34a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a57      	ldr	r2, [pc, #348]	; (80035c8 <UART_SetConfig+0x2e0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d120      	bne.n	80034b2 <UART_SetConfig+0x1ca>
 8003470:	4b52      	ldr	r3, [pc, #328]	; (80035bc <UART_SetConfig+0x2d4>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800347a:	2bc0      	cmp	r3, #192	; 0xc0
 800347c:	d013      	beq.n	80034a6 <UART_SetConfig+0x1be>
 800347e:	2bc0      	cmp	r3, #192	; 0xc0
 8003480:	d814      	bhi.n	80034ac <UART_SetConfig+0x1c4>
 8003482:	2b80      	cmp	r3, #128	; 0x80
 8003484:	d009      	beq.n	800349a <UART_SetConfig+0x1b2>
 8003486:	2b80      	cmp	r3, #128	; 0x80
 8003488:	d810      	bhi.n	80034ac <UART_SetConfig+0x1c4>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <UART_SetConfig+0x1ac>
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d006      	beq.n	80034a0 <UART_SetConfig+0x1b8>
 8003492:	e00b      	b.n	80034ac <UART_SetConfig+0x1c4>
 8003494:	2300      	movs	r3, #0
 8003496:	77fb      	strb	r3, [r7, #31]
 8003498:	e0cb      	b.n	8003632 <UART_SetConfig+0x34a>
 800349a:	2302      	movs	r3, #2
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	e0c8      	b.n	8003632 <UART_SetConfig+0x34a>
 80034a0:	2304      	movs	r3, #4
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e0c5      	b.n	8003632 <UART_SetConfig+0x34a>
 80034a6:	2308      	movs	r3, #8
 80034a8:	77fb      	strb	r3, [r7, #31]
 80034aa:	e0c2      	b.n	8003632 <UART_SetConfig+0x34a>
 80034ac:	2310      	movs	r3, #16
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	e0bf      	b.n	8003632 <UART_SetConfig+0x34a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a45      	ldr	r2, [pc, #276]	; (80035cc <UART_SetConfig+0x2e4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d125      	bne.n	8003508 <UART_SetConfig+0x220>
 80034bc:	4b3f      	ldr	r3, [pc, #252]	; (80035bc <UART_SetConfig+0x2d4>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ca:	d017      	beq.n	80034fc <UART_SetConfig+0x214>
 80034cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d0:	d817      	bhi.n	8003502 <UART_SetConfig+0x21a>
 80034d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d6:	d00b      	beq.n	80034f0 <UART_SetConfig+0x208>
 80034d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034dc:	d811      	bhi.n	8003502 <UART_SetConfig+0x21a>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <UART_SetConfig+0x202>
 80034e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e6:	d006      	beq.n	80034f6 <UART_SetConfig+0x20e>
 80034e8:	e00b      	b.n	8003502 <UART_SetConfig+0x21a>
 80034ea:	2300      	movs	r3, #0
 80034ec:	77fb      	strb	r3, [r7, #31]
 80034ee:	e0a0      	b.n	8003632 <UART_SetConfig+0x34a>
 80034f0:	2302      	movs	r3, #2
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e09d      	b.n	8003632 <UART_SetConfig+0x34a>
 80034f6:	2304      	movs	r3, #4
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e09a      	b.n	8003632 <UART_SetConfig+0x34a>
 80034fc:	2308      	movs	r3, #8
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e097      	b.n	8003632 <UART_SetConfig+0x34a>
 8003502:	2310      	movs	r3, #16
 8003504:	77fb      	strb	r3, [r7, #31]
 8003506:	e094      	b.n	8003632 <UART_SetConfig+0x34a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a30      	ldr	r2, [pc, #192]	; (80035d0 <UART_SetConfig+0x2e8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d125      	bne.n	800355e <UART_SetConfig+0x276>
 8003512:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <UART_SetConfig+0x2d4>)
 8003514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003518:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800351c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003520:	d017      	beq.n	8003552 <UART_SetConfig+0x26a>
 8003522:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003526:	d817      	bhi.n	8003558 <UART_SetConfig+0x270>
 8003528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800352c:	d00b      	beq.n	8003546 <UART_SetConfig+0x25e>
 800352e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003532:	d811      	bhi.n	8003558 <UART_SetConfig+0x270>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <UART_SetConfig+0x258>
 8003538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353c:	d006      	beq.n	800354c <UART_SetConfig+0x264>
 800353e:	e00b      	b.n	8003558 <UART_SetConfig+0x270>
 8003540:	2301      	movs	r3, #1
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e075      	b.n	8003632 <UART_SetConfig+0x34a>
 8003546:	2302      	movs	r3, #2
 8003548:	77fb      	strb	r3, [r7, #31]
 800354a:	e072      	b.n	8003632 <UART_SetConfig+0x34a>
 800354c:	2304      	movs	r3, #4
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e06f      	b.n	8003632 <UART_SetConfig+0x34a>
 8003552:	2308      	movs	r3, #8
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e06c      	b.n	8003632 <UART_SetConfig+0x34a>
 8003558:	2310      	movs	r3, #16
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e069      	b.n	8003632 <UART_SetConfig+0x34a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <UART_SetConfig+0x2ec>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d137      	bne.n	80035d8 <UART_SetConfig+0x2f0>
 8003568:	4b14      	ldr	r3, [pc, #80]	; (80035bc <UART_SetConfig+0x2d4>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003572:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003576:	d017      	beq.n	80035a8 <UART_SetConfig+0x2c0>
 8003578:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800357c:	d817      	bhi.n	80035ae <UART_SetConfig+0x2c6>
 800357e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003582:	d00b      	beq.n	800359c <UART_SetConfig+0x2b4>
 8003584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003588:	d811      	bhi.n	80035ae <UART_SetConfig+0x2c6>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <UART_SetConfig+0x2ae>
 800358e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003592:	d006      	beq.n	80035a2 <UART_SetConfig+0x2ba>
 8003594:	e00b      	b.n	80035ae <UART_SetConfig+0x2c6>
 8003596:	2300      	movs	r3, #0
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e04a      	b.n	8003632 <UART_SetConfig+0x34a>
 800359c:	2302      	movs	r3, #2
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e047      	b.n	8003632 <UART_SetConfig+0x34a>
 80035a2:	2304      	movs	r3, #4
 80035a4:	77fb      	strb	r3, [r7, #31]
 80035a6:	e044      	b.n	8003632 <UART_SetConfig+0x34a>
 80035a8:	2308      	movs	r3, #8
 80035aa:	77fb      	strb	r3, [r7, #31]
 80035ac:	e041      	b.n	8003632 <UART_SetConfig+0x34a>
 80035ae:	2310      	movs	r3, #16
 80035b0:	77fb      	strb	r3, [r7, #31]
 80035b2:	e03e      	b.n	8003632 <UART_SetConfig+0x34a>
 80035b4:	efff69f3 	.word	0xefff69f3
 80035b8:	40011000 	.word	0x40011000
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40004400 	.word	0x40004400
 80035c4:	40004800 	.word	0x40004800
 80035c8:	40004c00 	.word	0x40004c00
 80035cc:	40005000 	.word	0x40005000
 80035d0:	40011400 	.word	0x40011400
 80035d4:	40007800 	.word	0x40007800
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a94      	ldr	r2, [pc, #592]	; (8003830 <UART_SetConfig+0x548>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d125      	bne.n	800362e <UART_SetConfig+0x346>
 80035e2:	4b94      	ldr	r3, [pc, #592]	; (8003834 <UART_SetConfig+0x54c>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035f0:	d017      	beq.n	8003622 <UART_SetConfig+0x33a>
 80035f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035f6:	d817      	bhi.n	8003628 <UART_SetConfig+0x340>
 80035f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035fc:	d00b      	beq.n	8003616 <UART_SetConfig+0x32e>
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003602:	d811      	bhi.n	8003628 <UART_SetConfig+0x340>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <UART_SetConfig+0x328>
 8003608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800360c:	d006      	beq.n	800361c <UART_SetConfig+0x334>
 800360e:	e00b      	b.n	8003628 <UART_SetConfig+0x340>
 8003610:	2300      	movs	r3, #0
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e00d      	b.n	8003632 <UART_SetConfig+0x34a>
 8003616:	2302      	movs	r3, #2
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	e00a      	b.n	8003632 <UART_SetConfig+0x34a>
 800361c:	2304      	movs	r3, #4
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e007      	b.n	8003632 <UART_SetConfig+0x34a>
 8003622:	2308      	movs	r3, #8
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e004      	b.n	8003632 <UART_SetConfig+0x34a>
 8003628:	2310      	movs	r3, #16
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e001      	b.n	8003632 <UART_SetConfig+0x34a>
 800362e:	2310      	movs	r3, #16
 8003630:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363a:	d17f      	bne.n	800373c <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800363c:	7ffb      	ldrb	r3, [r7, #31]
 800363e:	2b08      	cmp	r3, #8
 8003640:	d85c      	bhi.n	80036fc <UART_SetConfig+0x414>
 8003642:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <UART_SetConfig+0x360>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	0800366d 	.word	0x0800366d
 800364c:	0800368d 	.word	0x0800368d
 8003650:	080036ad 	.word	0x080036ad
 8003654:	080036fd 	.word	0x080036fd
 8003658:	080036c5 	.word	0x080036c5
 800365c:	080036fd 	.word	0x080036fd
 8003660:	080036fd 	.word	0x080036fd
 8003664:	080036fd 	.word	0x080036fd
 8003668:	080036e5 	.word	0x080036e5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800366c:	f7ff f8f2 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 8003670:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	005a      	lsls	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	441a      	add	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	b29b      	uxth	r3, r3
 8003688:	61bb      	str	r3, [r7, #24]
        break;
 800368a:	e03a      	b.n	8003702 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800368c:	f7ff f8f6 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 8003690:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	005a      	lsls	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	441a      	add	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	61bb      	str	r3, [r7, #24]
        break;
 80036aa:	e02a      	b.n	8003702 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	085a      	lsrs	r2, r3, #1
 80036b2:	4b61      	ldr	r3, [pc, #388]	; (8003838 <UART_SetConfig+0x550>)
 80036b4:	4413      	add	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6852      	ldr	r2, [r2, #4]
 80036ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80036be:	b29b      	uxth	r3, r3
 80036c0:	61bb      	str	r3, [r7, #24]
        break;
 80036c2:	e01e      	b.n	8003702 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036c4:	f7ff f804 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 80036c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	005a      	lsls	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	441a      	add	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	b29b      	uxth	r3, r3
 80036e0:	61bb      	str	r3, [r7, #24]
        break;
 80036e2:	e00e      	b.n	8003702 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	61bb      	str	r3, [r7, #24]
        break;
 80036fa:	e002      	b.n	8003702 <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	75fb      	strb	r3, [r7, #23]
        break;
 8003700:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	2b0f      	cmp	r3, #15
 8003706:	d916      	bls.n	8003736 <UART_SetConfig+0x44e>
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370e:	d212      	bcs.n	8003736 <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	b29b      	uxth	r3, r3
 8003714:	f023 030f 	bic.w	r3, r3, #15
 8003718:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	085b      	lsrs	r3, r3, #1
 800371e:	b29b      	uxth	r3, r3
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	b29a      	uxth	r2, r3
 8003726:	897b      	ldrh	r3, [r7, #10]
 8003728:	4313      	orrs	r3, r2
 800372a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	897a      	ldrh	r2, [r7, #10]
 8003732:	60da      	str	r2, [r3, #12]
 8003734:	e070      	b.n	8003818 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	75fb      	strb	r3, [r7, #23]
 800373a:	e06d      	b.n	8003818 <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 800373c:	7ffb      	ldrb	r3, [r7, #31]
 800373e:	2b08      	cmp	r3, #8
 8003740:	d859      	bhi.n	80037f6 <UART_SetConfig+0x50e>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <UART_SetConfig+0x460>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	0800376d 	.word	0x0800376d
 800374c:	0800378b 	.word	0x0800378b
 8003750:	080037a9 	.word	0x080037a9
 8003754:	080037f7 	.word	0x080037f7
 8003758:	080037c1 	.word	0x080037c1
 800375c:	080037f7 	.word	0x080037f7
 8003760:	080037f7 	.word	0x080037f7
 8003764:	080037f7 	.word	0x080037f7
 8003768:	080037df 	.word	0x080037df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800376c:	f7ff f872 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 8003770:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	085a      	lsrs	r2, r3, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	441a      	add	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	fbb2 f3f3 	udiv	r3, r2, r3
 8003784:	b29b      	uxth	r3, r3
 8003786:	61bb      	str	r3, [r7, #24]
        break;
 8003788:	e038      	b.n	80037fc <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800378a:	f7ff f877 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 800378e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	085a      	lsrs	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	441a      	add	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	61bb      	str	r3, [r7, #24]
        break;
 80037a6:	e029      	b.n	80037fc <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	085a      	lsrs	r2, r3, #1
 80037ae:	4b23      	ldr	r3, [pc, #140]	; (800383c <UART_SetConfig+0x554>)
 80037b0:	4413      	add	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6852      	ldr	r2, [r2, #4]
 80037b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	61bb      	str	r3, [r7, #24]
        break;
 80037be:	e01d      	b.n	80037fc <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037c0:	f7fe ff86 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 80037c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	085a      	lsrs	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	441a      	add	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	b29b      	uxth	r3, r3
 80037da:	61bb      	str	r3, [r7, #24]
        break;
 80037dc:	e00e      	b.n	80037fc <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	085b      	lsrs	r3, r3, #1
 80037e4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	61bb      	str	r3, [r7, #24]
        break;
 80037f4:	e002      	b.n	80037fc <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	75fb      	strb	r3, [r7, #23]
        break;
 80037fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b0f      	cmp	r3, #15
 8003800:	d908      	bls.n	8003814 <UART_SetConfig+0x52c>
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003808:	d204      	bcs.n	8003814 <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	e001      	b.n	8003818 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003824:	7dfb      	ldrb	r3, [r7, #23]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40007c00 	.word	0x40007c00
 8003834:	40023800 	.word	0x40023800
 8003838:	01e84800 	.word	0x01e84800
 800383c:	00f42400 	.word	0x00f42400

08003840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01a      	beq.n	8003956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800393e:	d10a      	bne.n	8003956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
  }
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af02      	add	r7, sp, #8
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003992:	f7fd fb1b 	bl	8000fcc <HAL_GetTick>
 8003996:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d10e      	bne.n	80039c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f82a 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e020      	b.n	8003a06 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d10e      	bne.n	80039f0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f814 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e00a      	b.n	8003a06 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1e:	e05d      	b.n	8003adc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d059      	beq.n	8003adc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a28:	f7fd fad0 	bl	8000fcc <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d302      	bcc.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d11b      	bne.n	8003a76 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e042      	b.n	8003afc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d02b      	beq.n	8003adc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a92:	d123      	bne.n	8003adc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a9c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e00f      	b.n	8003afc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d092      	beq.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <__errno>:
 8003b04:	4b01      	ldr	r3, [pc, #4]	; (8003b0c <__errno+0x8>)
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	2000000c 	.word	0x2000000c

08003b10 <__libc_init_array>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	4d0d      	ldr	r5, [pc, #52]	; (8003b48 <__libc_init_array+0x38>)
 8003b14:	4c0d      	ldr	r4, [pc, #52]	; (8003b4c <__libc_init_array+0x3c>)
 8003b16:	1b64      	subs	r4, r4, r5
 8003b18:	10a4      	asrs	r4, r4, #2
 8003b1a:	2600      	movs	r6, #0
 8003b1c:	42a6      	cmp	r6, r4
 8003b1e:	d109      	bne.n	8003b34 <__libc_init_array+0x24>
 8003b20:	4d0b      	ldr	r5, [pc, #44]	; (8003b50 <__libc_init_array+0x40>)
 8003b22:	4c0c      	ldr	r4, [pc, #48]	; (8003b54 <__libc_init_array+0x44>)
 8003b24:	f002 fe38 	bl	8006798 <_init>
 8003b28:	1b64      	subs	r4, r4, r5
 8003b2a:	10a4      	asrs	r4, r4, #2
 8003b2c:	2600      	movs	r6, #0
 8003b2e:	42a6      	cmp	r6, r4
 8003b30:	d105      	bne.n	8003b3e <__libc_init_array+0x2e>
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
 8003b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b38:	4798      	blx	r3
 8003b3a:	3601      	adds	r6, #1
 8003b3c:	e7ee      	b.n	8003b1c <__libc_init_array+0xc>
 8003b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b42:	4798      	blx	r3
 8003b44:	3601      	adds	r6, #1
 8003b46:	e7f2      	b.n	8003b2e <__libc_init_array+0x1e>
 8003b48:	08006bb4 	.word	0x08006bb4
 8003b4c:	08006bb4 	.word	0x08006bb4
 8003b50:	08006bb4 	.word	0x08006bb4
 8003b54:	08006bb8 	.word	0x08006bb8

08003b58 <memset>:
 8003b58:	4402      	add	r2, r0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d100      	bne.n	8003b62 <memset+0xa>
 8003b60:	4770      	bx	lr
 8003b62:	f803 1b01 	strb.w	r1, [r3], #1
 8003b66:	e7f9      	b.n	8003b5c <memset+0x4>

08003b68 <__cvt>:
 8003b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b6a:	ed2d 8b02 	vpush	{d8}
 8003b6e:	eeb0 8b40 	vmov.f64	d8, d0
 8003b72:	b085      	sub	sp, #20
 8003b74:	4617      	mov	r7, r2
 8003b76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003b78:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003b7a:	ee18 2a90 	vmov	r2, s17
 8003b7e:	f025 0520 	bic.w	r5, r5, #32
 8003b82:	2a00      	cmp	r2, #0
 8003b84:	bfb6      	itet	lt
 8003b86:	222d      	movlt	r2, #45	; 0x2d
 8003b88:	2200      	movge	r2, #0
 8003b8a:	eeb1 8b40 	vneglt.f64	d8, d0
 8003b8e:	2d46      	cmp	r5, #70	; 0x46
 8003b90:	460c      	mov	r4, r1
 8003b92:	701a      	strb	r2, [r3, #0]
 8003b94:	d004      	beq.n	8003ba0 <__cvt+0x38>
 8003b96:	2d45      	cmp	r5, #69	; 0x45
 8003b98:	d100      	bne.n	8003b9c <__cvt+0x34>
 8003b9a:	3401      	adds	r4, #1
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	e000      	b.n	8003ba2 <__cvt+0x3a>
 8003ba0:	2103      	movs	r1, #3
 8003ba2:	ab03      	add	r3, sp, #12
 8003ba4:	9301      	str	r3, [sp, #4]
 8003ba6:	ab02      	add	r3, sp, #8
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	4622      	mov	r2, r4
 8003bac:	4633      	mov	r3, r6
 8003bae:	eeb0 0b48 	vmov.f64	d0, d8
 8003bb2:	f000 fcdd 	bl	8004570 <_dtoa_r>
 8003bb6:	2d47      	cmp	r5, #71	; 0x47
 8003bb8:	d109      	bne.n	8003bce <__cvt+0x66>
 8003bba:	07fb      	lsls	r3, r7, #31
 8003bbc:	d407      	bmi.n	8003bce <__cvt+0x66>
 8003bbe:	9b03      	ldr	r3, [sp, #12]
 8003bc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bc2:	1a1b      	subs	r3, r3, r0
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	b005      	add	sp, #20
 8003bc8:	ecbd 8b02 	vpop	{d8}
 8003bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bce:	2d46      	cmp	r5, #70	; 0x46
 8003bd0:	eb00 0204 	add.w	r2, r0, r4
 8003bd4:	d10c      	bne.n	8003bf0 <__cvt+0x88>
 8003bd6:	7803      	ldrb	r3, [r0, #0]
 8003bd8:	2b30      	cmp	r3, #48	; 0x30
 8003bda:	d107      	bne.n	8003bec <__cvt+0x84>
 8003bdc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be4:	bf1c      	itt	ne
 8003be6:	f1c4 0401 	rsbne	r4, r4, #1
 8003bea:	6034      	strne	r4, [r6, #0]
 8003bec:	6833      	ldr	r3, [r6, #0]
 8003bee:	441a      	add	r2, r3
 8003bf0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf8:	bf08      	it	eq
 8003bfa:	9203      	streq	r2, [sp, #12]
 8003bfc:	2130      	movs	r1, #48	; 0x30
 8003bfe:	9b03      	ldr	r3, [sp, #12]
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d2dc      	bcs.n	8003bbe <__cvt+0x56>
 8003c04:	1c5c      	adds	r4, r3, #1
 8003c06:	9403      	str	r4, [sp, #12]
 8003c08:	7019      	strb	r1, [r3, #0]
 8003c0a:	e7f8      	b.n	8003bfe <__cvt+0x96>

08003c0c <__exponent>:
 8003c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2900      	cmp	r1, #0
 8003c12:	bfb8      	it	lt
 8003c14:	4249      	neglt	r1, r1
 8003c16:	f803 2b02 	strb.w	r2, [r3], #2
 8003c1a:	bfb4      	ite	lt
 8003c1c:	222d      	movlt	r2, #45	; 0x2d
 8003c1e:	222b      	movge	r2, #43	; 0x2b
 8003c20:	2909      	cmp	r1, #9
 8003c22:	7042      	strb	r2, [r0, #1]
 8003c24:	dd2a      	ble.n	8003c7c <__exponent+0x70>
 8003c26:	f10d 0407 	add.w	r4, sp, #7
 8003c2a:	46a4      	mov	ip, r4
 8003c2c:	270a      	movs	r7, #10
 8003c2e:	46a6      	mov	lr, r4
 8003c30:	460a      	mov	r2, r1
 8003c32:	fb91 f6f7 	sdiv	r6, r1, r7
 8003c36:	fb07 1516 	mls	r5, r7, r6, r1
 8003c3a:	3530      	adds	r5, #48	; 0x30
 8003c3c:	2a63      	cmp	r2, #99	; 0x63
 8003c3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003c42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003c46:	4631      	mov	r1, r6
 8003c48:	dcf1      	bgt.n	8003c2e <__exponent+0x22>
 8003c4a:	3130      	adds	r1, #48	; 0x30
 8003c4c:	f1ae 0502 	sub.w	r5, lr, #2
 8003c50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003c54:	1c44      	adds	r4, r0, #1
 8003c56:	4629      	mov	r1, r5
 8003c58:	4561      	cmp	r1, ip
 8003c5a:	d30a      	bcc.n	8003c72 <__exponent+0x66>
 8003c5c:	f10d 0209 	add.w	r2, sp, #9
 8003c60:	eba2 020e 	sub.w	r2, r2, lr
 8003c64:	4565      	cmp	r5, ip
 8003c66:	bf88      	it	hi
 8003c68:	2200      	movhi	r2, #0
 8003c6a:	4413      	add	r3, r2
 8003c6c:	1a18      	subs	r0, r3, r0
 8003c6e:	b003      	add	sp, #12
 8003c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c7a:	e7ed      	b.n	8003c58 <__exponent+0x4c>
 8003c7c:	2330      	movs	r3, #48	; 0x30
 8003c7e:	3130      	adds	r1, #48	; 0x30
 8003c80:	7083      	strb	r3, [r0, #2]
 8003c82:	70c1      	strb	r1, [r0, #3]
 8003c84:	1d03      	adds	r3, r0, #4
 8003c86:	e7f1      	b.n	8003c6c <__exponent+0x60>

08003c88 <_printf_float>:
 8003c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8c:	b08b      	sub	sp, #44	; 0x2c
 8003c8e:	460c      	mov	r4, r1
 8003c90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8003c94:	4616      	mov	r6, r2
 8003c96:	461f      	mov	r7, r3
 8003c98:	4605      	mov	r5, r0
 8003c9a:	f001 f9eb 	bl	8005074 <_localeconv_r>
 8003c9e:	f8d0 b000 	ldr.w	fp, [r0]
 8003ca2:	4658      	mov	r0, fp
 8003ca4:	f7fc facc 	bl	8000240 <strlen>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	9308      	str	r3, [sp, #32]
 8003cac:	f8d8 3000 	ldr.w	r3, [r8]
 8003cb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003cb4:	6822      	ldr	r2, [r4, #0]
 8003cb6:	3307      	adds	r3, #7
 8003cb8:	f023 0307 	bic.w	r3, r3, #7
 8003cbc:	f103 0108 	add.w	r1, r3, #8
 8003cc0:	f8c8 1000 	str.w	r1, [r8]
 8003cc4:	4682      	mov	sl, r0
 8003cc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8003cce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8003f30 <_printf_float+0x2a8>
 8003cd2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8003cd6:	eeb0 6bc0 	vabs.f64	d6, d0
 8003cda:	eeb4 6b47 	vcmp.f64	d6, d7
 8003cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce2:	dd24      	ble.n	8003d2e <_printf_float+0xa6>
 8003ce4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cec:	d502      	bpl.n	8003cf4 <_printf_float+0x6c>
 8003cee:	232d      	movs	r3, #45	; 0x2d
 8003cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cf4:	4b90      	ldr	r3, [pc, #576]	; (8003f38 <_printf_float+0x2b0>)
 8003cf6:	4891      	ldr	r0, [pc, #580]	; (8003f3c <_printf_float+0x2b4>)
 8003cf8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003cfc:	bf94      	ite	ls
 8003cfe:	4698      	movls	r8, r3
 8003d00:	4680      	movhi	r8, r0
 8003d02:	2303      	movs	r3, #3
 8003d04:	6123      	str	r3, [r4, #16]
 8003d06:	f022 0204 	bic.w	r2, r2, #4
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	6022      	str	r2, [r4, #0]
 8003d0e:	9304      	str	r3, [sp, #16]
 8003d10:	9700      	str	r7, [sp, #0]
 8003d12:	4633      	mov	r3, r6
 8003d14:	aa09      	add	r2, sp, #36	; 0x24
 8003d16:	4621      	mov	r1, r4
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f000 f9d3 	bl	80040c4 <_printf_common>
 8003d1e:	3001      	adds	r0, #1
 8003d20:	f040 808a 	bne.w	8003e38 <_printf_float+0x1b0>
 8003d24:	f04f 30ff 	mov.w	r0, #4294967295
 8003d28:	b00b      	add	sp, #44	; 0x2c
 8003d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d2e:	eeb4 0b40 	vcmp.f64	d0, d0
 8003d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d36:	d709      	bvc.n	8003d4c <_printf_float+0xc4>
 8003d38:	ee10 3a90 	vmov	r3, s1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bfbc      	itt	lt
 8003d40:	232d      	movlt	r3, #45	; 0x2d
 8003d42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d46:	487e      	ldr	r0, [pc, #504]	; (8003f40 <_printf_float+0x2b8>)
 8003d48:	4b7e      	ldr	r3, [pc, #504]	; (8003f44 <_printf_float+0x2bc>)
 8003d4a:	e7d5      	b.n	8003cf8 <_printf_float+0x70>
 8003d4c:	6863      	ldr	r3, [r4, #4]
 8003d4e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003d52:	9104      	str	r1, [sp, #16]
 8003d54:	1c59      	adds	r1, r3, #1
 8003d56:	d13c      	bne.n	8003dd2 <_printf_float+0x14a>
 8003d58:	2306      	movs	r3, #6
 8003d5a:	6063      	str	r3, [r4, #4]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9303      	str	r3, [sp, #12]
 8003d60:	ab08      	add	r3, sp, #32
 8003d62:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8003d66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d6a:	ab07      	add	r3, sp, #28
 8003d6c:	6861      	ldr	r1, [r4, #4]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	6022      	str	r2, [r4, #0]
 8003d72:	f10d 031b 	add.w	r3, sp, #27
 8003d76:	4628      	mov	r0, r5
 8003d78:	f7ff fef6 	bl	8003b68 <__cvt>
 8003d7c:	9b04      	ldr	r3, [sp, #16]
 8003d7e:	9907      	ldr	r1, [sp, #28]
 8003d80:	2b47      	cmp	r3, #71	; 0x47
 8003d82:	4680      	mov	r8, r0
 8003d84:	d108      	bne.n	8003d98 <_printf_float+0x110>
 8003d86:	1cc8      	adds	r0, r1, #3
 8003d88:	db02      	blt.n	8003d90 <_printf_float+0x108>
 8003d8a:	6863      	ldr	r3, [r4, #4]
 8003d8c:	4299      	cmp	r1, r3
 8003d8e:	dd41      	ble.n	8003e14 <_printf_float+0x18c>
 8003d90:	f1a9 0902 	sub.w	r9, r9, #2
 8003d94:	fa5f f989 	uxtb.w	r9, r9
 8003d98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003d9c:	d820      	bhi.n	8003de0 <_printf_float+0x158>
 8003d9e:	3901      	subs	r1, #1
 8003da0:	464a      	mov	r2, r9
 8003da2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003da6:	9107      	str	r1, [sp, #28]
 8003da8:	f7ff ff30 	bl	8003c0c <__exponent>
 8003dac:	9a08      	ldr	r2, [sp, #32]
 8003dae:	9004      	str	r0, [sp, #16]
 8003db0:	1813      	adds	r3, r2, r0
 8003db2:	2a01      	cmp	r2, #1
 8003db4:	6123      	str	r3, [r4, #16]
 8003db6:	dc02      	bgt.n	8003dbe <_printf_float+0x136>
 8003db8:	6822      	ldr	r2, [r4, #0]
 8003dba:	07d2      	lsls	r2, r2, #31
 8003dbc:	d501      	bpl.n	8003dc2 <_printf_float+0x13a>
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	6123      	str	r3, [r4, #16]
 8003dc2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0a2      	beq.n	8003d10 <_printf_float+0x88>
 8003dca:	232d      	movs	r3, #45	; 0x2d
 8003dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dd0:	e79e      	b.n	8003d10 <_printf_float+0x88>
 8003dd2:	9904      	ldr	r1, [sp, #16]
 8003dd4:	2947      	cmp	r1, #71	; 0x47
 8003dd6:	d1c1      	bne.n	8003d5c <_printf_float+0xd4>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1bf      	bne.n	8003d5c <_printf_float+0xd4>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e7bc      	b.n	8003d5a <_printf_float+0xd2>
 8003de0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003de4:	d118      	bne.n	8003e18 <_printf_float+0x190>
 8003de6:	2900      	cmp	r1, #0
 8003de8:	6863      	ldr	r3, [r4, #4]
 8003dea:	dd0b      	ble.n	8003e04 <_printf_float+0x17c>
 8003dec:	6121      	str	r1, [r4, #16]
 8003dee:	b913      	cbnz	r3, 8003df6 <_printf_float+0x16e>
 8003df0:	6822      	ldr	r2, [r4, #0]
 8003df2:	07d0      	lsls	r0, r2, #31
 8003df4:	d502      	bpl.n	8003dfc <_printf_float+0x174>
 8003df6:	3301      	adds	r3, #1
 8003df8:	440b      	add	r3, r1
 8003dfa:	6123      	str	r3, [r4, #16]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	65a1      	str	r1, [r4, #88]	; 0x58
 8003e00:	9304      	str	r3, [sp, #16]
 8003e02:	e7de      	b.n	8003dc2 <_printf_float+0x13a>
 8003e04:	b913      	cbnz	r3, 8003e0c <_printf_float+0x184>
 8003e06:	6822      	ldr	r2, [r4, #0]
 8003e08:	07d2      	lsls	r2, r2, #31
 8003e0a:	d501      	bpl.n	8003e10 <_printf_float+0x188>
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	e7f4      	b.n	8003dfa <_printf_float+0x172>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e7f2      	b.n	8003dfa <_printf_float+0x172>
 8003e14:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003e18:	9b08      	ldr	r3, [sp, #32]
 8003e1a:	4299      	cmp	r1, r3
 8003e1c:	db05      	blt.n	8003e2a <_printf_float+0x1a2>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	6121      	str	r1, [r4, #16]
 8003e22:	07d8      	lsls	r0, r3, #31
 8003e24:	d5ea      	bpl.n	8003dfc <_printf_float+0x174>
 8003e26:	1c4b      	adds	r3, r1, #1
 8003e28:	e7e7      	b.n	8003dfa <_printf_float+0x172>
 8003e2a:	2900      	cmp	r1, #0
 8003e2c:	bfd4      	ite	le
 8003e2e:	f1c1 0202 	rsble	r2, r1, #2
 8003e32:	2201      	movgt	r2, #1
 8003e34:	4413      	add	r3, r2
 8003e36:	e7e0      	b.n	8003dfa <_printf_float+0x172>
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	055a      	lsls	r2, r3, #21
 8003e3c:	d407      	bmi.n	8003e4e <_printf_float+0x1c6>
 8003e3e:	6923      	ldr	r3, [r4, #16]
 8003e40:	4642      	mov	r2, r8
 8003e42:	4631      	mov	r1, r6
 8003e44:	4628      	mov	r0, r5
 8003e46:	47b8      	blx	r7
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d12a      	bne.n	8003ea2 <_printf_float+0x21a>
 8003e4c:	e76a      	b.n	8003d24 <_printf_float+0x9c>
 8003e4e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003e52:	f240 80e2 	bls.w	800401a <_printf_float+0x392>
 8003e56:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003e5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e62:	d133      	bne.n	8003ecc <_printf_float+0x244>
 8003e64:	4a38      	ldr	r2, [pc, #224]	; (8003f48 <_printf_float+0x2c0>)
 8003e66:	2301      	movs	r3, #1
 8003e68:	4631      	mov	r1, r6
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	47b8      	blx	r7
 8003e6e:	3001      	adds	r0, #1
 8003e70:	f43f af58 	beq.w	8003d24 <_printf_float+0x9c>
 8003e74:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	db02      	blt.n	8003e82 <_printf_float+0x1fa>
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	07d8      	lsls	r0, r3, #31
 8003e80:	d50f      	bpl.n	8003ea2 <_printf_float+0x21a>
 8003e82:	4653      	mov	r3, sl
 8003e84:	465a      	mov	r2, fp
 8003e86:	4631      	mov	r1, r6
 8003e88:	4628      	mov	r0, r5
 8003e8a:	47b8      	blx	r7
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	f43f af49 	beq.w	8003d24 <_printf_float+0x9c>
 8003e92:	f04f 0800 	mov.w	r8, #0
 8003e96:	f104 091a 	add.w	r9, r4, #26
 8003e9a:	9b08      	ldr	r3, [sp, #32]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	4543      	cmp	r3, r8
 8003ea0:	dc09      	bgt.n	8003eb6 <_printf_float+0x22e>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	079b      	lsls	r3, r3, #30
 8003ea6:	f100 8108 	bmi.w	80040ba <_printf_float+0x432>
 8003eaa:	68e0      	ldr	r0, [r4, #12]
 8003eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eae:	4298      	cmp	r0, r3
 8003eb0:	bfb8      	it	lt
 8003eb2:	4618      	movlt	r0, r3
 8003eb4:	e738      	b.n	8003d28 <_printf_float+0xa0>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	464a      	mov	r2, r9
 8003eba:	4631      	mov	r1, r6
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	47b8      	blx	r7
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	f43f af2f 	beq.w	8003d24 <_printf_float+0x9c>
 8003ec6:	f108 0801 	add.w	r8, r8, #1
 8003eca:	e7e6      	b.n	8003e9a <_printf_float+0x212>
 8003ecc:	9b07      	ldr	r3, [sp, #28]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	dc3c      	bgt.n	8003f4c <_printf_float+0x2c4>
 8003ed2:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <_printf_float+0x2c0>)
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	4628      	mov	r0, r5
 8003eda:	47b8      	blx	r7
 8003edc:	3001      	adds	r0, #1
 8003ede:	f43f af21 	beq.w	8003d24 <_printf_float+0x9c>
 8003ee2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	d102      	bne.n	8003ef0 <_printf_float+0x268>
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	07d9      	lsls	r1, r3, #31
 8003eee:	d5d8      	bpl.n	8003ea2 <_printf_float+0x21a>
 8003ef0:	4653      	mov	r3, sl
 8003ef2:	465a      	mov	r2, fp
 8003ef4:	4631      	mov	r1, r6
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	47b8      	blx	r7
 8003efa:	3001      	adds	r0, #1
 8003efc:	f43f af12 	beq.w	8003d24 <_printf_float+0x9c>
 8003f00:	f04f 0900 	mov.w	r9, #0
 8003f04:	f104 0a1a 	add.w	sl, r4, #26
 8003f08:	9b07      	ldr	r3, [sp, #28]
 8003f0a:	425b      	negs	r3, r3
 8003f0c:	454b      	cmp	r3, r9
 8003f0e:	dc01      	bgt.n	8003f14 <_printf_float+0x28c>
 8003f10:	9b08      	ldr	r3, [sp, #32]
 8003f12:	e795      	b.n	8003e40 <_printf_float+0x1b8>
 8003f14:	2301      	movs	r3, #1
 8003f16:	4652      	mov	r2, sl
 8003f18:	4631      	mov	r1, r6
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	47b8      	blx	r7
 8003f1e:	3001      	adds	r0, #1
 8003f20:	f43f af00 	beq.w	8003d24 <_printf_float+0x9c>
 8003f24:	f109 0901 	add.w	r9, r9, #1
 8003f28:	e7ee      	b.n	8003f08 <_printf_float+0x280>
 8003f2a:	bf00      	nop
 8003f2c:	f3af 8000 	nop.w
 8003f30:	ffffffff 	.word	0xffffffff
 8003f34:	7fefffff 	.word	0x7fefffff
 8003f38:	080067d0 	.word	0x080067d0
 8003f3c:	080067d4 	.word	0x080067d4
 8003f40:	080067dc 	.word	0x080067dc
 8003f44:	080067d8 	.word	0x080067d8
 8003f48:	080067e0 	.word	0x080067e0
 8003f4c:	9a08      	ldr	r2, [sp, #32]
 8003f4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f50:	429a      	cmp	r2, r3
 8003f52:	bfa8      	it	ge
 8003f54:	461a      	movge	r2, r3
 8003f56:	2a00      	cmp	r2, #0
 8003f58:	4691      	mov	r9, r2
 8003f5a:	dc38      	bgt.n	8003fce <_printf_float+0x346>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9305      	str	r3, [sp, #20]
 8003f60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f64:	f104 021a 	add.w	r2, r4, #26
 8003f68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f6a:	9905      	ldr	r1, [sp, #20]
 8003f6c:	9304      	str	r3, [sp, #16]
 8003f6e:	eba3 0309 	sub.w	r3, r3, r9
 8003f72:	428b      	cmp	r3, r1
 8003f74:	dc33      	bgt.n	8003fde <_printf_float+0x356>
 8003f76:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	db3c      	blt.n	8003ff8 <_printf_float+0x370>
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	07da      	lsls	r2, r3, #31
 8003f82:	d439      	bmi.n	8003ff8 <_printf_float+0x370>
 8003f84:	9a08      	ldr	r2, [sp, #32]
 8003f86:	9b04      	ldr	r3, [sp, #16]
 8003f88:	9907      	ldr	r1, [sp, #28]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	eba2 0901 	sub.w	r9, r2, r1
 8003f90:	4599      	cmp	r9, r3
 8003f92:	bfa8      	it	ge
 8003f94:	4699      	movge	r9, r3
 8003f96:	f1b9 0f00 	cmp.w	r9, #0
 8003f9a:	dc35      	bgt.n	8004008 <_printf_float+0x380>
 8003f9c:	f04f 0800 	mov.w	r8, #0
 8003fa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fa4:	f104 0a1a 	add.w	sl, r4, #26
 8003fa8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	eba3 0309 	sub.w	r3, r3, r9
 8003fb2:	4543      	cmp	r3, r8
 8003fb4:	f77f af75 	ble.w	8003ea2 <_printf_float+0x21a>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4652      	mov	r2, sl
 8003fbc:	4631      	mov	r1, r6
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	47b8      	blx	r7
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	f43f aeae 	beq.w	8003d24 <_printf_float+0x9c>
 8003fc8:	f108 0801 	add.w	r8, r8, #1
 8003fcc:	e7ec      	b.n	8003fa8 <_printf_float+0x320>
 8003fce:	4613      	mov	r3, r2
 8003fd0:	4631      	mov	r1, r6
 8003fd2:	4642      	mov	r2, r8
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	47b8      	blx	r7
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d1bf      	bne.n	8003f5c <_printf_float+0x2d4>
 8003fdc:	e6a2      	b.n	8003d24 <_printf_float+0x9c>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	9204      	str	r2, [sp, #16]
 8003fe6:	47b8      	blx	r7
 8003fe8:	3001      	adds	r0, #1
 8003fea:	f43f ae9b 	beq.w	8003d24 <_printf_float+0x9c>
 8003fee:	9b05      	ldr	r3, [sp, #20]
 8003ff0:	9a04      	ldr	r2, [sp, #16]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	9305      	str	r3, [sp, #20]
 8003ff6:	e7b7      	b.n	8003f68 <_printf_float+0x2e0>
 8003ff8:	4653      	mov	r3, sl
 8003ffa:	465a      	mov	r2, fp
 8003ffc:	4631      	mov	r1, r6
 8003ffe:	4628      	mov	r0, r5
 8004000:	47b8      	blx	r7
 8004002:	3001      	adds	r0, #1
 8004004:	d1be      	bne.n	8003f84 <_printf_float+0x2fc>
 8004006:	e68d      	b.n	8003d24 <_printf_float+0x9c>
 8004008:	9a04      	ldr	r2, [sp, #16]
 800400a:	464b      	mov	r3, r9
 800400c:	4442      	add	r2, r8
 800400e:	4631      	mov	r1, r6
 8004010:	4628      	mov	r0, r5
 8004012:	47b8      	blx	r7
 8004014:	3001      	adds	r0, #1
 8004016:	d1c1      	bne.n	8003f9c <_printf_float+0x314>
 8004018:	e684      	b.n	8003d24 <_printf_float+0x9c>
 800401a:	9a08      	ldr	r2, [sp, #32]
 800401c:	2a01      	cmp	r2, #1
 800401e:	dc01      	bgt.n	8004024 <_printf_float+0x39c>
 8004020:	07db      	lsls	r3, r3, #31
 8004022:	d537      	bpl.n	8004094 <_printf_float+0x40c>
 8004024:	2301      	movs	r3, #1
 8004026:	4642      	mov	r2, r8
 8004028:	4631      	mov	r1, r6
 800402a:	4628      	mov	r0, r5
 800402c:	47b8      	blx	r7
 800402e:	3001      	adds	r0, #1
 8004030:	f43f ae78 	beq.w	8003d24 <_printf_float+0x9c>
 8004034:	4653      	mov	r3, sl
 8004036:	465a      	mov	r2, fp
 8004038:	4631      	mov	r1, r6
 800403a:	4628      	mov	r0, r5
 800403c:	47b8      	blx	r7
 800403e:	3001      	adds	r0, #1
 8004040:	f43f ae70 	beq.w	8003d24 <_printf_float+0x9c>
 8004044:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004048:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004050:	d01b      	beq.n	800408a <_printf_float+0x402>
 8004052:	9b08      	ldr	r3, [sp, #32]
 8004054:	f108 0201 	add.w	r2, r8, #1
 8004058:	3b01      	subs	r3, #1
 800405a:	4631      	mov	r1, r6
 800405c:	4628      	mov	r0, r5
 800405e:	47b8      	blx	r7
 8004060:	3001      	adds	r0, #1
 8004062:	d10e      	bne.n	8004082 <_printf_float+0x3fa>
 8004064:	e65e      	b.n	8003d24 <_printf_float+0x9c>
 8004066:	2301      	movs	r3, #1
 8004068:	464a      	mov	r2, r9
 800406a:	4631      	mov	r1, r6
 800406c:	4628      	mov	r0, r5
 800406e:	47b8      	blx	r7
 8004070:	3001      	adds	r0, #1
 8004072:	f43f ae57 	beq.w	8003d24 <_printf_float+0x9c>
 8004076:	f108 0801 	add.w	r8, r8, #1
 800407a:	9b08      	ldr	r3, [sp, #32]
 800407c:	3b01      	subs	r3, #1
 800407e:	4543      	cmp	r3, r8
 8004080:	dcf1      	bgt.n	8004066 <_printf_float+0x3de>
 8004082:	9b04      	ldr	r3, [sp, #16]
 8004084:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004088:	e6db      	b.n	8003e42 <_printf_float+0x1ba>
 800408a:	f04f 0800 	mov.w	r8, #0
 800408e:	f104 091a 	add.w	r9, r4, #26
 8004092:	e7f2      	b.n	800407a <_printf_float+0x3f2>
 8004094:	2301      	movs	r3, #1
 8004096:	4642      	mov	r2, r8
 8004098:	e7df      	b.n	800405a <_printf_float+0x3d2>
 800409a:	2301      	movs	r3, #1
 800409c:	464a      	mov	r2, r9
 800409e:	4631      	mov	r1, r6
 80040a0:	4628      	mov	r0, r5
 80040a2:	47b8      	blx	r7
 80040a4:	3001      	adds	r0, #1
 80040a6:	f43f ae3d 	beq.w	8003d24 <_printf_float+0x9c>
 80040aa:	f108 0801 	add.w	r8, r8, #1
 80040ae:	68e3      	ldr	r3, [r4, #12]
 80040b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040b2:	1a5b      	subs	r3, r3, r1
 80040b4:	4543      	cmp	r3, r8
 80040b6:	dcf0      	bgt.n	800409a <_printf_float+0x412>
 80040b8:	e6f7      	b.n	8003eaa <_printf_float+0x222>
 80040ba:	f04f 0800 	mov.w	r8, #0
 80040be:	f104 0919 	add.w	r9, r4, #25
 80040c2:	e7f4      	b.n	80040ae <_printf_float+0x426>

080040c4 <_printf_common>:
 80040c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c8:	4616      	mov	r6, r2
 80040ca:	4699      	mov	r9, r3
 80040cc:	688a      	ldr	r2, [r1, #8]
 80040ce:	690b      	ldr	r3, [r1, #16]
 80040d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040d4:	4293      	cmp	r3, r2
 80040d6:	bfb8      	it	lt
 80040d8:	4613      	movlt	r3, r2
 80040da:	6033      	str	r3, [r6, #0]
 80040dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040e0:	4607      	mov	r7, r0
 80040e2:	460c      	mov	r4, r1
 80040e4:	b10a      	cbz	r2, 80040ea <_printf_common+0x26>
 80040e6:	3301      	adds	r3, #1
 80040e8:	6033      	str	r3, [r6, #0]
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	0699      	lsls	r1, r3, #26
 80040ee:	bf42      	ittt	mi
 80040f0:	6833      	ldrmi	r3, [r6, #0]
 80040f2:	3302      	addmi	r3, #2
 80040f4:	6033      	strmi	r3, [r6, #0]
 80040f6:	6825      	ldr	r5, [r4, #0]
 80040f8:	f015 0506 	ands.w	r5, r5, #6
 80040fc:	d106      	bne.n	800410c <_printf_common+0x48>
 80040fe:	f104 0a19 	add.w	sl, r4, #25
 8004102:	68e3      	ldr	r3, [r4, #12]
 8004104:	6832      	ldr	r2, [r6, #0]
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	42ab      	cmp	r3, r5
 800410a:	dc26      	bgt.n	800415a <_printf_common+0x96>
 800410c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004110:	1e13      	subs	r3, r2, #0
 8004112:	6822      	ldr	r2, [r4, #0]
 8004114:	bf18      	it	ne
 8004116:	2301      	movne	r3, #1
 8004118:	0692      	lsls	r2, r2, #26
 800411a:	d42b      	bmi.n	8004174 <_printf_common+0xb0>
 800411c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004120:	4649      	mov	r1, r9
 8004122:	4638      	mov	r0, r7
 8004124:	47c0      	blx	r8
 8004126:	3001      	adds	r0, #1
 8004128:	d01e      	beq.n	8004168 <_printf_common+0xa4>
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	68e5      	ldr	r5, [r4, #12]
 800412e:	6832      	ldr	r2, [r6, #0]
 8004130:	f003 0306 	and.w	r3, r3, #6
 8004134:	2b04      	cmp	r3, #4
 8004136:	bf08      	it	eq
 8004138:	1aad      	subeq	r5, r5, r2
 800413a:	68a3      	ldr	r3, [r4, #8]
 800413c:	6922      	ldr	r2, [r4, #16]
 800413e:	bf0c      	ite	eq
 8004140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004144:	2500      	movne	r5, #0
 8004146:	4293      	cmp	r3, r2
 8004148:	bfc4      	itt	gt
 800414a:	1a9b      	subgt	r3, r3, r2
 800414c:	18ed      	addgt	r5, r5, r3
 800414e:	2600      	movs	r6, #0
 8004150:	341a      	adds	r4, #26
 8004152:	42b5      	cmp	r5, r6
 8004154:	d11a      	bne.n	800418c <_printf_common+0xc8>
 8004156:	2000      	movs	r0, #0
 8004158:	e008      	b.n	800416c <_printf_common+0xa8>
 800415a:	2301      	movs	r3, #1
 800415c:	4652      	mov	r2, sl
 800415e:	4649      	mov	r1, r9
 8004160:	4638      	mov	r0, r7
 8004162:	47c0      	blx	r8
 8004164:	3001      	adds	r0, #1
 8004166:	d103      	bne.n	8004170 <_printf_common+0xac>
 8004168:	f04f 30ff 	mov.w	r0, #4294967295
 800416c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004170:	3501      	adds	r5, #1
 8004172:	e7c6      	b.n	8004102 <_printf_common+0x3e>
 8004174:	18e1      	adds	r1, r4, r3
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	2030      	movs	r0, #48	; 0x30
 800417a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800417e:	4422      	add	r2, r4
 8004180:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004184:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004188:	3302      	adds	r3, #2
 800418a:	e7c7      	b.n	800411c <_printf_common+0x58>
 800418c:	2301      	movs	r3, #1
 800418e:	4622      	mov	r2, r4
 8004190:	4649      	mov	r1, r9
 8004192:	4638      	mov	r0, r7
 8004194:	47c0      	blx	r8
 8004196:	3001      	adds	r0, #1
 8004198:	d0e6      	beq.n	8004168 <_printf_common+0xa4>
 800419a:	3601      	adds	r6, #1
 800419c:	e7d9      	b.n	8004152 <_printf_common+0x8e>
	...

080041a0 <_printf_i>:
 80041a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041a4:	460c      	mov	r4, r1
 80041a6:	4691      	mov	r9, r2
 80041a8:	7e27      	ldrb	r7, [r4, #24]
 80041aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041ac:	2f78      	cmp	r7, #120	; 0x78
 80041ae:	4680      	mov	r8, r0
 80041b0:	469a      	mov	sl, r3
 80041b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041b6:	d807      	bhi.n	80041c8 <_printf_i+0x28>
 80041b8:	2f62      	cmp	r7, #98	; 0x62
 80041ba:	d80a      	bhi.n	80041d2 <_printf_i+0x32>
 80041bc:	2f00      	cmp	r7, #0
 80041be:	f000 80d8 	beq.w	8004372 <_printf_i+0x1d2>
 80041c2:	2f58      	cmp	r7, #88	; 0x58
 80041c4:	f000 80a3 	beq.w	800430e <_printf_i+0x16e>
 80041c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041d0:	e03a      	b.n	8004248 <_printf_i+0xa8>
 80041d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041d6:	2b15      	cmp	r3, #21
 80041d8:	d8f6      	bhi.n	80041c8 <_printf_i+0x28>
 80041da:	a001      	add	r0, pc, #4	; (adr r0, 80041e0 <_printf_i+0x40>)
 80041dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041e0:	08004239 	.word	0x08004239
 80041e4:	0800424d 	.word	0x0800424d
 80041e8:	080041c9 	.word	0x080041c9
 80041ec:	080041c9 	.word	0x080041c9
 80041f0:	080041c9 	.word	0x080041c9
 80041f4:	080041c9 	.word	0x080041c9
 80041f8:	0800424d 	.word	0x0800424d
 80041fc:	080041c9 	.word	0x080041c9
 8004200:	080041c9 	.word	0x080041c9
 8004204:	080041c9 	.word	0x080041c9
 8004208:	080041c9 	.word	0x080041c9
 800420c:	08004359 	.word	0x08004359
 8004210:	0800427d 	.word	0x0800427d
 8004214:	0800433b 	.word	0x0800433b
 8004218:	080041c9 	.word	0x080041c9
 800421c:	080041c9 	.word	0x080041c9
 8004220:	0800437b 	.word	0x0800437b
 8004224:	080041c9 	.word	0x080041c9
 8004228:	0800427d 	.word	0x0800427d
 800422c:	080041c9 	.word	0x080041c9
 8004230:	080041c9 	.word	0x080041c9
 8004234:	08004343 	.word	0x08004343
 8004238:	680b      	ldr	r3, [r1, #0]
 800423a:	1d1a      	adds	r2, r3, #4
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	600a      	str	r2, [r1, #0]
 8004240:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004248:	2301      	movs	r3, #1
 800424a:	e0a3      	b.n	8004394 <_printf_i+0x1f4>
 800424c:	6825      	ldr	r5, [r4, #0]
 800424e:	6808      	ldr	r0, [r1, #0]
 8004250:	062e      	lsls	r6, r5, #24
 8004252:	f100 0304 	add.w	r3, r0, #4
 8004256:	d50a      	bpl.n	800426e <_printf_i+0xce>
 8004258:	6805      	ldr	r5, [r0, #0]
 800425a:	600b      	str	r3, [r1, #0]
 800425c:	2d00      	cmp	r5, #0
 800425e:	da03      	bge.n	8004268 <_printf_i+0xc8>
 8004260:	232d      	movs	r3, #45	; 0x2d
 8004262:	426d      	negs	r5, r5
 8004264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004268:	485e      	ldr	r0, [pc, #376]	; (80043e4 <_printf_i+0x244>)
 800426a:	230a      	movs	r3, #10
 800426c:	e019      	b.n	80042a2 <_printf_i+0x102>
 800426e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004272:	6805      	ldr	r5, [r0, #0]
 8004274:	600b      	str	r3, [r1, #0]
 8004276:	bf18      	it	ne
 8004278:	b22d      	sxthne	r5, r5
 800427a:	e7ef      	b.n	800425c <_printf_i+0xbc>
 800427c:	680b      	ldr	r3, [r1, #0]
 800427e:	6825      	ldr	r5, [r4, #0]
 8004280:	1d18      	adds	r0, r3, #4
 8004282:	6008      	str	r0, [r1, #0]
 8004284:	0628      	lsls	r0, r5, #24
 8004286:	d501      	bpl.n	800428c <_printf_i+0xec>
 8004288:	681d      	ldr	r5, [r3, #0]
 800428a:	e002      	b.n	8004292 <_printf_i+0xf2>
 800428c:	0669      	lsls	r1, r5, #25
 800428e:	d5fb      	bpl.n	8004288 <_printf_i+0xe8>
 8004290:	881d      	ldrh	r5, [r3, #0]
 8004292:	4854      	ldr	r0, [pc, #336]	; (80043e4 <_printf_i+0x244>)
 8004294:	2f6f      	cmp	r7, #111	; 0x6f
 8004296:	bf0c      	ite	eq
 8004298:	2308      	moveq	r3, #8
 800429a:	230a      	movne	r3, #10
 800429c:	2100      	movs	r1, #0
 800429e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042a2:	6866      	ldr	r6, [r4, #4]
 80042a4:	60a6      	str	r6, [r4, #8]
 80042a6:	2e00      	cmp	r6, #0
 80042a8:	bfa2      	ittt	ge
 80042aa:	6821      	ldrge	r1, [r4, #0]
 80042ac:	f021 0104 	bicge.w	r1, r1, #4
 80042b0:	6021      	strge	r1, [r4, #0]
 80042b2:	b90d      	cbnz	r5, 80042b8 <_printf_i+0x118>
 80042b4:	2e00      	cmp	r6, #0
 80042b6:	d04d      	beq.n	8004354 <_printf_i+0x1b4>
 80042b8:	4616      	mov	r6, r2
 80042ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80042be:	fb03 5711 	mls	r7, r3, r1, r5
 80042c2:	5dc7      	ldrb	r7, [r0, r7]
 80042c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042c8:	462f      	mov	r7, r5
 80042ca:	42bb      	cmp	r3, r7
 80042cc:	460d      	mov	r5, r1
 80042ce:	d9f4      	bls.n	80042ba <_printf_i+0x11a>
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d10b      	bne.n	80042ec <_printf_i+0x14c>
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	07df      	lsls	r7, r3, #31
 80042d8:	d508      	bpl.n	80042ec <_printf_i+0x14c>
 80042da:	6923      	ldr	r3, [r4, #16]
 80042dc:	6861      	ldr	r1, [r4, #4]
 80042de:	4299      	cmp	r1, r3
 80042e0:	bfde      	ittt	le
 80042e2:	2330      	movle	r3, #48	; 0x30
 80042e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042ec:	1b92      	subs	r2, r2, r6
 80042ee:	6122      	str	r2, [r4, #16]
 80042f0:	f8cd a000 	str.w	sl, [sp]
 80042f4:	464b      	mov	r3, r9
 80042f6:	aa03      	add	r2, sp, #12
 80042f8:	4621      	mov	r1, r4
 80042fa:	4640      	mov	r0, r8
 80042fc:	f7ff fee2 	bl	80040c4 <_printf_common>
 8004300:	3001      	adds	r0, #1
 8004302:	d14c      	bne.n	800439e <_printf_i+0x1fe>
 8004304:	f04f 30ff 	mov.w	r0, #4294967295
 8004308:	b004      	add	sp, #16
 800430a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430e:	4835      	ldr	r0, [pc, #212]	; (80043e4 <_printf_i+0x244>)
 8004310:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	680e      	ldr	r6, [r1, #0]
 8004318:	061f      	lsls	r7, r3, #24
 800431a:	f856 5b04 	ldr.w	r5, [r6], #4
 800431e:	600e      	str	r6, [r1, #0]
 8004320:	d514      	bpl.n	800434c <_printf_i+0x1ac>
 8004322:	07d9      	lsls	r1, r3, #31
 8004324:	bf44      	itt	mi
 8004326:	f043 0320 	orrmi.w	r3, r3, #32
 800432a:	6023      	strmi	r3, [r4, #0]
 800432c:	b91d      	cbnz	r5, 8004336 <_printf_i+0x196>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	f023 0320 	bic.w	r3, r3, #32
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	2310      	movs	r3, #16
 8004338:	e7b0      	b.n	800429c <_printf_i+0xfc>
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	f043 0320 	orr.w	r3, r3, #32
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	2378      	movs	r3, #120	; 0x78
 8004344:	4828      	ldr	r0, [pc, #160]	; (80043e8 <_printf_i+0x248>)
 8004346:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800434a:	e7e3      	b.n	8004314 <_printf_i+0x174>
 800434c:	065e      	lsls	r6, r3, #25
 800434e:	bf48      	it	mi
 8004350:	b2ad      	uxthmi	r5, r5
 8004352:	e7e6      	b.n	8004322 <_printf_i+0x182>
 8004354:	4616      	mov	r6, r2
 8004356:	e7bb      	b.n	80042d0 <_printf_i+0x130>
 8004358:	680b      	ldr	r3, [r1, #0]
 800435a:	6826      	ldr	r6, [r4, #0]
 800435c:	6960      	ldr	r0, [r4, #20]
 800435e:	1d1d      	adds	r5, r3, #4
 8004360:	600d      	str	r5, [r1, #0]
 8004362:	0635      	lsls	r5, r6, #24
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	d501      	bpl.n	800436c <_printf_i+0x1cc>
 8004368:	6018      	str	r0, [r3, #0]
 800436a:	e002      	b.n	8004372 <_printf_i+0x1d2>
 800436c:	0671      	lsls	r1, r6, #25
 800436e:	d5fb      	bpl.n	8004368 <_printf_i+0x1c8>
 8004370:	8018      	strh	r0, [r3, #0]
 8004372:	2300      	movs	r3, #0
 8004374:	6123      	str	r3, [r4, #16]
 8004376:	4616      	mov	r6, r2
 8004378:	e7ba      	b.n	80042f0 <_printf_i+0x150>
 800437a:	680b      	ldr	r3, [r1, #0]
 800437c:	1d1a      	adds	r2, r3, #4
 800437e:	600a      	str	r2, [r1, #0]
 8004380:	681e      	ldr	r6, [r3, #0]
 8004382:	6862      	ldr	r2, [r4, #4]
 8004384:	2100      	movs	r1, #0
 8004386:	4630      	mov	r0, r6
 8004388:	f7fb ff62 	bl	8000250 <memchr>
 800438c:	b108      	cbz	r0, 8004392 <_printf_i+0x1f2>
 800438e:	1b80      	subs	r0, r0, r6
 8004390:	6060      	str	r0, [r4, #4]
 8004392:	6863      	ldr	r3, [r4, #4]
 8004394:	6123      	str	r3, [r4, #16]
 8004396:	2300      	movs	r3, #0
 8004398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800439c:	e7a8      	b.n	80042f0 <_printf_i+0x150>
 800439e:	6923      	ldr	r3, [r4, #16]
 80043a0:	4632      	mov	r2, r6
 80043a2:	4649      	mov	r1, r9
 80043a4:	4640      	mov	r0, r8
 80043a6:	47d0      	blx	sl
 80043a8:	3001      	adds	r0, #1
 80043aa:	d0ab      	beq.n	8004304 <_printf_i+0x164>
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	079b      	lsls	r3, r3, #30
 80043b0:	d413      	bmi.n	80043da <_printf_i+0x23a>
 80043b2:	68e0      	ldr	r0, [r4, #12]
 80043b4:	9b03      	ldr	r3, [sp, #12]
 80043b6:	4298      	cmp	r0, r3
 80043b8:	bfb8      	it	lt
 80043ba:	4618      	movlt	r0, r3
 80043bc:	e7a4      	b.n	8004308 <_printf_i+0x168>
 80043be:	2301      	movs	r3, #1
 80043c0:	4632      	mov	r2, r6
 80043c2:	4649      	mov	r1, r9
 80043c4:	4640      	mov	r0, r8
 80043c6:	47d0      	blx	sl
 80043c8:	3001      	adds	r0, #1
 80043ca:	d09b      	beq.n	8004304 <_printf_i+0x164>
 80043cc:	3501      	adds	r5, #1
 80043ce:	68e3      	ldr	r3, [r4, #12]
 80043d0:	9903      	ldr	r1, [sp, #12]
 80043d2:	1a5b      	subs	r3, r3, r1
 80043d4:	42ab      	cmp	r3, r5
 80043d6:	dcf2      	bgt.n	80043be <_printf_i+0x21e>
 80043d8:	e7eb      	b.n	80043b2 <_printf_i+0x212>
 80043da:	2500      	movs	r5, #0
 80043dc:	f104 0619 	add.w	r6, r4, #25
 80043e0:	e7f5      	b.n	80043ce <_printf_i+0x22e>
 80043e2:	bf00      	nop
 80043e4:	080067e2 	.word	0x080067e2
 80043e8:	080067f3 	.word	0x080067f3

080043ec <sniprintf>:
 80043ec:	b40c      	push	{r2, r3}
 80043ee:	b530      	push	{r4, r5, lr}
 80043f0:	4b17      	ldr	r3, [pc, #92]	; (8004450 <sniprintf+0x64>)
 80043f2:	1e0c      	subs	r4, r1, #0
 80043f4:	681d      	ldr	r5, [r3, #0]
 80043f6:	b09d      	sub	sp, #116	; 0x74
 80043f8:	da08      	bge.n	800440c <sniprintf+0x20>
 80043fa:	238b      	movs	r3, #139	; 0x8b
 80043fc:	602b      	str	r3, [r5, #0]
 80043fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004402:	b01d      	add	sp, #116	; 0x74
 8004404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004408:	b002      	add	sp, #8
 800440a:	4770      	bx	lr
 800440c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004410:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004414:	bf14      	ite	ne
 8004416:	f104 33ff 	addne.w	r3, r4, #4294967295
 800441a:	4623      	moveq	r3, r4
 800441c:	9304      	str	r3, [sp, #16]
 800441e:	9307      	str	r3, [sp, #28]
 8004420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004424:	9002      	str	r0, [sp, #8]
 8004426:	9006      	str	r0, [sp, #24]
 8004428:	f8ad 3016 	strh.w	r3, [sp, #22]
 800442c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800442e:	ab21      	add	r3, sp, #132	; 0x84
 8004430:	a902      	add	r1, sp, #8
 8004432:	4628      	mov	r0, r5
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	f001 facb 	bl	80059d0 <_svfiprintf_r>
 800443a:	1c43      	adds	r3, r0, #1
 800443c:	bfbc      	itt	lt
 800443e:	238b      	movlt	r3, #139	; 0x8b
 8004440:	602b      	strlt	r3, [r5, #0]
 8004442:	2c00      	cmp	r4, #0
 8004444:	d0dd      	beq.n	8004402 <sniprintf+0x16>
 8004446:	9b02      	ldr	r3, [sp, #8]
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	e7d9      	b.n	8004402 <sniprintf+0x16>
 800444e:	bf00      	nop
 8004450:	2000000c 	.word	0x2000000c

08004454 <quorem>:
 8004454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004458:	6903      	ldr	r3, [r0, #16]
 800445a:	690c      	ldr	r4, [r1, #16]
 800445c:	42a3      	cmp	r3, r4
 800445e:	4607      	mov	r7, r0
 8004460:	f2c0 8081 	blt.w	8004566 <quorem+0x112>
 8004464:	3c01      	subs	r4, #1
 8004466:	f101 0814 	add.w	r8, r1, #20
 800446a:	f100 0514 	add.w	r5, r0, #20
 800446e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004472:	9301      	str	r3, [sp, #4]
 8004474:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004478:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800447c:	3301      	adds	r3, #1
 800447e:	429a      	cmp	r2, r3
 8004480:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004484:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004488:	fbb2 f6f3 	udiv	r6, r2, r3
 800448c:	d331      	bcc.n	80044f2 <quorem+0x9e>
 800448e:	f04f 0e00 	mov.w	lr, #0
 8004492:	4640      	mov	r0, r8
 8004494:	46ac      	mov	ip, r5
 8004496:	46f2      	mov	sl, lr
 8004498:	f850 2b04 	ldr.w	r2, [r0], #4
 800449c:	b293      	uxth	r3, r2
 800449e:	fb06 e303 	mla	r3, r6, r3, lr
 80044a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	ebaa 0303 	sub.w	r3, sl, r3
 80044ac:	0c12      	lsrs	r2, r2, #16
 80044ae:	f8dc a000 	ldr.w	sl, [ip]
 80044b2:	fb06 e202 	mla	r2, r6, r2, lr
 80044b6:	fa13 f38a 	uxtah	r3, r3, sl
 80044ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80044be:	fa1f fa82 	uxth.w	sl, r2
 80044c2:	f8dc 2000 	ldr.w	r2, [ip]
 80044c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80044ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044d4:	4581      	cmp	r9, r0
 80044d6:	f84c 3b04 	str.w	r3, [ip], #4
 80044da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80044de:	d2db      	bcs.n	8004498 <quorem+0x44>
 80044e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80044e4:	b92b      	cbnz	r3, 80044f2 <quorem+0x9e>
 80044e6:	9b01      	ldr	r3, [sp, #4]
 80044e8:	3b04      	subs	r3, #4
 80044ea:	429d      	cmp	r5, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	d32e      	bcc.n	800454e <quorem+0xfa>
 80044f0:	613c      	str	r4, [r7, #16]
 80044f2:	4638      	mov	r0, r7
 80044f4:	f001 f856 	bl	80055a4 <__mcmp>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	db24      	blt.n	8004546 <quorem+0xf2>
 80044fc:	3601      	adds	r6, #1
 80044fe:	4628      	mov	r0, r5
 8004500:	f04f 0c00 	mov.w	ip, #0
 8004504:	f858 2b04 	ldr.w	r2, [r8], #4
 8004508:	f8d0 e000 	ldr.w	lr, [r0]
 800450c:	b293      	uxth	r3, r2
 800450e:	ebac 0303 	sub.w	r3, ip, r3
 8004512:	0c12      	lsrs	r2, r2, #16
 8004514:	fa13 f38e 	uxtah	r3, r3, lr
 8004518:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800451c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004520:	b29b      	uxth	r3, r3
 8004522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004526:	45c1      	cmp	r9, r8
 8004528:	f840 3b04 	str.w	r3, [r0], #4
 800452c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004530:	d2e8      	bcs.n	8004504 <quorem+0xb0>
 8004532:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800453a:	b922      	cbnz	r2, 8004546 <quorem+0xf2>
 800453c:	3b04      	subs	r3, #4
 800453e:	429d      	cmp	r5, r3
 8004540:	461a      	mov	r2, r3
 8004542:	d30a      	bcc.n	800455a <quorem+0x106>
 8004544:	613c      	str	r4, [r7, #16]
 8004546:	4630      	mov	r0, r6
 8004548:	b003      	add	sp, #12
 800454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	3b04      	subs	r3, #4
 8004552:	2a00      	cmp	r2, #0
 8004554:	d1cc      	bne.n	80044f0 <quorem+0x9c>
 8004556:	3c01      	subs	r4, #1
 8004558:	e7c7      	b.n	80044ea <quorem+0x96>
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	3b04      	subs	r3, #4
 800455e:	2a00      	cmp	r2, #0
 8004560:	d1f0      	bne.n	8004544 <quorem+0xf0>
 8004562:	3c01      	subs	r4, #1
 8004564:	e7eb      	b.n	800453e <quorem+0xea>
 8004566:	2000      	movs	r0, #0
 8004568:	e7ee      	b.n	8004548 <quorem+0xf4>
 800456a:	0000      	movs	r0, r0
 800456c:	0000      	movs	r0, r0
	...

08004570 <_dtoa_r>:
 8004570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004574:	ec59 8b10 	vmov	r8, r9, d0
 8004578:	b095      	sub	sp, #84	; 0x54
 800457a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800457c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800457e:	9107      	str	r1, [sp, #28]
 8004580:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004584:	4606      	mov	r6, r0
 8004586:	9209      	str	r2, [sp, #36]	; 0x24
 8004588:	9310      	str	r3, [sp, #64]	; 0x40
 800458a:	b975      	cbnz	r5, 80045aa <_dtoa_r+0x3a>
 800458c:	2010      	movs	r0, #16
 800458e:	f000 fd75 	bl	800507c <malloc>
 8004592:	4602      	mov	r2, r0
 8004594:	6270      	str	r0, [r6, #36]	; 0x24
 8004596:	b920      	cbnz	r0, 80045a2 <_dtoa_r+0x32>
 8004598:	4bab      	ldr	r3, [pc, #684]	; (8004848 <_dtoa_r+0x2d8>)
 800459a:	21ea      	movs	r1, #234	; 0xea
 800459c:	48ab      	ldr	r0, [pc, #684]	; (800484c <_dtoa_r+0x2dc>)
 800459e:	f001 fb27 	bl	8005bf0 <__assert_func>
 80045a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80045a6:	6005      	str	r5, [r0, #0]
 80045a8:	60c5      	str	r5, [r0, #12]
 80045aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80045ac:	6819      	ldr	r1, [r3, #0]
 80045ae:	b151      	cbz	r1, 80045c6 <_dtoa_r+0x56>
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	604a      	str	r2, [r1, #4]
 80045b4:	2301      	movs	r3, #1
 80045b6:	4093      	lsls	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
 80045ba:	4630      	mov	r0, r6
 80045bc:	f000 fdb4 	bl	8005128 <_Bfree>
 80045c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	f1b9 0300 	subs.w	r3, r9, #0
 80045ca:	bfbb      	ittet	lt
 80045cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80045d0:	9303      	strlt	r3, [sp, #12]
 80045d2:	2300      	movge	r3, #0
 80045d4:	2201      	movlt	r2, #1
 80045d6:	bfac      	ite	ge
 80045d8:	6023      	strge	r3, [r4, #0]
 80045da:	6022      	strlt	r2, [r4, #0]
 80045dc:	4b9c      	ldr	r3, [pc, #624]	; (8004850 <_dtoa_r+0x2e0>)
 80045de:	9c03      	ldr	r4, [sp, #12]
 80045e0:	43a3      	bics	r3, r4
 80045e2:	d11a      	bne.n	800461a <_dtoa_r+0xaa>
 80045e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80045f0:	ea53 0308 	orrs.w	r3, r3, r8
 80045f4:	f000 8512 	beq.w	800501c <_dtoa_r+0xaac>
 80045f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80045fa:	b953      	cbnz	r3, 8004612 <_dtoa_r+0xa2>
 80045fc:	4b95      	ldr	r3, [pc, #596]	; (8004854 <_dtoa_r+0x2e4>)
 80045fe:	e01f      	b.n	8004640 <_dtoa_r+0xd0>
 8004600:	4b95      	ldr	r3, [pc, #596]	; (8004858 <_dtoa_r+0x2e8>)
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	3308      	adds	r3, #8
 8004606:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	9800      	ldr	r0, [sp, #0]
 800460c:	b015      	add	sp, #84	; 0x54
 800460e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004612:	4b90      	ldr	r3, [pc, #576]	; (8004854 <_dtoa_r+0x2e4>)
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	3303      	adds	r3, #3
 8004618:	e7f5      	b.n	8004606 <_dtoa_r+0x96>
 800461a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800461e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004626:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800462a:	d10b      	bne.n	8004644 <_dtoa_r+0xd4>
 800462c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800462e:	2301      	movs	r3, #1
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 84ee 	beq.w	8005016 <_dtoa_r+0xaa6>
 800463a:	4888      	ldr	r0, [pc, #544]	; (800485c <_dtoa_r+0x2ec>)
 800463c:	6018      	str	r0, [r3, #0]
 800463e:	1e43      	subs	r3, r0, #1
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	e7e2      	b.n	800460a <_dtoa_r+0x9a>
 8004644:	a913      	add	r1, sp, #76	; 0x4c
 8004646:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800464a:	aa12      	add	r2, sp, #72	; 0x48
 800464c:	4630      	mov	r0, r6
 800464e:	f001 f84d 	bl	80056ec <__d2b>
 8004652:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8004656:	4605      	mov	r5, r0
 8004658:	9812      	ldr	r0, [sp, #72]	; 0x48
 800465a:	2900      	cmp	r1, #0
 800465c:	d047      	beq.n	80046ee <_dtoa_r+0x17e>
 800465e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004660:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004664:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004668:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800466c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004670:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004674:	2400      	movs	r4, #0
 8004676:	ec43 2b16 	vmov	d6, r2, r3
 800467a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800467e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8004830 <_dtoa_r+0x2c0>
 8004682:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004686:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8004838 <_dtoa_r+0x2c8>
 800468a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800468e:	eeb0 7b46 	vmov.f64	d7, d6
 8004692:	ee06 1a90 	vmov	s13, r1
 8004696:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800469a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8004840 <_dtoa_r+0x2d0>
 800469e:	eea5 7b06 	vfma.f64	d7, d5, d6
 80046a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80046a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80046aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ae:	ee16 ba90 	vmov	fp, s13
 80046b2:	9411      	str	r4, [sp, #68]	; 0x44
 80046b4:	d508      	bpl.n	80046c8 <_dtoa_r+0x158>
 80046b6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80046ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80046be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c2:	bf18      	it	ne
 80046c4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80046c8:	f1bb 0f16 	cmp.w	fp, #22
 80046cc:	d832      	bhi.n	8004734 <_dtoa_r+0x1c4>
 80046ce:	4b64      	ldr	r3, [pc, #400]	; (8004860 <_dtoa_r+0x2f0>)
 80046d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80046d4:	ed93 7b00 	vldr	d7, [r3]
 80046d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80046dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80046e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e4:	d501      	bpl.n	80046ea <_dtoa_r+0x17a>
 80046e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80046ea:	2300      	movs	r3, #0
 80046ec:	e023      	b.n	8004736 <_dtoa_r+0x1c6>
 80046ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80046f0:	4401      	add	r1, r0
 80046f2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	bfc3      	ittte	gt
 80046fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80046fe:	fa04 f303 	lslgt.w	r3, r4, r3
 8004702:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8004706:	f1c3 0320 	rsble	r3, r3, #32
 800470a:	bfc6      	itte	gt
 800470c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8004710:	ea43 0308 	orrgt.w	r3, r3, r8
 8004714:	fa08 f303 	lslle.w	r3, r8, r3
 8004718:	ee07 3a90 	vmov	s15, r3
 800471c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004720:	3901      	subs	r1, #1
 8004722:	ed8d 7b00 	vstr	d7, [sp]
 8004726:	9c01      	ldr	r4, [sp, #4]
 8004728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800472c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8004730:	2401      	movs	r4, #1
 8004732:	e7a0      	b.n	8004676 <_dtoa_r+0x106>
 8004734:	2301      	movs	r3, #1
 8004736:	930f      	str	r3, [sp, #60]	; 0x3c
 8004738:	1a43      	subs	r3, r0, r1
 800473a:	1e5a      	subs	r2, r3, #1
 800473c:	bf45      	ittet	mi
 800473e:	f1c3 0301 	rsbmi	r3, r3, #1
 8004742:	9305      	strmi	r3, [sp, #20]
 8004744:	2300      	movpl	r3, #0
 8004746:	2300      	movmi	r3, #0
 8004748:	9206      	str	r2, [sp, #24]
 800474a:	bf54      	ite	pl
 800474c:	9305      	strpl	r3, [sp, #20]
 800474e:	9306      	strmi	r3, [sp, #24]
 8004750:	f1bb 0f00 	cmp.w	fp, #0
 8004754:	db18      	blt.n	8004788 <_dtoa_r+0x218>
 8004756:	9b06      	ldr	r3, [sp, #24]
 8004758:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800475c:	445b      	add	r3, fp
 800475e:	9306      	str	r3, [sp, #24]
 8004760:	2300      	movs	r3, #0
 8004762:	9a07      	ldr	r2, [sp, #28]
 8004764:	2a09      	cmp	r2, #9
 8004766:	d849      	bhi.n	80047fc <_dtoa_r+0x28c>
 8004768:	2a05      	cmp	r2, #5
 800476a:	bfc4      	itt	gt
 800476c:	3a04      	subgt	r2, #4
 800476e:	9207      	strgt	r2, [sp, #28]
 8004770:	9a07      	ldr	r2, [sp, #28]
 8004772:	f1a2 0202 	sub.w	r2, r2, #2
 8004776:	bfcc      	ite	gt
 8004778:	2400      	movgt	r4, #0
 800477a:	2401      	movle	r4, #1
 800477c:	2a03      	cmp	r2, #3
 800477e:	d848      	bhi.n	8004812 <_dtoa_r+0x2a2>
 8004780:	e8df f002 	tbb	[pc, r2]
 8004784:	3a2c2e0b 	.word	0x3a2c2e0b
 8004788:	9b05      	ldr	r3, [sp, #20]
 800478a:	2200      	movs	r2, #0
 800478c:	eba3 030b 	sub.w	r3, r3, fp
 8004790:	9305      	str	r3, [sp, #20]
 8004792:	920e      	str	r2, [sp, #56]	; 0x38
 8004794:	f1cb 0300 	rsb	r3, fp, #0
 8004798:	e7e3      	b.n	8004762 <_dtoa_r+0x1f2>
 800479a:	2200      	movs	r2, #0
 800479c:	9208      	str	r2, [sp, #32]
 800479e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047a0:	2a00      	cmp	r2, #0
 80047a2:	dc39      	bgt.n	8004818 <_dtoa_r+0x2a8>
 80047a4:	f04f 0a01 	mov.w	sl, #1
 80047a8:	46d1      	mov	r9, sl
 80047aa:	4652      	mov	r2, sl
 80047ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80047b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80047b2:	2100      	movs	r1, #0
 80047b4:	6079      	str	r1, [r7, #4]
 80047b6:	2004      	movs	r0, #4
 80047b8:	f100 0c14 	add.w	ip, r0, #20
 80047bc:	4594      	cmp	ip, r2
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	d92f      	bls.n	8004822 <_dtoa_r+0x2b2>
 80047c2:	4630      	mov	r0, r6
 80047c4:	930c      	str	r3, [sp, #48]	; 0x30
 80047c6:	f000 fc6f 	bl	80050a8 <_Balloc>
 80047ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047cc:	9000      	str	r0, [sp, #0]
 80047ce:	4602      	mov	r2, r0
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d149      	bne.n	8004868 <_dtoa_r+0x2f8>
 80047d4:	4b23      	ldr	r3, [pc, #140]	; (8004864 <_dtoa_r+0x2f4>)
 80047d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80047da:	e6df      	b.n	800459c <_dtoa_r+0x2c>
 80047dc:	2201      	movs	r2, #1
 80047de:	e7dd      	b.n	800479c <_dtoa_r+0x22c>
 80047e0:	2200      	movs	r2, #0
 80047e2:	9208      	str	r2, [sp, #32]
 80047e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047e6:	eb0b 0a02 	add.w	sl, fp, r2
 80047ea:	f10a 0901 	add.w	r9, sl, #1
 80047ee:	464a      	mov	r2, r9
 80047f0:	2a01      	cmp	r2, #1
 80047f2:	bfb8      	it	lt
 80047f4:	2201      	movlt	r2, #1
 80047f6:	e7db      	b.n	80047b0 <_dtoa_r+0x240>
 80047f8:	2201      	movs	r2, #1
 80047fa:	e7f2      	b.n	80047e2 <_dtoa_r+0x272>
 80047fc:	2401      	movs	r4, #1
 80047fe:	2200      	movs	r2, #0
 8004800:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8004804:	f04f 3aff 	mov.w	sl, #4294967295
 8004808:	2100      	movs	r1, #0
 800480a:	46d1      	mov	r9, sl
 800480c:	2212      	movs	r2, #18
 800480e:	9109      	str	r1, [sp, #36]	; 0x24
 8004810:	e7ce      	b.n	80047b0 <_dtoa_r+0x240>
 8004812:	2201      	movs	r2, #1
 8004814:	9208      	str	r2, [sp, #32]
 8004816:	e7f5      	b.n	8004804 <_dtoa_r+0x294>
 8004818:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800481c:	46d1      	mov	r9, sl
 800481e:	4652      	mov	r2, sl
 8004820:	e7c6      	b.n	80047b0 <_dtoa_r+0x240>
 8004822:	3101      	adds	r1, #1
 8004824:	6079      	str	r1, [r7, #4]
 8004826:	0040      	lsls	r0, r0, #1
 8004828:	e7c6      	b.n	80047b8 <_dtoa_r+0x248>
 800482a:	bf00      	nop
 800482c:	f3af 8000 	nop.w
 8004830:	636f4361 	.word	0x636f4361
 8004834:	3fd287a7 	.word	0x3fd287a7
 8004838:	8b60c8b3 	.word	0x8b60c8b3
 800483c:	3fc68a28 	.word	0x3fc68a28
 8004840:	509f79fb 	.word	0x509f79fb
 8004844:	3fd34413 	.word	0x3fd34413
 8004848:	08006811 	.word	0x08006811
 800484c:	08006828 	.word	0x08006828
 8004850:	7ff00000 	.word	0x7ff00000
 8004854:	0800680d 	.word	0x0800680d
 8004858:	08006804 	.word	0x08006804
 800485c:	080067e1 	.word	0x080067e1
 8004860:	08006920 	.word	0x08006920
 8004864:	08006887 	.word	0x08006887
 8004868:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800486a:	9900      	ldr	r1, [sp, #0]
 800486c:	6011      	str	r1, [r2, #0]
 800486e:	f1b9 0f0e 	cmp.w	r9, #14
 8004872:	d872      	bhi.n	800495a <_dtoa_r+0x3ea>
 8004874:	2c00      	cmp	r4, #0
 8004876:	d070      	beq.n	800495a <_dtoa_r+0x3ea>
 8004878:	f1bb 0f00 	cmp.w	fp, #0
 800487c:	f340 80a6 	ble.w	80049cc <_dtoa_r+0x45c>
 8004880:	49ca      	ldr	r1, [pc, #808]	; (8004bac <_dtoa_r+0x63c>)
 8004882:	f00b 020f 	and.w	r2, fp, #15
 8004886:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800488a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800488e:	ed92 7b00 	vldr	d7, [r2]
 8004892:	ea4f 112b 	mov.w	r1, fp, asr #4
 8004896:	f000 808d 	beq.w	80049b4 <_dtoa_r+0x444>
 800489a:	4ac5      	ldr	r2, [pc, #788]	; (8004bb0 <_dtoa_r+0x640>)
 800489c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80048a0:	ed92 6b08 	vldr	d6, [r2, #32]
 80048a4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80048a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80048ac:	f001 010f 	and.w	r1, r1, #15
 80048b0:	2203      	movs	r2, #3
 80048b2:	48bf      	ldr	r0, [pc, #764]	; (8004bb0 <_dtoa_r+0x640>)
 80048b4:	2900      	cmp	r1, #0
 80048b6:	d17f      	bne.n	80049b8 <_dtoa_r+0x448>
 80048b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80048bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80048c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80048c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80048c6:	2900      	cmp	r1, #0
 80048c8:	f000 80b2 	beq.w	8004a30 <_dtoa_r+0x4c0>
 80048cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80048d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80048d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80048d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048dc:	f140 80a8 	bpl.w	8004a30 <_dtoa_r+0x4c0>
 80048e0:	f1b9 0f00 	cmp.w	r9, #0
 80048e4:	f000 80a4 	beq.w	8004a30 <_dtoa_r+0x4c0>
 80048e8:	f1ba 0f00 	cmp.w	sl, #0
 80048ec:	dd31      	ble.n	8004952 <_dtoa_r+0x3e2>
 80048ee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80048f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80048f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80048fa:	f10b 37ff 	add.w	r7, fp, #4294967295
 80048fe:	3201      	adds	r2, #1
 8004900:	4650      	mov	r0, sl
 8004902:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004906:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800490a:	ee07 2a90 	vmov	s15, r2
 800490e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004912:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004916:	ed8d 5b02 	vstr	d5, [sp, #8]
 800491a:	9c03      	ldr	r4, [sp, #12]
 800491c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004920:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8004924:	2800      	cmp	r0, #0
 8004926:	f040 8086 	bne.w	8004a36 <_dtoa_r+0x4c6>
 800492a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800492e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004932:	ec42 1b17 	vmov	d7, r1, r2
 8004936:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800493a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493e:	f300 8272 	bgt.w	8004e26 <_dtoa_r+0x8b6>
 8004942:	eeb1 7b47 	vneg.f64	d7, d7
 8004946:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800494a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494e:	f100 8267 	bmi.w	8004e20 <_dtoa_r+0x8b0>
 8004952:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8004956:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800495a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800495c:	2a00      	cmp	r2, #0
 800495e:	f2c0 8129 	blt.w	8004bb4 <_dtoa_r+0x644>
 8004962:	f1bb 0f0e 	cmp.w	fp, #14
 8004966:	f300 8125 	bgt.w	8004bb4 <_dtoa_r+0x644>
 800496a:	4b90      	ldr	r3, [pc, #576]	; (8004bac <_dtoa_r+0x63c>)
 800496c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004970:	ed93 6b00 	vldr	d6, [r3]
 8004974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004976:	2b00      	cmp	r3, #0
 8004978:	f280 80c3 	bge.w	8004b02 <_dtoa_r+0x592>
 800497c:	f1b9 0f00 	cmp.w	r9, #0
 8004980:	f300 80bf 	bgt.w	8004b02 <_dtoa_r+0x592>
 8004984:	f040 824c 	bne.w	8004e20 <_dtoa_r+0x8b0>
 8004988:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800498c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004990:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004994:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499c:	464c      	mov	r4, r9
 800499e:	464f      	mov	r7, r9
 80049a0:	f280 8222 	bge.w	8004de8 <_dtoa_r+0x878>
 80049a4:	f8dd 8000 	ldr.w	r8, [sp]
 80049a8:	2331      	movs	r3, #49	; 0x31
 80049aa:	f808 3b01 	strb.w	r3, [r8], #1
 80049ae:	f10b 0b01 	add.w	fp, fp, #1
 80049b2:	e21e      	b.n	8004df2 <_dtoa_r+0x882>
 80049b4:	2202      	movs	r2, #2
 80049b6:	e77c      	b.n	80048b2 <_dtoa_r+0x342>
 80049b8:	07cc      	lsls	r4, r1, #31
 80049ba:	d504      	bpl.n	80049c6 <_dtoa_r+0x456>
 80049bc:	ed90 6b00 	vldr	d6, [r0]
 80049c0:	3201      	adds	r2, #1
 80049c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80049c6:	1049      	asrs	r1, r1, #1
 80049c8:	3008      	adds	r0, #8
 80049ca:	e773      	b.n	80048b4 <_dtoa_r+0x344>
 80049cc:	d02e      	beq.n	8004a2c <_dtoa_r+0x4bc>
 80049ce:	f1cb 0100 	rsb	r1, fp, #0
 80049d2:	4a76      	ldr	r2, [pc, #472]	; (8004bac <_dtoa_r+0x63c>)
 80049d4:	f001 000f 	and.w	r0, r1, #15
 80049d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80049dc:	ed92 7b00 	vldr	d7, [r2]
 80049e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80049e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80049e8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80049ec:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80049f0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80049f4:	486e      	ldr	r0, [pc, #440]	; (8004bb0 <_dtoa_r+0x640>)
 80049f6:	1109      	asrs	r1, r1, #4
 80049f8:	2400      	movs	r4, #0
 80049fa:	2202      	movs	r2, #2
 80049fc:	b939      	cbnz	r1, 8004a0e <_dtoa_r+0x49e>
 80049fe:	2c00      	cmp	r4, #0
 8004a00:	f43f af60 	beq.w	80048c4 <_dtoa_r+0x354>
 8004a04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a0c:	e75a      	b.n	80048c4 <_dtoa_r+0x354>
 8004a0e:	07cf      	lsls	r7, r1, #31
 8004a10:	d509      	bpl.n	8004a26 <_dtoa_r+0x4b6>
 8004a12:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8004a16:	ed90 7b00 	vldr	d7, [r0]
 8004a1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a1e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004a22:	3201      	adds	r2, #1
 8004a24:	2401      	movs	r4, #1
 8004a26:	1049      	asrs	r1, r1, #1
 8004a28:	3008      	adds	r0, #8
 8004a2a:	e7e7      	b.n	80049fc <_dtoa_r+0x48c>
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	e749      	b.n	80048c4 <_dtoa_r+0x354>
 8004a30:	465f      	mov	r7, fp
 8004a32:	4648      	mov	r0, r9
 8004a34:	e765      	b.n	8004902 <_dtoa_r+0x392>
 8004a36:	ec42 1b17 	vmov	d7, r1, r2
 8004a3a:	4a5c      	ldr	r2, [pc, #368]	; (8004bac <_dtoa_r+0x63c>)
 8004a3c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004a40:	ed12 4b02 	vldr	d4, [r2, #-8]
 8004a44:	9a00      	ldr	r2, [sp, #0]
 8004a46:	1814      	adds	r4, r2, r0
 8004a48:	9a08      	ldr	r2, [sp, #32]
 8004a4a:	b352      	cbz	r2, 8004aa2 <_dtoa_r+0x532>
 8004a4c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8004a50:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8004a54:	f8dd 8000 	ldr.w	r8, [sp]
 8004a58:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8004a5c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004a60:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004a64:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004a68:	ee14 2a90 	vmov	r2, s9
 8004a6c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004a70:	3230      	adds	r2, #48	; 0x30
 8004a72:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004a76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a7e:	f808 2b01 	strb.w	r2, [r8], #1
 8004a82:	d439      	bmi.n	8004af8 <_dtoa_r+0x588>
 8004a84:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004a88:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a90:	d472      	bmi.n	8004b78 <_dtoa_r+0x608>
 8004a92:	45a0      	cmp	r8, r4
 8004a94:	f43f af5d 	beq.w	8004952 <_dtoa_r+0x3e2>
 8004a98:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004a9c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004aa0:	e7e0      	b.n	8004a64 <_dtoa_r+0x4f4>
 8004aa2:	f8dd 8000 	ldr.w	r8, [sp]
 8004aa6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004aaa:	4621      	mov	r1, r4
 8004aac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004ab0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004ab4:	ee14 2a90 	vmov	r2, s9
 8004ab8:	3230      	adds	r2, #48	; 0x30
 8004aba:	f808 2b01 	strb.w	r2, [r8], #1
 8004abe:	45a0      	cmp	r8, r4
 8004ac0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004ac4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004ac8:	d118      	bne.n	8004afc <_dtoa_r+0x58c>
 8004aca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004ace:	ee37 4b05 	vadd.f64	d4, d7, d5
 8004ad2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ada:	dc4d      	bgt.n	8004b78 <_dtoa_r+0x608>
 8004adc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004ae0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae8:	f57f af33 	bpl.w	8004952 <_dtoa_r+0x3e2>
 8004aec:	4688      	mov	r8, r1
 8004aee:	3901      	subs	r1, #1
 8004af0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004af4:	2b30      	cmp	r3, #48	; 0x30
 8004af6:	d0f9      	beq.n	8004aec <_dtoa_r+0x57c>
 8004af8:	46bb      	mov	fp, r7
 8004afa:	e02a      	b.n	8004b52 <_dtoa_r+0x5e2>
 8004afc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004b00:	e7d6      	b.n	8004ab0 <_dtoa_r+0x540>
 8004b02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b06:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8004b0a:	f8dd 8000 	ldr.w	r8, [sp]
 8004b0e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004b12:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004b16:	ee15 3a10 	vmov	r3, s10
 8004b1a:	3330      	adds	r3, #48	; 0x30
 8004b1c:	f808 3b01 	strb.w	r3, [r8], #1
 8004b20:	9b00      	ldr	r3, [sp, #0]
 8004b22:	eba8 0303 	sub.w	r3, r8, r3
 8004b26:	4599      	cmp	r9, r3
 8004b28:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004b2c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004b30:	d133      	bne.n	8004b9a <_dtoa_r+0x62a>
 8004b32:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004b36:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3e:	dc1a      	bgt.n	8004b76 <_dtoa_r+0x606>
 8004b40:	eeb4 7b46 	vcmp.f64	d7, d6
 8004b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b48:	d103      	bne.n	8004b52 <_dtoa_r+0x5e2>
 8004b4a:	ee15 3a10 	vmov	r3, s10
 8004b4e:	07d9      	lsls	r1, r3, #31
 8004b50:	d411      	bmi.n	8004b76 <_dtoa_r+0x606>
 8004b52:	4629      	mov	r1, r5
 8004b54:	4630      	mov	r0, r6
 8004b56:	f000 fae7 	bl	8005128 <_Bfree>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b5e:	f888 3000 	strb.w	r3, [r8]
 8004b62:	f10b 0301 	add.w	r3, fp, #1
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f43f ad4d 	beq.w	800460a <_dtoa_r+0x9a>
 8004b70:	f8c3 8000 	str.w	r8, [r3]
 8004b74:	e549      	b.n	800460a <_dtoa_r+0x9a>
 8004b76:	465f      	mov	r7, fp
 8004b78:	4643      	mov	r3, r8
 8004b7a:	4698      	mov	r8, r3
 8004b7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b80:	2a39      	cmp	r2, #57	; 0x39
 8004b82:	d106      	bne.n	8004b92 <_dtoa_r+0x622>
 8004b84:	9a00      	ldr	r2, [sp, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d1f7      	bne.n	8004b7a <_dtoa_r+0x60a>
 8004b8a:	9900      	ldr	r1, [sp, #0]
 8004b8c:	2230      	movs	r2, #48	; 0x30
 8004b8e:	3701      	adds	r7, #1
 8004b90:	700a      	strb	r2, [r1, #0]
 8004b92:	781a      	ldrb	r2, [r3, #0]
 8004b94:	3201      	adds	r2, #1
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	e7ae      	b.n	8004af8 <_dtoa_r+0x588>
 8004b9a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004b9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba6:	d1b2      	bne.n	8004b0e <_dtoa_r+0x59e>
 8004ba8:	e7d3      	b.n	8004b52 <_dtoa_r+0x5e2>
 8004baa:	bf00      	nop
 8004bac:	08006920 	.word	0x08006920
 8004bb0:	080068f8 	.word	0x080068f8
 8004bb4:	9908      	ldr	r1, [sp, #32]
 8004bb6:	2900      	cmp	r1, #0
 8004bb8:	f000 80d1 	beq.w	8004d5e <_dtoa_r+0x7ee>
 8004bbc:	9907      	ldr	r1, [sp, #28]
 8004bbe:	2901      	cmp	r1, #1
 8004bc0:	f300 80b4 	bgt.w	8004d2c <_dtoa_r+0x7bc>
 8004bc4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004bc6:	2900      	cmp	r1, #0
 8004bc8:	f000 80ac 	beq.w	8004d24 <_dtoa_r+0x7b4>
 8004bcc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004bd0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004bd4:	461c      	mov	r4, r3
 8004bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8004bd8:	9b05      	ldr	r3, [sp, #20]
 8004bda:	4413      	add	r3, r2
 8004bdc:	9305      	str	r3, [sp, #20]
 8004bde:	9b06      	ldr	r3, [sp, #24]
 8004be0:	2101      	movs	r1, #1
 8004be2:	4413      	add	r3, r2
 8004be4:	4630      	mov	r0, r6
 8004be6:	9306      	str	r3, [sp, #24]
 8004be8:	f000 fb5a 	bl	80052a0 <__i2b>
 8004bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bee:	4607      	mov	r7, r0
 8004bf0:	f1b8 0f00 	cmp.w	r8, #0
 8004bf4:	dd0d      	ble.n	8004c12 <_dtoa_r+0x6a2>
 8004bf6:	9a06      	ldr	r2, [sp, #24]
 8004bf8:	2a00      	cmp	r2, #0
 8004bfa:	dd0a      	ble.n	8004c12 <_dtoa_r+0x6a2>
 8004bfc:	4542      	cmp	r2, r8
 8004bfe:	9905      	ldr	r1, [sp, #20]
 8004c00:	bfa8      	it	ge
 8004c02:	4642      	movge	r2, r8
 8004c04:	1a89      	subs	r1, r1, r2
 8004c06:	9105      	str	r1, [sp, #20]
 8004c08:	9906      	ldr	r1, [sp, #24]
 8004c0a:	eba8 0802 	sub.w	r8, r8, r2
 8004c0e:	1a8a      	subs	r2, r1, r2
 8004c10:	9206      	str	r2, [sp, #24]
 8004c12:	b303      	cbz	r3, 8004c56 <_dtoa_r+0x6e6>
 8004c14:	9a08      	ldr	r2, [sp, #32]
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	f000 80a6 	beq.w	8004d68 <_dtoa_r+0x7f8>
 8004c1c:	2c00      	cmp	r4, #0
 8004c1e:	dd13      	ble.n	8004c48 <_dtoa_r+0x6d8>
 8004c20:	4639      	mov	r1, r7
 8004c22:	4622      	mov	r2, r4
 8004c24:	4630      	mov	r0, r6
 8004c26:	930c      	str	r3, [sp, #48]	; 0x30
 8004c28:	f000 fbf6 	bl	8005418 <__pow5mult>
 8004c2c:	462a      	mov	r2, r5
 8004c2e:	4601      	mov	r1, r0
 8004c30:	4607      	mov	r7, r0
 8004c32:	4630      	mov	r0, r6
 8004c34:	f000 fb4a 	bl	80052cc <__multiply>
 8004c38:	4629      	mov	r1, r5
 8004c3a:	900a      	str	r0, [sp, #40]	; 0x28
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f000 fa73 	bl	8005128 <_Bfree>
 8004c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c46:	4615      	mov	r5, r2
 8004c48:	1b1a      	subs	r2, r3, r4
 8004c4a:	d004      	beq.n	8004c56 <_dtoa_r+0x6e6>
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f000 fbe2 	bl	8005418 <__pow5mult>
 8004c54:	4605      	mov	r5, r0
 8004c56:	2101      	movs	r1, #1
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f000 fb21 	bl	80052a0 <__i2b>
 8004c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	4604      	mov	r4, r0
 8004c64:	f340 8082 	ble.w	8004d6c <_dtoa_r+0x7fc>
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	f000 fbd3 	bl	8005418 <__pow5mult>
 8004c72:	9b07      	ldr	r3, [sp, #28]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	4604      	mov	r4, r0
 8004c78:	dd7b      	ble.n	8004d72 <_dtoa_r+0x802>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	930a      	str	r3, [sp, #40]	; 0x28
 8004c7e:	6922      	ldr	r2, [r4, #16]
 8004c80:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004c84:	6910      	ldr	r0, [r2, #16]
 8004c86:	f000 fabb 	bl	8005200 <__hi0bits>
 8004c8a:	f1c0 0020 	rsb	r0, r0, #32
 8004c8e:	9b06      	ldr	r3, [sp, #24]
 8004c90:	4418      	add	r0, r3
 8004c92:	f010 001f 	ands.w	r0, r0, #31
 8004c96:	f000 808d 	beq.w	8004db4 <_dtoa_r+0x844>
 8004c9a:	f1c0 0220 	rsb	r2, r0, #32
 8004c9e:	2a04      	cmp	r2, #4
 8004ca0:	f340 8086 	ble.w	8004db0 <_dtoa_r+0x840>
 8004ca4:	f1c0 001c 	rsb	r0, r0, #28
 8004ca8:	9b05      	ldr	r3, [sp, #20]
 8004caa:	4403      	add	r3, r0
 8004cac:	9305      	str	r3, [sp, #20]
 8004cae:	9b06      	ldr	r3, [sp, #24]
 8004cb0:	4403      	add	r3, r0
 8004cb2:	4480      	add	r8, r0
 8004cb4:	9306      	str	r3, [sp, #24]
 8004cb6:	9b05      	ldr	r3, [sp, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	dd05      	ble.n	8004cc8 <_dtoa_r+0x758>
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	f000 fc03 	bl	80054cc <__lshift>
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	9b06      	ldr	r3, [sp, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	dd05      	ble.n	8004cda <_dtoa_r+0x76a>
 8004cce:	4621      	mov	r1, r4
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	f000 fbfa 	bl	80054cc <__lshift>
 8004cd8:	4604      	mov	r4, r0
 8004cda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d06b      	beq.n	8004db8 <_dtoa_r+0x848>
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f000 fc5e 	bl	80055a4 <__mcmp>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	da65      	bge.n	8004db8 <_dtoa_r+0x848>
 8004cec:	2300      	movs	r3, #0
 8004cee:	4629      	mov	r1, r5
 8004cf0:	220a      	movs	r2, #10
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f000 fa3a 	bl	800516c <__multadd>
 8004cf8:	9b08      	ldr	r3, [sp, #32]
 8004cfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004cfe:	4605      	mov	r5, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8192 	beq.w	800502a <_dtoa_r+0xaba>
 8004d06:	4639      	mov	r1, r7
 8004d08:	2300      	movs	r3, #0
 8004d0a:	220a      	movs	r2, #10
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	f000 fa2d 	bl	800516c <__multadd>
 8004d12:	f1ba 0f00 	cmp.w	sl, #0
 8004d16:	4607      	mov	r7, r0
 8004d18:	f300 808e 	bgt.w	8004e38 <_dtoa_r+0x8c8>
 8004d1c:	9b07      	ldr	r3, [sp, #28]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	dc51      	bgt.n	8004dc6 <_dtoa_r+0x856>
 8004d22:	e089      	b.n	8004e38 <_dtoa_r+0x8c8>
 8004d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004d2a:	e751      	b.n	8004bd0 <_dtoa_r+0x660>
 8004d2c:	f109 34ff 	add.w	r4, r9, #4294967295
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	bfbf      	itttt	lt
 8004d34:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004d36:	1ae3      	sublt	r3, r4, r3
 8004d38:	18d2      	addlt	r2, r2, r3
 8004d3a:	4613      	movlt	r3, r2
 8004d3c:	bfb7      	itett	lt
 8004d3e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004d40:	1b1c      	subge	r4, r3, r4
 8004d42:	4623      	movlt	r3, r4
 8004d44:	2400      	movlt	r4, #0
 8004d46:	f1b9 0f00 	cmp.w	r9, #0
 8004d4a:	bfb5      	itete	lt
 8004d4c:	9a05      	ldrlt	r2, [sp, #20]
 8004d4e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8004d52:	eba2 0809 	sublt.w	r8, r2, r9
 8004d56:	464a      	movge	r2, r9
 8004d58:	bfb8      	it	lt
 8004d5a:	2200      	movlt	r2, #0
 8004d5c:	e73b      	b.n	8004bd6 <_dtoa_r+0x666>
 8004d5e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004d62:	9f08      	ldr	r7, [sp, #32]
 8004d64:	461c      	mov	r4, r3
 8004d66:	e743      	b.n	8004bf0 <_dtoa_r+0x680>
 8004d68:	461a      	mov	r2, r3
 8004d6a:	e76f      	b.n	8004c4c <_dtoa_r+0x6dc>
 8004d6c:	9b07      	ldr	r3, [sp, #28]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	dc18      	bgt.n	8004da4 <_dtoa_r+0x834>
 8004d72:	9b02      	ldr	r3, [sp, #8]
 8004d74:	b9b3      	cbnz	r3, 8004da4 <_dtoa_r+0x834>
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004d7c:	b9a2      	cbnz	r2, 8004da8 <_dtoa_r+0x838>
 8004d7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d82:	0d12      	lsrs	r2, r2, #20
 8004d84:	0512      	lsls	r2, r2, #20
 8004d86:	b18a      	cbz	r2, 8004dac <_dtoa_r+0x83c>
 8004d88:	9b05      	ldr	r3, [sp, #20]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	9305      	str	r3, [sp, #20]
 8004d8e:	9b06      	ldr	r3, [sp, #24]
 8004d90:	3301      	adds	r3, #1
 8004d92:	9306      	str	r3, [sp, #24]
 8004d94:	2301      	movs	r3, #1
 8004d96:	930a      	str	r3, [sp, #40]	; 0x28
 8004d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f47f af6f 	bne.w	8004c7e <_dtoa_r+0x70e>
 8004da0:	2001      	movs	r0, #1
 8004da2:	e774      	b.n	8004c8e <_dtoa_r+0x71e>
 8004da4:	2300      	movs	r3, #0
 8004da6:	e7f6      	b.n	8004d96 <_dtoa_r+0x826>
 8004da8:	9b02      	ldr	r3, [sp, #8]
 8004daa:	e7f4      	b.n	8004d96 <_dtoa_r+0x826>
 8004dac:	920a      	str	r2, [sp, #40]	; 0x28
 8004dae:	e7f3      	b.n	8004d98 <_dtoa_r+0x828>
 8004db0:	d081      	beq.n	8004cb6 <_dtoa_r+0x746>
 8004db2:	4610      	mov	r0, r2
 8004db4:	301c      	adds	r0, #28
 8004db6:	e777      	b.n	8004ca8 <_dtoa_r+0x738>
 8004db8:	f1b9 0f00 	cmp.w	r9, #0
 8004dbc:	dc37      	bgt.n	8004e2e <_dtoa_r+0x8be>
 8004dbe:	9b07      	ldr	r3, [sp, #28]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	dd34      	ble.n	8004e2e <_dtoa_r+0x8be>
 8004dc4:	46ca      	mov	sl, r9
 8004dc6:	f1ba 0f00 	cmp.w	sl, #0
 8004dca:	d10d      	bne.n	8004de8 <_dtoa_r+0x878>
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4653      	mov	r3, sl
 8004dd0:	2205      	movs	r2, #5
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	f000 f9ca 	bl	800516c <__multadd>
 8004dd8:	4601      	mov	r1, r0
 8004dda:	4604      	mov	r4, r0
 8004ddc:	4628      	mov	r0, r5
 8004dde:	f000 fbe1 	bl	80055a4 <__mcmp>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	f73f adde 	bgt.w	80049a4 <_dtoa_r+0x434>
 8004de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dea:	f8dd 8000 	ldr.w	r8, [sp]
 8004dee:	ea6f 0b03 	mvn.w	fp, r3
 8004df2:	f04f 0900 	mov.w	r9, #0
 8004df6:	4621      	mov	r1, r4
 8004df8:	4630      	mov	r0, r6
 8004dfa:	f000 f995 	bl	8005128 <_Bfree>
 8004dfe:	2f00      	cmp	r7, #0
 8004e00:	f43f aea7 	beq.w	8004b52 <_dtoa_r+0x5e2>
 8004e04:	f1b9 0f00 	cmp.w	r9, #0
 8004e08:	d005      	beq.n	8004e16 <_dtoa_r+0x8a6>
 8004e0a:	45b9      	cmp	r9, r7
 8004e0c:	d003      	beq.n	8004e16 <_dtoa_r+0x8a6>
 8004e0e:	4649      	mov	r1, r9
 8004e10:	4630      	mov	r0, r6
 8004e12:	f000 f989 	bl	8005128 <_Bfree>
 8004e16:	4639      	mov	r1, r7
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f000 f985 	bl	8005128 <_Bfree>
 8004e1e:	e698      	b.n	8004b52 <_dtoa_r+0x5e2>
 8004e20:	2400      	movs	r4, #0
 8004e22:	4627      	mov	r7, r4
 8004e24:	e7e0      	b.n	8004de8 <_dtoa_r+0x878>
 8004e26:	46bb      	mov	fp, r7
 8004e28:	4604      	mov	r4, r0
 8004e2a:	4607      	mov	r7, r0
 8004e2c:	e5ba      	b.n	80049a4 <_dtoa_r+0x434>
 8004e2e:	9b08      	ldr	r3, [sp, #32]
 8004e30:	46ca      	mov	sl, r9
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8100 	beq.w	8005038 <_dtoa_r+0xac8>
 8004e38:	f1b8 0f00 	cmp.w	r8, #0
 8004e3c:	dd05      	ble.n	8004e4a <_dtoa_r+0x8da>
 8004e3e:	4639      	mov	r1, r7
 8004e40:	4642      	mov	r2, r8
 8004e42:	4630      	mov	r0, r6
 8004e44:	f000 fb42 	bl	80054cc <__lshift>
 8004e48:	4607      	mov	r7, r0
 8004e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d05d      	beq.n	8004f0c <_dtoa_r+0x99c>
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4630      	mov	r0, r6
 8004e54:	f000 f928 	bl	80050a8 <_Balloc>
 8004e58:	4680      	mov	r8, r0
 8004e5a:	b928      	cbnz	r0, 8004e68 <_dtoa_r+0x8f8>
 8004e5c:	4b82      	ldr	r3, [pc, #520]	; (8005068 <_dtoa_r+0xaf8>)
 8004e5e:	4602      	mov	r2, r0
 8004e60:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004e64:	f7ff bb9a 	b.w	800459c <_dtoa_r+0x2c>
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	3202      	adds	r2, #2
 8004e6c:	0092      	lsls	r2, r2, #2
 8004e6e:	f107 010c 	add.w	r1, r7, #12
 8004e72:	300c      	adds	r0, #12
 8004e74:	f000 f90a 	bl	800508c <memcpy>
 8004e78:	2201      	movs	r2, #1
 8004e7a:	4641      	mov	r1, r8
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f000 fb25 	bl	80054cc <__lshift>
 8004e82:	9b00      	ldr	r3, [sp, #0]
 8004e84:	3301      	adds	r3, #1
 8004e86:	9305      	str	r3, [sp, #20]
 8004e88:	9b00      	ldr	r3, [sp, #0]
 8004e8a:	4453      	add	r3, sl
 8004e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8e:	9b02      	ldr	r3, [sp, #8]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	46b9      	mov	r9, r7
 8004e96:	9308      	str	r3, [sp, #32]
 8004e98:	4607      	mov	r7, r0
 8004e9a:	9b05      	ldr	r3, [sp, #20]
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	9302      	str	r3, [sp, #8]
 8004ea4:	f7ff fad6 	bl	8004454 <quorem>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	3330      	adds	r3, #48	; 0x30
 8004eac:	9006      	str	r0, [sp, #24]
 8004eae:	4649      	mov	r1, r9
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8004eb4:	f000 fb76 	bl	80055a4 <__mcmp>
 8004eb8:	463a      	mov	r2, r7
 8004eba:	4682      	mov	sl, r0
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f000 fb8c 	bl	80055dc <__mdiff>
 8004ec4:	68c2      	ldr	r2, [r0, #12]
 8004ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ec8:	4680      	mov	r8, r0
 8004eca:	bb0a      	cbnz	r2, 8004f10 <_dtoa_r+0x9a0>
 8004ecc:	4601      	mov	r1, r0
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f000 fb68 	bl	80055a4 <__mcmp>
 8004ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	4641      	mov	r1, r8
 8004eda:	4630      	mov	r0, r6
 8004edc:	920e      	str	r2, [sp, #56]	; 0x38
 8004ede:	930a      	str	r3, [sp, #40]	; 0x28
 8004ee0:	f000 f922 	bl	8005128 <_Bfree>
 8004ee4:	9b07      	ldr	r3, [sp, #28]
 8004ee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ee8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004eec:	ea43 0102 	orr.w	r1, r3, r2
 8004ef0:	9b08      	ldr	r3, [sp, #32]
 8004ef2:	430b      	orrs	r3, r1
 8004ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef6:	d10d      	bne.n	8004f14 <_dtoa_r+0x9a4>
 8004ef8:	2b39      	cmp	r3, #57	; 0x39
 8004efa:	d029      	beq.n	8004f50 <_dtoa_r+0x9e0>
 8004efc:	f1ba 0f00 	cmp.w	sl, #0
 8004f00:	dd01      	ble.n	8004f06 <_dtoa_r+0x996>
 8004f02:	9b06      	ldr	r3, [sp, #24]
 8004f04:	3331      	adds	r3, #49	; 0x31
 8004f06:	9a02      	ldr	r2, [sp, #8]
 8004f08:	7013      	strb	r3, [r2, #0]
 8004f0a:	e774      	b.n	8004df6 <_dtoa_r+0x886>
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	e7b8      	b.n	8004e82 <_dtoa_r+0x912>
 8004f10:	2201      	movs	r2, #1
 8004f12:	e7e1      	b.n	8004ed8 <_dtoa_r+0x968>
 8004f14:	f1ba 0f00 	cmp.w	sl, #0
 8004f18:	db06      	blt.n	8004f28 <_dtoa_r+0x9b8>
 8004f1a:	9907      	ldr	r1, [sp, #28]
 8004f1c:	ea41 0a0a 	orr.w	sl, r1, sl
 8004f20:	9908      	ldr	r1, [sp, #32]
 8004f22:	ea5a 0101 	orrs.w	r1, sl, r1
 8004f26:	d120      	bne.n	8004f6a <_dtoa_r+0x9fa>
 8004f28:	2a00      	cmp	r2, #0
 8004f2a:	ddec      	ble.n	8004f06 <_dtoa_r+0x996>
 8004f2c:	4629      	mov	r1, r5
 8004f2e:	2201      	movs	r2, #1
 8004f30:	4630      	mov	r0, r6
 8004f32:	9305      	str	r3, [sp, #20]
 8004f34:	f000 faca 	bl	80054cc <__lshift>
 8004f38:	4621      	mov	r1, r4
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	f000 fb32 	bl	80055a4 <__mcmp>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	9b05      	ldr	r3, [sp, #20]
 8004f44:	dc02      	bgt.n	8004f4c <_dtoa_r+0x9dc>
 8004f46:	d1de      	bne.n	8004f06 <_dtoa_r+0x996>
 8004f48:	07da      	lsls	r2, r3, #31
 8004f4a:	d5dc      	bpl.n	8004f06 <_dtoa_r+0x996>
 8004f4c:	2b39      	cmp	r3, #57	; 0x39
 8004f4e:	d1d8      	bne.n	8004f02 <_dtoa_r+0x992>
 8004f50:	9a02      	ldr	r2, [sp, #8]
 8004f52:	2339      	movs	r3, #57	; 0x39
 8004f54:	7013      	strb	r3, [r2, #0]
 8004f56:	4643      	mov	r3, r8
 8004f58:	4698      	mov	r8, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8004f60:	2a39      	cmp	r2, #57	; 0x39
 8004f62:	d051      	beq.n	8005008 <_dtoa_r+0xa98>
 8004f64:	3201      	adds	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	e745      	b.n	8004df6 <_dtoa_r+0x886>
 8004f6a:	2a00      	cmp	r2, #0
 8004f6c:	dd03      	ble.n	8004f76 <_dtoa_r+0xa06>
 8004f6e:	2b39      	cmp	r3, #57	; 0x39
 8004f70:	d0ee      	beq.n	8004f50 <_dtoa_r+0x9e0>
 8004f72:	3301      	adds	r3, #1
 8004f74:	e7c7      	b.n	8004f06 <_dtoa_r+0x996>
 8004f76:	9a05      	ldr	r2, [sp, #20]
 8004f78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f7a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004f7e:	428a      	cmp	r2, r1
 8004f80:	d02b      	beq.n	8004fda <_dtoa_r+0xa6a>
 8004f82:	4629      	mov	r1, r5
 8004f84:	2300      	movs	r3, #0
 8004f86:	220a      	movs	r2, #10
 8004f88:	4630      	mov	r0, r6
 8004f8a:	f000 f8ef 	bl	800516c <__multadd>
 8004f8e:	45b9      	cmp	r9, r7
 8004f90:	4605      	mov	r5, r0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	f04f 020a 	mov.w	r2, #10
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	d107      	bne.n	8004fb0 <_dtoa_r+0xa40>
 8004fa0:	f000 f8e4 	bl	800516c <__multadd>
 8004fa4:	4681      	mov	r9, r0
 8004fa6:	4607      	mov	r7, r0
 8004fa8:	9b05      	ldr	r3, [sp, #20]
 8004faa:	3301      	adds	r3, #1
 8004fac:	9305      	str	r3, [sp, #20]
 8004fae:	e774      	b.n	8004e9a <_dtoa_r+0x92a>
 8004fb0:	f000 f8dc 	bl	800516c <__multadd>
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	4681      	mov	r9, r0
 8004fb8:	2300      	movs	r3, #0
 8004fba:	220a      	movs	r2, #10
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	f000 f8d5 	bl	800516c <__multadd>
 8004fc2:	4607      	mov	r7, r0
 8004fc4:	e7f0      	b.n	8004fa8 <_dtoa_r+0xa38>
 8004fc6:	f1ba 0f00 	cmp.w	sl, #0
 8004fca:	9a00      	ldr	r2, [sp, #0]
 8004fcc:	bfcc      	ite	gt
 8004fce:	46d0      	movgt	r8, sl
 8004fd0:	f04f 0801 	movle.w	r8, #1
 8004fd4:	4490      	add	r8, r2
 8004fd6:	f04f 0900 	mov.w	r9, #0
 8004fda:	4629      	mov	r1, r5
 8004fdc:	2201      	movs	r2, #1
 8004fde:	4630      	mov	r0, r6
 8004fe0:	9302      	str	r3, [sp, #8]
 8004fe2:	f000 fa73 	bl	80054cc <__lshift>
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	4605      	mov	r5, r0
 8004fea:	f000 fadb 	bl	80055a4 <__mcmp>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	dcb1      	bgt.n	8004f56 <_dtoa_r+0x9e6>
 8004ff2:	d102      	bne.n	8004ffa <_dtoa_r+0xa8a>
 8004ff4:	9b02      	ldr	r3, [sp, #8]
 8004ff6:	07db      	lsls	r3, r3, #31
 8004ff8:	d4ad      	bmi.n	8004f56 <_dtoa_r+0x9e6>
 8004ffa:	4643      	mov	r3, r8
 8004ffc:	4698      	mov	r8, r3
 8004ffe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005002:	2a30      	cmp	r2, #48	; 0x30
 8005004:	d0fa      	beq.n	8004ffc <_dtoa_r+0xa8c>
 8005006:	e6f6      	b.n	8004df6 <_dtoa_r+0x886>
 8005008:	9a00      	ldr	r2, [sp, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d1a4      	bne.n	8004f58 <_dtoa_r+0x9e8>
 800500e:	f10b 0b01 	add.w	fp, fp, #1
 8005012:	2331      	movs	r3, #49	; 0x31
 8005014:	e778      	b.n	8004f08 <_dtoa_r+0x998>
 8005016:	4b15      	ldr	r3, [pc, #84]	; (800506c <_dtoa_r+0xafc>)
 8005018:	f7ff bb12 	b.w	8004640 <_dtoa_r+0xd0>
 800501c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800501e:	2b00      	cmp	r3, #0
 8005020:	f47f aaee 	bne.w	8004600 <_dtoa_r+0x90>
 8005024:	4b12      	ldr	r3, [pc, #72]	; (8005070 <_dtoa_r+0xb00>)
 8005026:	f7ff bb0b 	b.w	8004640 <_dtoa_r+0xd0>
 800502a:	f1ba 0f00 	cmp.w	sl, #0
 800502e:	dc03      	bgt.n	8005038 <_dtoa_r+0xac8>
 8005030:	9b07      	ldr	r3, [sp, #28]
 8005032:	2b02      	cmp	r3, #2
 8005034:	f73f aec7 	bgt.w	8004dc6 <_dtoa_r+0x856>
 8005038:	f8dd 8000 	ldr.w	r8, [sp]
 800503c:	4621      	mov	r1, r4
 800503e:	4628      	mov	r0, r5
 8005040:	f7ff fa08 	bl	8004454 <quorem>
 8005044:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005048:	f808 3b01 	strb.w	r3, [r8], #1
 800504c:	9a00      	ldr	r2, [sp, #0]
 800504e:	eba8 0202 	sub.w	r2, r8, r2
 8005052:	4592      	cmp	sl, r2
 8005054:	ddb7      	ble.n	8004fc6 <_dtoa_r+0xa56>
 8005056:	4629      	mov	r1, r5
 8005058:	2300      	movs	r3, #0
 800505a:	220a      	movs	r2, #10
 800505c:	4630      	mov	r0, r6
 800505e:	f000 f885 	bl	800516c <__multadd>
 8005062:	4605      	mov	r5, r0
 8005064:	e7ea      	b.n	800503c <_dtoa_r+0xacc>
 8005066:	bf00      	nop
 8005068:	08006887 	.word	0x08006887
 800506c:	080067e0 	.word	0x080067e0
 8005070:	08006804 	.word	0x08006804

08005074 <_localeconv_r>:
 8005074:	4800      	ldr	r0, [pc, #0]	; (8005078 <_localeconv_r+0x4>)
 8005076:	4770      	bx	lr
 8005078:	20000160 	.word	0x20000160

0800507c <malloc>:
 800507c:	4b02      	ldr	r3, [pc, #8]	; (8005088 <malloc+0xc>)
 800507e:	4601      	mov	r1, r0
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	f000 bbef 	b.w	8005864 <_malloc_r>
 8005086:	bf00      	nop
 8005088:	2000000c 	.word	0x2000000c

0800508c <memcpy>:
 800508c:	440a      	add	r2, r1
 800508e:	4291      	cmp	r1, r2
 8005090:	f100 33ff 	add.w	r3, r0, #4294967295
 8005094:	d100      	bne.n	8005098 <memcpy+0xc>
 8005096:	4770      	bx	lr
 8005098:	b510      	push	{r4, lr}
 800509a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800509e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050a2:	4291      	cmp	r1, r2
 80050a4:	d1f9      	bne.n	800509a <memcpy+0xe>
 80050a6:	bd10      	pop	{r4, pc}

080050a8 <_Balloc>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80050ac:	4604      	mov	r4, r0
 80050ae:	460d      	mov	r5, r1
 80050b0:	b976      	cbnz	r6, 80050d0 <_Balloc+0x28>
 80050b2:	2010      	movs	r0, #16
 80050b4:	f7ff ffe2 	bl	800507c <malloc>
 80050b8:	4602      	mov	r2, r0
 80050ba:	6260      	str	r0, [r4, #36]	; 0x24
 80050bc:	b920      	cbnz	r0, 80050c8 <_Balloc+0x20>
 80050be:	4b18      	ldr	r3, [pc, #96]	; (8005120 <_Balloc+0x78>)
 80050c0:	4818      	ldr	r0, [pc, #96]	; (8005124 <_Balloc+0x7c>)
 80050c2:	2166      	movs	r1, #102	; 0x66
 80050c4:	f000 fd94 	bl	8005bf0 <__assert_func>
 80050c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050cc:	6006      	str	r6, [r0, #0]
 80050ce:	60c6      	str	r6, [r0, #12]
 80050d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80050d2:	68f3      	ldr	r3, [r6, #12]
 80050d4:	b183      	cbz	r3, 80050f8 <_Balloc+0x50>
 80050d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050de:	b9b8      	cbnz	r0, 8005110 <_Balloc+0x68>
 80050e0:	2101      	movs	r1, #1
 80050e2:	fa01 f605 	lsl.w	r6, r1, r5
 80050e6:	1d72      	adds	r2, r6, #5
 80050e8:	0092      	lsls	r2, r2, #2
 80050ea:	4620      	mov	r0, r4
 80050ec:	f000 fb5a 	bl	80057a4 <_calloc_r>
 80050f0:	b160      	cbz	r0, 800510c <_Balloc+0x64>
 80050f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050f6:	e00e      	b.n	8005116 <_Balloc+0x6e>
 80050f8:	2221      	movs	r2, #33	; 0x21
 80050fa:	2104      	movs	r1, #4
 80050fc:	4620      	mov	r0, r4
 80050fe:	f000 fb51 	bl	80057a4 <_calloc_r>
 8005102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005104:	60f0      	str	r0, [r6, #12]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e4      	bne.n	80050d6 <_Balloc+0x2e>
 800510c:	2000      	movs	r0, #0
 800510e:	bd70      	pop	{r4, r5, r6, pc}
 8005110:	6802      	ldr	r2, [r0, #0]
 8005112:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005116:	2300      	movs	r3, #0
 8005118:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800511c:	e7f7      	b.n	800510e <_Balloc+0x66>
 800511e:	bf00      	nop
 8005120:	08006811 	.word	0x08006811
 8005124:	08006898 	.word	0x08006898

08005128 <_Bfree>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800512c:	4605      	mov	r5, r0
 800512e:	460c      	mov	r4, r1
 8005130:	b976      	cbnz	r6, 8005150 <_Bfree+0x28>
 8005132:	2010      	movs	r0, #16
 8005134:	f7ff ffa2 	bl	800507c <malloc>
 8005138:	4602      	mov	r2, r0
 800513a:	6268      	str	r0, [r5, #36]	; 0x24
 800513c:	b920      	cbnz	r0, 8005148 <_Bfree+0x20>
 800513e:	4b09      	ldr	r3, [pc, #36]	; (8005164 <_Bfree+0x3c>)
 8005140:	4809      	ldr	r0, [pc, #36]	; (8005168 <_Bfree+0x40>)
 8005142:	218a      	movs	r1, #138	; 0x8a
 8005144:	f000 fd54 	bl	8005bf0 <__assert_func>
 8005148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800514c:	6006      	str	r6, [r0, #0]
 800514e:	60c6      	str	r6, [r0, #12]
 8005150:	b13c      	cbz	r4, 8005162 <_Bfree+0x3a>
 8005152:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005154:	6862      	ldr	r2, [r4, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800515c:	6021      	str	r1, [r4, #0]
 800515e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	08006811 	.word	0x08006811
 8005168:	08006898 	.word	0x08006898

0800516c <__multadd>:
 800516c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005170:	690e      	ldr	r6, [r1, #16]
 8005172:	4607      	mov	r7, r0
 8005174:	4698      	mov	r8, r3
 8005176:	460c      	mov	r4, r1
 8005178:	f101 0014 	add.w	r0, r1, #20
 800517c:	2300      	movs	r3, #0
 800517e:	6805      	ldr	r5, [r0, #0]
 8005180:	b2a9      	uxth	r1, r5
 8005182:	fb02 8101 	mla	r1, r2, r1, r8
 8005186:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800518a:	0c2d      	lsrs	r5, r5, #16
 800518c:	fb02 c505 	mla	r5, r2, r5, ip
 8005190:	b289      	uxth	r1, r1
 8005192:	3301      	adds	r3, #1
 8005194:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005198:	429e      	cmp	r6, r3
 800519a:	f840 1b04 	str.w	r1, [r0], #4
 800519e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80051a2:	dcec      	bgt.n	800517e <__multadd+0x12>
 80051a4:	f1b8 0f00 	cmp.w	r8, #0
 80051a8:	d022      	beq.n	80051f0 <__multadd+0x84>
 80051aa:	68a3      	ldr	r3, [r4, #8]
 80051ac:	42b3      	cmp	r3, r6
 80051ae:	dc19      	bgt.n	80051e4 <__multadd+0x78>
 80051b0:	6861      	ldr	r1, [r4, #4]
 80051b2:	4638      	mov	r0, r7
 80051b4:	3101      	adds	r1, #1
 80051b6:	f7ff ff77 	bl	80050a8 <_Balloc>
 80051ba:	4605      	mov	r5, r0
 80051bc:	b928      	cbnz	r0, 80051ca <__multadd+0x5e>
 80051be:	4602      	mov	r2, r0
 80051c0:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <__multadd+0x8c>)
 80051c2:	480e      	ldr	r0, [pc, #56]	; (80051fc <__multadd+0x90>)
 80051c4:	21b5      	movs	r1, #181	; 0xb5
 80051c6:	f000 fd13 	bl	8005bf0 <__assert_func>
 80051ca:	6922      	ldr	r2, [r4, #16]
 80051cc:	3202      	adds	r2, #2
 80051ce:	f104 010c 	add.w	r1, r4, #12
 80051d2:	0092      	lsls	r2, r2, #2
 80051d4:	300c      	adds	r0, #12
 80051d6:	f7ff ff59 	bl	800508c <memcpy>
 80051da:	4621      	mov	r1, r4
 80051dc:	4638      	mov	r0, r7
 80051de:	f7ff ffa3 	bl	8005128 <_Bfree>
 80051e2:	462c      	mov	r4, r5
 80051e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80051e8:	3601      	adds	r6, #1
 80051ea:	f8c3 8014 	str.w	r8, [r3, #20]
 80051ee:	6126      	str	r6, [r4, #16]
 80051f0:	4620      	mov	r0, r4
 80051f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f6:	bf00      	nop
 80051f8:	08006887 	.word	0x08006887
 80051fc:	08006898 	.word	0x08006898

08005200 <__hi0bits>:
 8005200:	0c03      	lsrs	r3, r0, #16
 8005202:	041b      	lsls	r3, r3, #16
 8005204:	b9d3      	cbnz	r3, 800523c <__hi0bits+0x3c>
 8005206:	0400      	lsls	r0, r0, #16
 8005208:	2310      	movs	r3, #16
 800520a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800520e:	bf04      	itt	eq
 8005210:	0200      	lsleq	r0, r0, #8
 8005212:	3308      	addeq	r3, #8
 8005214:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005218:	bf04      	itt	eq
 800521a:	0100      	lsleq	r0, r0, #4
 800521c:	3304      	addeq	r3, #4
 800521e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005222:	bf04      	itt	eq
 8005224:	0080      	lsleq	r0, r0, #2
 8005226:	3302      	addeq	r3, #2
 8005228:	2800      	cmp	r0, #0
 800522a:	db05      	blt.n	8005238 <__hi0bits+0x38>
 800522c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005230:	f103 0301 	add.w	r3, r3, #1
 8005234:	bf08      	it	eq
 8005236:	2320      	moveq	r3, #32
 8005238:	4618      	mov	r0, r3
 800523a:	4770      	bx	lr
 800523c:	2300      	movs	r3, #0
 800523e:	e7e4      	b.n	800520a <__hi0bits+0xa>

08005240 <__lo0bits>:
 8005240:	6803      	ldr	r3, [r0, #0]
 8005242:	f013 0207 	ands.w	r2, r3, #7
 8005246:	4601      	mov	r1, r0
 8005248:	d00b      	beq.n	8005262 <__lo0bits+0x22>
 800524a:	07da      	lsls	r2, r3, #31
 800524c:	d424      	bmi.n	8005298 <__lo0bits+0x58>
 800524e:	0798      	lsls	r0, r3, #30
 8005250:	bf49      	itett	mi
 8005252:	085b      	lsrmi	r3, r3, #1
 8005254:	089b      	lsrpl	r3, r3, #2
 8005256:	2001      	movmi	r0, #1
 8005258:	600b      	strmi	r3, [r1, #0]
 800525a:	bf5c      	itt	pl
 800525c:	600b      	strpl	r3, [r1, #0]
 800525e:	2002      	movpl	r0, #2
 8005260:	4770      	bx	lr
 8005262:	b298      	uxth	r0, r3
 8005264:	b9b0      	cbnz	r0, 8005294 <__lo0bits+0x54>
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	2010      	movs	r0, #16
 800526a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800526e:	bf04      	itt	eq
 8005270:	0a1b      	lsreq	r3, r3, #8
 8005272:	3008      	addeq	r0, #8
 8005274:	071a      	lsls	r2, r3, #28
 8005276:	bf04      	itt	eq
 8005278:	091b      	lsreq	r3, r3, #4
 800527a:	3004      	addeq	r0, #4
 800527c:	079a      	lsls	r2, r3, #30
 800527e:	bf04      	itt	eq
 8005280:	089b      	lsreq	r3, r3, #2
 8005282:	3002      	addeq	r0, #2
 8005284:	07da      	lsls	r2, r3, #31
 8005286:	d403      	bmi.n	8005290 <__lo0bits+0x50>
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	f100 0001 	add.w	r0, r0, #1
 800528e:	d005      	beq.n	800529c <__lo0bits+0x5c>
 8005290:	600b      	str	r3, [r1, #0]
 8005292:	4770      	bx	lr
 8005294:	4610      	mov	r0, r2
 8005296:	e7e8      	b.n	800526a <__lo0bits+0x2a>
 8005298:	2000      	movs	r0, #0
 800529a:	4770      	bx	lr
 800529c:	2020      	movs	r0, #32
 800529e:	4770      	bx	lr

080052a0 <__i2b>:
 80052a0:	b510      	push	{r4, lr}
 80052a2:	460c      	mov	r4, r1
 80052a4:	2101      	movs	r1, #1
 80052a6:	f7ff feff 	bl	80050a8 <_Balloc>
 80052aa:	4602      	mov	r2, r0
 80052ac:	b928      	cbnz	r0, 80052ba <__i2b+0x1a>
 80052ae:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <__i2b+0x24>)
 80052b0:	4805      	ldr	r0, [pc, #20]	; (80052c8 <__i2b+0x28>)
 80052b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80052b6:	f000 fc9b 	bl	8005bf0 <__assert_func>
 80052ba:	2301      	movs	r3, #1
 80052bc:	6144      	str	r4, [r0, #20]
 80052be:	6103      	str	r3, [r0, #16]
 80052c0:	bd10      	pop	{r4, pc}
 80052c2:	bf00      	nop
 80052c4:	08006887 	.word	0x08006887
 80052c8:	08006898 	.word	0x08006898

080052cc <__multiply>:
 80052cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d0:	4614      	mov	r4, r2
 80052d2:	690a      	ldr	r2, [r1, #16]
 80052d4:	6923      	ldr	r3, [r4, #16]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	bfb8      	it	lt
 80052da:	460b      	movlt	r3, r1
 80052dc:	460d      	mov	r5, r1
 80052de:	bfbc      	itt	lt
 80052e0:	4625      	movlt	r5, r4
 80052e2:	461c      	movlt	r4, r3
 80052e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80052e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80052ec:	68ab      	ldr	r3, [r5, #8]
 80052ee:	6869      	ldr	r1, [r5, #4]
 80052f0:	eb0a 0709 	add.w	r7, sl, r9
 80052f4:	42bb      	cmp	r3, r7
 80052f6:	b085      	sub	sp, #20
 80052f8:	bfb8      	it	lt
 80052fa:	3101      	addlt	r1, #1
 80052fc:	f7ff fed4 	bl	80050a8 <_Balloc>
 8005300:	b930      	cbnz	r0, 8005310 <__multiply+0x44>
 8005302:	4602      	mov	r2, r0
 8005304:	4b42      	ldr	r3, [pc, #264]	; (8005410 <__multiply+0x144>)
 8005306:	4843      	ldr	r0, [pc, #268]	; (8005414 <__multiply+0x148>)
 8005308:	f240 115d 	movw	r1, #349	; 0x15d
 800530c:	f000 fc70 	bl	8005bf0 <__assert_func>
 8005310:	f100 0614 	add.w	r6, r0, #20
 8005314:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005318:	4633      	mov	r3, r6
 800531a:	2200      	movs	r2, #0
 800531c:	4543      	cmp	r3, r8
 800531e:	d31e      	bcc.n	800535e <__multiply+0x92>
 8005320:	f105 0c14 	add.w	ip, r5, #20
 8005324:	f104 0314 	add.w	r3, r4, #20
 8005328:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800532c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005330:	9202      	str	r2, [sp, #8]
 8005332:	ebac 0205 	sub.w	r2, ip, r5
 8005336:	3a15      	subs	r2, #21
 8005338:	f022 0203 	bic.w	r2, r2, #3
 800533c:	3204      	adds	r2, #4
 800533e:	f105 0115 	add.w	r1, r5, #21
 8005342:	458c      	cmp	ip, r1
 8005344:	bf38      	it	cc
 8005346:	2204      	movcc	r2, #4
 8005348:	9201      	str	r2, [sp, #4]
 800534a:	9a02      	ldr	r2, [sp, #8]
 800534c:	9303      	str	r3, [sp, #12]
 800534e:	429a      	cmp	r2, r3
 8005350:	d808      	bhi.n	8005364 <__multiply+0x98>
 8005352:	2f00      	cmp	r7, #0
 8005354:	dc55      	bgt.n	8005402 <__multiply+0x136>
 8005356:	6107      	str	r7, [r0, #16]
 8005358:	b005      	add	sp, #20
 800535a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535e:	f843 2b04 	str.w	r2, [r3], #4
 8005362:	e7db      	b.n	800531c <__multiply+0x50>
 8005364:	f8b3 a000 	ldrh.w	sl, [r3]
 8005368:	f1ba 0f00 	cmp.w	sl, #0
 800536c:	d020      	beq.n	80053b0 <__multiply+0xe4>
 800536e:	f105 0e14 	add.w	lr, r5, #20
 8005372:	46b1      	mov	r9, r6
 8005374:	2200      	movs	r2, #0
 8005376:	f85e 4b04 	ldr.w	r4, [lr], #4
 800537a:	f8d9 b000 	ldr.w	fp, [r9]
 800537e:	b2a1      	uxth	r1, r4
 8005380:	fa1f fb8b 	uxth.w	fp, fp
 8005384:	fb0a b101 	mla	r1, sl, r1, fp
 8005388:	4411      	add	r1, r2
 800538a:	f8d9 2000 	ldr.w	r2, [r9]
 800538e:	0c24      	lsrs	r4, r4, #16
 8005390:	0c12      	lsrs	r2, r2, #16
 8005392:	fb0a 2404 	mla	r4, sl, r4, r2
 8005396:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800539a:	b289      	uxth	r1, r1
 800539c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80053a0:	45f4      	cmp	ip, lr
 80053a2:	f849 1b04 	str.w	r1, [r9], #4
 80053a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80053aa:	d8e4      	bhi.n	8005376 <__multiply+0xaa>
 80053ac:	9901      	ldr	r1, [sp, #4]
 80053ae:	5072      	str	r2, [r6, r1]
 80053b0:	9a03      	ldr	r2, [sp, #12]
 80053b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80053b6:	3304      	adds	r3, #4
 80053b8:	f1b9 0f00 	cmp.w	r9, #0
 80053bc:	d01f      	beq.n	80053fe <__multiply+0x132>
 80053be:	6834      	ldr	r4, [r6, #0]
 80053c0:	f105 0114 	add.w	r1, r5, #20
 80053c4:	46b6      	mov	lr, r6
 80053c6:	f04f 0a00 	mov.w	sl, #0
 80053ca:	880a      	ldrh	r2, [r1, #0]
 80053cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80053d0:	fb09 b202 	mla	r2, r9, r2, fp
 80053d4:	4492      	add	sl, r2
 80053d6:	b2a4      	uxth	r4, r4
 80053d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80053dc:	f84e 4b04 	str.w	r4, [lr], #4
 80053e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80053e4:	f8be 2000 	ldrh.w	r2, [lr]
 80053e8:	0c24      	lsrs	r4, r4, #16
 80053ea:	fb09 2404 	mla	r4, r9, r4, r2
 80053ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80053f2:	458c      	cmp	ip, r1
 80053f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80053f8:	d8e7      	bhi.n	80053ca <__multiply+0xfe>
 80053fa:	9a01      	ldr	r2, [sp, #4]
 80053fc:	50b4      	str	r4, [r6, r2]
 80053fe:	3604      	adds	r6, #4
 8005400:	e7a3      	b.n	800534a <__multiply+0x7e>
 8005402:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1a5      	bne.n	8005356 <__multiply+0x8a>
 800540a:	3f01      	subs	r7, #1
 800540c:	e7a1      	b.n	8005352 <__multiply+0x86>
 800540e:	bf00      	nop
 8005410:	08006887 	.word	0x08006887
 8005414:	08006898 	.word	0x08006898

08005418 <__pow5mult>:
 8005418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800541c:	4615      	mov	r5, r2
 800541e:	f012 0203 	ands.w	r2, r2, #3
 8005422:	4606      	mov	r6, r0
 8005424:	460f      	mov	r7, r1
 8005426:	d007      	beq.n	8005438 <__pow5mult+0x20>
 8005428:	4c25      	ldr	r4, [pc, #148]	; (80054c0 <__pow5mult+0xa8>)
 800542a:	3a01      	subs	r2, #1
 800542c:	2300      	movs	r3, #0
 800542e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005432:	f7ff fe9b 	bl	800516c <__multadd>
 8005436:	4607      	mov	r7, r0
 8005438:	10ad      	asrs	r5, r5, #2
 800543a:	d03d      	beq.n	80054b8 <__pow5mult+0xa0>
 800543c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800543e:	b97c      	cbnz	r4, 8005460 <__pow5mult+0x48>
 8005440:	2010      	movs	r0, #16
 8005442:	f7ff fe1b 	bl	800507c <malloc>
 8005446:	4602      	mov	r2, r0
 8005448:	6270      	str	r0, [r6, #36]	; 0x24
 800544a:	b928      	cbnz	r0, 8005458 <__pow5mult+0x40>
 800544c:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <__pow5mult+0xac>)
 800544e:	481e      	ldr	r0, [pc, #120]	; (80054c8 <__pow5mult+0xb0>)
 8005450:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005454:	f000 fbcc 	bl	8005bf0 <__assert_func>
 8005458:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800545c:	6004      	str	r4, [r0, #0]
 800545e:	60c4      	str	r4, [r0, #12]
 8005460:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005464:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005468:	b94c      	cbnz	r4, 800547e <__pow5mult+0x66>
 800546a:	f240 2171 	movw	r1, #625	; 0x271
 800546e:	4630      	mov	r0, r6
 8005470:	f7ff ff16 	bl	80052a0 <__i2b>
 8005474:	2300      	movs	r3, #0
 8005476:	f8c8 0008 	str.w	r0, [r8, #8]
 800547a:	4604      	mov	r4, r0
 800547c:	6003      	str	r3, [r0, #0]
 800547e:	f04f 0900 	mov.w	r9, #0
 8005482:	07eb      	lsls	r3, r5, #31
 8005484:	d50a      	bpl.n	800549c <__pow5mult+0x84>
 8005486:	4639      	mov	r1, r7
 8005488:	4622      	mov	r2, r4
 800548a:	4630      	mov	r0, r6
 800548c:	f7ff ff1e 	bl	80052cc <__multiply>
 8005490:	4639      	mov	r1, r7
 8005492:	4680      	mov	r8, r0
 8005494:	4630      	mov	r0, r6
 8005496:	f7ff fe47 	bl	8005128 <_Bfree>
 800549a:	4647      	mov	r7, r8
 800549c:	106d      	asrs	r5, r5, #1
 800549e:	d00b      	beq.n	80054b8 <__pow5mult+0xa0>
 80054a0:	6820      	ldr	r0, [r4, #0]
 80054a2:	b938      	cbnz	r0, 80054b4 <__pow5mult+0x9c>
 80054a4:	4622      	mov	r2, r4
 80054a6:	4621      	mov	r1, r4
 80054a8:	4630      	mov	r0, r6
 80054aa:	f7ff ff0f 	bl	80052cc <__multiply>
 80054ae:	6020      	str	r0, [r4, #0]
 80054b0:	f8c0 9000 	str.w	r9, [r0]
 80054b4:	4604      	mov	r4, r0
 80054b6:	e7e4      	b.n	8005482 <__pow5mult+0x6a>
 80054b8:	4638      	mov	r0, r7
 80054ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054be:	bf00      	nop
 80054c0:	080069e8 	.word	0x080069e8
 80054c4:	08006811 	.word	0x08006811
 80054c8:	08006898 	.word	0x08006898

080054cc <__lshift>:
 80054cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d0:	460c      	mov	r4, r1
 80054d2:	6849      	ldr	r1, [r1, #4]
 80054d4:	6923      	ldr	r3, [r4, #16]
 80054d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80054da:	68a3      	ldr	r3, [r4, #8]
 80054dc:	4607      	mov	r7, r0
 80054de:	4691      	mov	r9, r2
 80054e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80054e4:	f108 0601 	add.w	r6, r8, #1
 80054e8:	42b3      	cmp	r3, r6
 80054ea:	db0b      	blt.n	8005504 <__lshift+0x38>
 80054ec:	4638      	mov	r0, r7
 80054ee:	f7ff fddb 	bl	80050a8 <_Balloc>
 80054f2:	4605      	mov	r5, r0
 80054f4:	b948      	cbnz	r0, 800550a <__lshift+0x3e>
 80054f6:	4602      	mov	r2, r0
 80054f8:	4b28      	ldr	r3, [pc, #160]	; (800559c <__lshift+0xd0>)
 80054fa:	4829      	ldr	r0, [pc, #164]	; (80055a0 <__lshift+0xd4>)
 80054fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005500:	f000 fb76 	bl	8005bf0 <__assert_func>
 8005504:	3101      	adds	r1, #1
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	e7ee      	b.n	80054e8 <__lshift+0x1c>
 800550a:	2300      	movs	r3, #0
 800550c:	f100 0114 	add.w	r1, r0, #20
 8005510:	f100 0210 	add.w	r2, r0, #16
 8005514:	4618      	mov	r0, r3
 8005516:	4553      	cmp	r3, sl
 8005518:	db33      	blt.n	8005582 <__lshift+0xb6>
 800551a:	6920      	ldr	r0, [r4, #16]
 800551c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005520:	f104 0314 	add.w	r3, r4, #20
 8005524:	f019 091f 	ands.w	r9, r9, #31
 8005528:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800552c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005530:	d02b      	beq.n	800558a <__lshift+0xbe>
 8005532:	f1c9 0e20 	rsb	lr, r9, #32
 8005536:	468a      	mov	sl, r1
 8005538:	2200      	movs	r2, #0
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	fa00 f009 	lsl.w	r0, r0, r9
 8005540:	4302      	orrs	r2, r0
 8005542:	f84a 2b04 	str.w	r2, [sl], #4
 8005546:	f853 2b04 	ldr.w	r2, [r3], #4
 800554a:	459c      	cmp	ip, r3
 800554c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005550:	d8f3      	bhi.n	800553a <__lshift+0x6e>
 8005552:	ebac 0304 	sub.w	r3, ip, r4
 8005556:	3b15      	subs	r3, #21
 8005558:	f023 0303 	bic.w	r3, r3, #3
 800555c:	3304      	adds	r3, #4
 800555e:	f104 0015 	add.w	r0, r4, #21
 8005562:	4584      	cmp	ip, r0
 8005564:	bf38      	it	cc
 8005566:	2304      	movcc	r3, #4
 8005568:	50ca      	str	r2, [r1, r3]
 800556a:	b10a      	cbz	r2, 8005570 <__lshift+0xa4>
 800556c:	f108 0602 	add.w	r6, r8, #2
 8005570:	3e01      	subs	r6, #1
 8005572:	4638      	mov	r0, r7
 8005574:	612e      	str	r6, [r5, #16]
 8005576:	4621      	mov	r1, r4
 8005578:	f7ff fdd6 	bl	8005128 <_Bfree>
 800557c:	4628      	mov	r0, r5
 800557e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005582:	f842 0f04 	str.w	r0, [r2, #4]!
 8005586:	3301      	adds	r3, #1
 8005588:	e7c5      	b.n	8005516 <__lshift+0x4a>
 800558a:	3904      	subs	r1, #4
 800558c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005590:	f841 2f04 	str.w	r2, [r1, #4]!
 8005594:	459c      	cmp	ip, r3
 8005596:	d8f9      	bhi.n	800558c <__lshift+0xc0>
 8005598:	e7ea      	b.n	8005570 <__lshift+0xa4>
 800559a:	bf00      	nop
 800559c:	08006887 	.word	0x08006887
 80055a0:	08006898 	.word	0x08006898

080055a4 <__mcmp>:
 80055a4:	b530      	push	{r4, r5, lr}
 80055a6:	6902      	ldr	r2, [r0, #16]
 80055a8:	690c      	ldr	r4, [r1, #16]
 80055aa:	1b12      	subs	r2, r2, r4
 80055ac:	d10e      	bne.n	80055cc <__mcmp+0x28>
 80055ae:	f100 0314 	add.w	r3, r0, #20
 80055b2:	3114      	adds	r1, #20
 80055b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80055b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80055bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80055c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80055c4:	42a5      	cmp	r5, r4
 80055c6:	d003      	beq.n	80055d0 <__mcmp+0x2c>
 80055c8:	d305      	bcc.n	80055d6 <__mcmp+0x32>
 80055ca:	2201      	movs	r2, #1
 80055cc:	4610      	mov	r0, r2
 80055ce:	bd30      	pop	{r4, r5, pc}
 80055d0:	4283      	cmp	r3, r0
 80055d2:	d3f3      	bcc.n	80055bc <__mcmp+0x18>
 80055d4:	e7fa      	b.n	80055cc <__mcmp+0x28>
 80055d6:	f04f 32ff 	mov.w	r2, #4294967295
 80055da:	e7f7      	b.n	80055cc <__mcmp+0x28>

080055dc <__mdiff>:
 80055dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e0:	460c      	mov	r4, r1
 80055e2:	4606      	mov	r6, r0
 80055e4:	4611      	mov	r1, r2
 80055e6:	4620      	mov	r0, r4
 80055e8:	4617      	mov	r7, r2
 80055ea:	f7ff ffdb 	bl	80055a4 <__mcmp>
 80055ee:	1e05      	subs	r5, r0, #0
 80055f0:	d110      	bne.n	8005614 <__mdiff+0x38>
 80055f2:	4629      	mov	r1, r5
 80055f4:	4630      	mov	r0, r6
 80055f6:	f7ff fd57 	bl	80050a8 <_Balloc>
 80055fa:	b930      	cbnz	r0, 800560a <__mdiff+0x2e>
 80055fc:	4b39      	ldr	r3, [pc, #228]	; (80056e4 <__mdiff+0x108>)
 80055fe:	4602      	mov	r2, r0
 8005600:	f240 2132 	movw	r1, #562	; 0x232
 8005604:	4838      	ldr	r0, [pc, #224]	; (80056e8 <__mdiff+0x10c>)
 8005606:	f000 faf3 	bl	8005bf0 <__assert_func>
 800560a:	2301      	movs	r3, #1
 800560c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005614:	bfa4      	itt	ge
 8005616:	463b      	movge	r3, r7
 8005618:	4627      	movge	r7, r4
 800561a:	4630      	mov	r0, r6
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	bfa6      	itte	ge
 8005620:	461c      	movge	r4, r3
 8005622:	2500      	movge	r5, #0
 8005624:	2501      	movlt	r5, #1
 8005626:	f7ff fd3f 	bl	80050a8 <_Balloc>
 800562a:	b920      	cbnz	r0, 8005636 <__mdiff+0x5a>
 800562c:	4b2d      	ldr	r3, [pc, #180]	; (80056e4 <__mdiff+0x108>)
 800562e:	4602      	mov	r2, r0
 8005630:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005634:	e7e6      	b.n	8005604 <__mdiff+0x28>
 8005636:	693e      	ldr	r6, [r7, #16]
 8005638:	60c5      	str	r5, [r0, #12]
 800563a:	6925      	ldr	r5, [r4, #16]
 800563c:	f107 0114 	add.w	r1, r7, #20
 8005640:	f104 0914 	add.w	r9, r4, #20
 8005644:	f100 0e14 	add.w	lr, r0, #20
 8005648:	f107 0210 	add.w	r2, r7, #16
 800564c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005650:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005654:	46f2      	mov	sl, lr
 8005656:	2700      	movs	r7, #0
 8005658:	f859 3b04 	ldr.w	r3, [r9], #4
 800565c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005660:	fa1f f883 	uxth.w	r8, r3
 8005664:	fa17 f78b 	uxtah	r7, r7, fp
 8005668:	0c1b      	lsrs	r3, r3, #16
 800566a:	eba7 0808 	sub.w	r8, r7, r8
 800566e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005672:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005676:	fa1f f888 	uxth.w	r8, r8
 800567a:	141f      	asrs	r7, r3, #16
 800567c:	454d      	cmp	r5, r9
 800567e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005682:	f84a 3b04 	str.w	r3, [sl], #4
 8005686:	d8e7      	bhi.n	8005658 <__mdiff+0x7c>
 8005688:	1b2b      	subs	r3, r5, r4
 800568a:	3b15      	subs	r3, #21
 800568c:	f023 0303 	bic.w	r3, r3, #3
 8005690:	3304      	adds	r3, #4
 8005692:	3415      	adds	r4, #21
 8005694:	42a5      	cmp	r5, r4
 8005696:	bf38      	it	cc
 8005698:	2304      	movcc	r3, #4
 800569a:	4419      	add	r1, r3
 800569c:	4473      	add	r3, lr
 800569e:	469e      	mov	lr, r3
 80056a0:	460d      	mov	r5, r1
 80056a2:	4565      	cmp	r5, ip
 80056a4:	d30e      	bcc.n	80056c4 <__mdiff+0xe8>
 80056a6:	f10c 0203 	add.w	r2, ip, #3
 80056aa:	1a52      	subs	r2, r2, r1
 80056ac:	f022 0203 	bic.w	r2, r2, #3
 80056b0:	3903      	subs	r1, #3
 80056b2:	458c      	cmp	ip, r1
 80056b4:	bf38      	it	cc
 80056b6:	2200      	movcc	r2, #0
 80056b8:	441a      	add	r2, r3
 80056ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80056be:	b17b      	cbz	r3, 80056e0 <__mdiff+0x104>
 80056c0:	6106      	str	r6, [r0, #16]
 80056c2:	e7a5      	b.n	8005610 <__mdiff+0x34>
 80056c4:	f855 8b04 	ldr.w	r8, [r5], #4
 80056c8:	fa17 f488 	uxtah	r4, r7, r8
 80056cc:	1422      	asrs	r2, r4, #16
 80056ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80056d2:	b2a4      	uxth	r4, r4
 80056d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80056d8:	f84e 4b04 	str.w	r4, [lr], #4
 80056dc:	1417      	asrs	r7, r2, #16
 80056de:	e7e0      	b.n	80056a2 <__mdiff+0xc6>
 80056e0:	3e01      	subs	r6, #1
 80056e2:	e7ea      	b.n	80056ba <__mdiff+0xde>
 80056e4:	08006887 	.word	0x08006887
 80056e8:	08006898 	.word	0x08006898

080056ec <__d2b>:
 80056ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80056f0:	4689      	mov	r9, r1
 80056f2:	2101      	movs	r1, #1
 80056f4:	ec57 6b10 	vmov	r6, r7, d0
 80056f8:	4690      	mov	r8, r2
 80056fa:	f7ff fcd5 	bl	80050a8 <_Balloc>
 80056fe:	4604      	mov	r4, r0
 8005700:	b930      	cbnz	r0, 8005710 <__d2b+0x24>
 8005702:	4602      	mov	r2, r0
 8005704:	4b25      	ldr	r3, [pc, #148]	; (800579c <__d2b+0xb0>)
 8005706:	4826      	ldr	r0, [pc, #152]	; (80057a0 <__d2b+0xb4>)
 8005708:	f240 310a 	movw	r1, #778	; 0x30a
 800570c:	f000 fa70 	bl	8005bf0 <__assert_func>
 8005710:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005714:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005718:	bb35      	cbnz	r5, 8005768 <__d2b+0x7c>
 800571a:	2e00      	cmp	r6, #0
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	d028      	beq.n	8005772 <__d2b+0x86>
 8005720:	4668      	mov	r0, sp
 8005722:	9600      	str	r6, [sp, #0]
 8005724:	f7ff fd8c 	bl	8005240 <__lo0bits>
 8005728:	9900      	ldr	r1, [sp, #0]
 800572a:	b300      	cbz	r0, 800576e <__d2b+0x82>
 800572c:	9a01      	ldr	r2, [sp, #4]
 800572e:	f1c0 0320 	rsb	r3, r0, #32
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	430b      	orrs	r3, r1
 8005738:	40c2      	lsrs	r2, r0
 800573a:	6163      	str	r3, [r4, #20]
 800573c:	9201      	str	r2, [sp, #4]
 800573e:	9b01      	ldr	r3, [sp, #4]
 8005740:	61a3      	str	r3, [r4, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	bf14      	ite	ne
 8005746:	2202      	movne	r2, #2
 8005748:	2201      	moveq	r2, #1
 800574a:	6122      	str	r2, [r4, #16]
 800574c:	b1d5      	cbz	r5, 8005784 <__d2b+0x98>
 800574e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005752:	4405      	add	r5, r0
 8005754:	f8c9 5000 	str.w	r5, [r9]
 8005758:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800575c:	f8c8 0000 	str.w	r0, [r8]
 8005760:	4620      	mov	r0, r4
 8005762:	b003      	add	sp, #12
 8005764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800576c:	e7d5      	b.n	800571a <__d2b+0x2e>
 800576e:	6161      	str	r1, [r4, #20]
 8005770:	e7e5      	b.n	800573e <__d2b+0x52>
 8005772:	a801      	add	r0, sp, #4
 8005774:	f7ff fd64 	bl	8005240 <__lo0bits>
 8005778:	9b01      	ldr	r3, [sp, #4]
 800577a:	6163      	str	r3, [r4, #20]
 800577c:	2201      	movs	r2, #1
 800577e:	6122      	str	r2, [r4, #16]
 8005780:	3020      	adds	r0, #32
 8005782:	e7e3      	b.n	800574c <__d2b+0x60>
 8005784:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005788:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800578c:	f8c9 0000 	str.w	r0, [r9]
 8005790:	6918      	ldr	r0, [r3, #16]
 8005792:	f7ff fd35 	bl	8005200 <__hi0bits>
 8005796:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800579a:	e7df      	b.n	800575c <__d2b+0x70>
 800579c:	08006887 	.word	0x08006887
 80057a0:	08006898 	.word	0x08006898

080057a4 <_calloc_r>:
 80057a4:	b513      	push	{r0, r1, r4, lr}
 80057a6:	434a      	muls	r2, r1
 80057a8:	4611      	mov	r1, r2
 80057aa:	9201      	str	r2, [sp, #4]
 80057ac:	f000 f85a 	bl	8005864 <_malloc_r>
 80057b0:	4604      	mov	r4, r0
 80057b2:	b118      	cbz	r0, 80057bc <_calloc_r+0x18>
 80057b4:	9a01      	ldr	r2, [sp, #4]
 80057b6:	2100      	movs	r1, #0
 80057b8:	f7fe f9ce 	bl	8003b58 <memset>
 80057bc:	4620      	mov	r0, r4
 80057be:	b002      	add	sp, #8
 80057c0:	bd10      	pop	{r4, pc}
	...

080057c4 <_free_r>:
 80057c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057c6:	2900      	cmp	r1, #0
 80057c8:	d048      	beq.n	800585c <_free_r+0x98>
 80057ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ce:	9001      	str	r0, [sp, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f1a1 0404 	sub.w	r4, r1, #4
 80057d6:	bfb8      	it	lt
 80057d8:	18e4      	addlt	r4, r4, r3
 80057da:	f000 fa65 	bl	8005ca8 <__malloc_lock>
 80057de:	4a20      	ldr	r2, [pc, #128]	; (8005860 <_free_r+0x9c>)
 80057e0:	9801      	ldr	r0, [sp, #4]
 80057e2:	6813      	ldr	r3, [r2, #0]
 80057e4:	4615      	mov	r5, r2
 80057e6:	b933      	cbnz	r3, 80057f6 <_free_r+0x32>
 80057e8:	6063      	str	r3, [r4, #4]
 80057ea:	6014      	str	r4, [r2, #0]
 80057ec:	b003      	add	sp, #12
 80057ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057f2:	f000 ba5f 	b.w	8005cb4 <__malloc_unlock>
 80057f6:	42a3      	cmp	r3, r4
 80057f8:	d90b      	bls.n	8005812 <_free_r+0x4e>
 80057fa:	6821      	ldr	r1, [r4, #0]
 80057fc:	1862      	adds	r2, r4, r1
 80057fe:	4293      	cmp	r3, r2
 8005800:	bf04      	itt	eq
 8005802:	681a      	ldreq	r2, [r3, #0]
 8005804:	685b      	ldreq	r3, [r3, #4]
 8005806:	6063      	str	r3, [r4, #4]
 8005808:	bf04      	itt	eq
 800580a:	1852      	addeq	r2, r2, r1
 800580c:	6022      	streq	r2, [r4, #0]
 800580e:	602c      	str	r4, [r5, #0]
 8005810:	e7ec      	b.n	80057ec <_free_r+0x28>
 8005812:	461a      	mov	r2, r3
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	b10b      	cbz	r3, 800581c <_free_r+0x58>
 8005818:	42a3      	cmp	r3, r4
 800581a:	d9fa      	bls.n	8005812 <_free_r+0x4e>
 800581c:	6811      	ldr	r1, [r2, #0]
 800581e:	1855      	adds	r5, r2, r1
 8005820:	42a5      	cmp	r5, r4
 8005822:	d10b      	bne.n	800583c <_free_r+0x78>
 8005824:	6824      	ldr	r4, [r4, #0]
 8005826:	4421      	add	r1, r4
 8005828:	1854      	adds	r4, r2, r1
 800582a:	42a3      	cmp	r3, r4
 800582c:	6011      	str	r1, [r2, #0]
 800582e:	d1dd      	bne.n	80057ec <_free_r+0x28>
 8005830:	681c      	ldr	r4, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	6053      	str	r3, [r2, #4]
 8005836:	4421      	add	r1, r4
 8005838:	6011      	str	r1, [r2, #0]
 800583a:	e7d7      	b.n	80057ec <_free_r+0x28>
 800583c:	d902      	bls.n	8005844 <_free_r+0x80>
 800583e:	230c      	movs	r3, #12
 8005840:	6003      	str	r3, [r0, #0]
 8005842:	e7d3      	b.n	80057ec <_free_r+0x28>
 8005844:	6825      	ldr	r5, [r4, #0]
 8005846:	1961      	adds	r1, r4, r5
 8005848:	428b      	cmp	r3, r1
 800584a:	bf04      	itt	eq
 800584c:	6819      	ldreq	r1, [r3, #0]
 800584e:	685b      	ldreq	r3, [r3, #4]
 8005850:	6063      	str	r3, [r4, #4]
 8005852:	bf04      	itt	eq
 8005854:	1949      	addeq	r1, r1, r5
 8005856:	6021      	streq	r1, [r4, #0]
 8005858:	6054      	str	r4, [r2, #4]
 800585a:	e7c7      	b.n	80057ec <_free_r+0x28>
 800585c:	b003      	add	sp, #12
 800585e:	bd30      	pop	{r4, r5, pc}
 8005860:	200002c8 	.word	0x200002c8

08005864 <_malloc_r>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	1ccd      	adds	r5, r1, #3
 8005868:	f025 0503 	bic.w	r5, r5, #3
 800586c:	3508      	adds	r5, #8
 800586e:	2d0c      	cmp	r5, #12
 8005870:	bf38      	it	cc
 8005872:	250c      	movcc	r5, #12
 8005874:	2d00      	cmp	r5, #0
 8005876:	4606      	mov	r6, r0
 8005878:	db01      	blt.n	800587e <_malloc_r+0x1a>
 800587a:	42a9      	cmp	r1, r5
 800587c:	d903      	bls.n	8005886 <_malloc_r+0x22>
 800587e:	230c      	movs	r3, #12
 8005880:	6033      	str	r3, [r6, #0]
 8005882:	2000      	movs	r0, #0
 8005884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005886:	f000 fa0f 	bl	8005ca8 <__malloc_lock>
 800588a:	4921      	ldr	r1, [pc, #132]	; (8005910 <_malloc_r+0xac>)
 800588c:	680a      	ldr	r2, [r1, #0]
 800588e:	4614      	mov	r4, r2
 8005890:	b99c      	cbnz	r4, 80058ba <_malloc_r+0x56>
 8005892:	4f20      	ldr	r7, [pc, #128]	; (8005914 <_malloc_r+0xb0>)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	b923      	cbnz	r3, 80058a2 <_malloc_r+0x3e>
 8005898:	4621      	mov	r1, r4
 800589a:	4630      	mov	r0, r6
 800589c:	f000 f998 	bl	8005bd0 <_sbrk_r>
 80058a0:	6038      	str	r0, [r7, #0]
 80058a2:	4629      	mov	r1, r5
 80058a4:	4630      	mov	r0, r6
 80058a6:	f000 f993 	bl	8005bd0 <_sbrk_r>
 80058aa:	1c43      	adds	r3, r0, #1
 80058ac:	d123      	bne.n	80058f6 <_malloc_r+0x92>
 80058ae:	230c      	movs	r3, #12
 80058b0:	6033      	str	r3, [r6, #0]
 80058b2:	4630      	mov	r0, r6
 80058b4:	f000 f9fe 	bl	8005cb4 <__malloc_unlock>
 80058b8:	e7e3      	b.n	8005882 <_malloc_r+0x1e>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	1b5b      	subs	r3, r3, r5
 80058be:	d417      	bmi.n	80058f0 <_malloc_r+0x8c>
 80058c0:	2b0b      	cmp	r3, #11
 80058c2:	d903      	bls.n	80058cc <_malloc_r+0x68>
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	441c      	add	r4, r3
 80058c8:	6025      	str	r5, [r4, #0]
 80058ca:	e004      	b.n	80058d6 <_malloc_r+0x72>
 80058cc:	6863      	ldr	r3, [r4, #4]
 80058ce:	42a2      	cmp	r2, r4
 80058d0:	bf0c      	ite	eq
 80058d2:	600b      	streq	r3, [r1, #0]
 80058d4:	6053      	strne	r3, [r2, #4]
 80058d6:	4630      	mov	r0, r6
 80058d8:	f000 f9ec 	bl	8005cb4 <__malloc_unlock>
 80058dc:	f104 000b 	add.w	r0, r4, #11
 80058e0:	1d23      	adds	r3, r4, #4
 80058e2:	f020 0007 	bic.w	r0, r0, #7
 80058e6:	1ac2      	subs	r2, r0, r3
 80058e8:	d0cc      	beq.n	8005884 <_malloc_r+0x20>
 80058ea:	1a1b      	subs	r3, r3, r0
 80058ec:	50a3      	str	r3, [r4, r2]
 80058ee:	e7c9      	b.n	8005884 <_malloc_r+0x20>
 80058f0:	4622      	mov	r2, r4
 80058f2:	6864      	ldr	r4, [r4, #4]
 80058f4:	e7cc      	b.n	8005890 <_malloc_r+0x2c>
 80058f6:	1cc4      	adds	r4, r0, #3
 80058f8:	f024 0403 	bic.w	r4, r4, #3
 80058fc:	42a0      	cmp	r0, r4
 80058fe:	d0e3      	beq.n	80058c8 <_malloc_r+0x64>
 8005900:	1a21      	subs	r1, r4, r0
 8005902:	4630      	mov	r0, r6
 8005904:	f000 f964 	bl	8005bd0 <_sbrk_r>
 8005908:	3001      	adds	r0, #1
 800590a:	d1dd      	bne.n	80058c8 <_malloc_r+0x64>
 800590c:	e7cf      	b.n	80058ae <_malloc_r+0x4a>
 800590e:	bf00      	nop
 8005910:	200002c8 	.word	0x200002c8
 8005914:	200002cc 	.word	0x200002cc

08005918 <__ssputs_r>:
 8005918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800591c:	688e      	ldr	r6, [r1, #8]
 800591e:	429e      	cmp	r6, r3
 8005920:	4682      	mov	sl, r0
 8005922:	460c      	mov	r4, r1
 8005924:	4690      	mov	r8, r2
 8005926:	461f      	mov	r7, r3
 8005928:	d838      	bhi.n	800599c <__ssputs_r+0x84>
 800592a:	898a      	ldrh	r2, [r1, #12]
 800592c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005930:	d032      	beq.n	8005998 <__ssputs_r+0x80>
 8005932:	6825      	ldr	r5, [r4, #0]
 8005934:	6909      	ldr	r1, [r1, #16]
 8005936:	eba5 0901 	sub.w	r9, r5, r1
 800593a:	6965      	ldr	r5, [r4, #20]
 800593c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005940:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005944:	3301      	adds	r3, #1
 8005946:	444b      	add	r3, r9
 8005948:	106d      	asrs	r5, r5, #1
 800594a:	429d      	cmp	r5, r3
 800594c:	bf38      	it	cc
 800594e:	461d      	movcc	r5, r3
 8005950:	0553      	lsls	r3, r2, #21
 8005952:	d531      	bpl.n	80059b8 <__ssputs_r+0xa0>
 8005954:	4629      	mov	r1, r5
 8005956:	f7ff ff85 	bl	8005864 <_malloc_r>
 800595a:	4606      	mov	r6, r0
 800595c:	b950      	cbnz	r0, 8005974 <__ssputs_r+0x5c>
 800595e:	230c      	movs	r3, #12
 8005960:	f8ca 3000 	str.w	r3, [sl]
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800596a:	81a3      	strh	r3, [r4, #12]
 800596c:	f04f 30ff 	mov.w	r0, #4294967295
 8005970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005974:	6921      	ldr	r1, [r4, #16]
 8005976:	464a      	mov	r2, r9
 8005978:	f7ff fb88 	bl	800508c <memcpy>
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005986:	81a3      	strh	r3, [r4, #12]
 8005988:	6126      	str	r6, [r4, #16]
 800598a:	6165      	str	r5, [r4, #20]
 800598c:	444e      	add	r6, r9
 800598e:	eba5 0509 	sub.w	r5, r5, r9
 8005992:	6026      	str	r6, [r4, #0]
 8005994:	60a5      	str	r5, [r4, #8]
 8005996:	463e      	mov	r6, r7
 8005998:	42be      	cmp	r6, r7
 800599a:	d900      	bls.n	800599e <__ssputs_r+0x86>
 800599c:	463e      	mov	r6, r7
 800599e:	4632      	mov	r2, r6
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	4641      	mov	r1, r8
 80059a4:	f000 f966 	bl	8005c74 <memmove>
 80059a8:	68a3      	ldr	r3, [r4, #8]
 80059aa:	6822      	ldr	r2, [r4, #0]
 80059ac:	1b9b      	subs	r3, r3, r6
 80059ae:	4432      	add	r2, r6
 80059b0:	60a3      	str	r3, [r4, #8]
 80059b2:	6022      	str	r2, [r4, #0]
 80059b4:	2000      	movs	r0, #0
 80059b6:	e7db      	b.n	8005970 <__ssputs_r+0x58>
 80059b8:	462a      	mov	r2, r5
 80059ba:	f000 f981 	bl	8005cc0 <_realloc_r>
 80059be:	4606      	mov	r6, r0
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d1e1      	bne.n	8005988 <__ssputs_r+0x70>
 80059c4:	6921      	ldr	r1, [r4, #16]
 80059c6:	4650      	mov	r0, sl
 80059c8:	f7ff fefc 	bl	80057c4 <_free_r>
 80059cc:	e7c7      	b.n	800595e <__ssputs_r+0x46>
	...

080059d0 <_svfiprintf_r>:
 80059d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d4:	4698      	mov	r8, r3
 80059d6:	898b      	ldrh	r3, [r1, #12]
 80059d8:	061b      	lsls	r3, r3, #24
 80059da:	b09d      	sub	sp, #116	; 0x74
 80059dc:	4607      	mov	r7, r0
 80059de:	460d      	mov	r5, r1
 80059e0:	4614      	mov	r4, r2
 80059e2:	d50e      	bpl.n	8005a02 <_svfiprintf_r+0x32>
 80059e4:	690b      	ldr	r3, [r1, #16]
 80059e6:	b963      	cbnz	r3, 8005a02 <_svfiprintf_r+0x32>
 80059e8:	2140      	movs	r1, #64	; 0x40
 80059ea:	f7ff ff3b 	bl	8005864 <_malloc_r>
 80059ee:	6028      	str	r0, [r5, #0]
 80059f0:	6128      	str	r0, [r5, #16]
 80059f2:	b920      	cbnz	r0, 80059fe <_svfiprintf_r+0x2e>
 80059f4:	230c      	movs	r3, #12
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295
 80059fc:	e0d1      	b.n	8005ba2 <_svfiprintf_r+0x1d2>
 80059fe:	2340      	movs	r3, #64	; 0x40
 8005a00:	616b      	str	r3, [r5, #20]
 8005a02:	2300      	movs	r3, #0
 8005a04:	9309      	str	r3, [sp, #36]	; 0x24
 8005a06:	2320      	movs	r3, #32
 8005a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a10:	2330      	movs	r3, #48	; 0x30
 8005a12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005bbc <_svfiprintf_r+0x1ec>
 8005a16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a1a:	f04f 0901 	mov.w	r9, #1
 8005a1e:	4623      	mov	r3, r4
 8005a20:	469a      	mov	sl, r3
 8005a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a26:	b10a      	cbz	r2, 8005a2c <_svfiprintf_r+0x5c>
 8005a28:	2a25      	cmp	r2, #37	; 0x25
 8005a2a:	d1f9      	bne.n	8005a20 <_svfiprintf_r+0x50>
 8005a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a30:	d00b      	beq.n	8005a4a <_svfiprintf_r+0x7a>
 8005a32:	465b      	mov	r3, fp
 8005a34:	4622      	mov	r2, r4
 8005a36:	4629      	mov	r1, r5
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f7ff ff6d 	bl	8005918 <__ssputs_r>
 8005a3e:	3001      	adds	r0, #1
 8005a40:	f000 80aa 	beq.w	8005b98 <_svfiprintf_r+0x1c8>
 8005a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a46:	445a      	add	r2, fp
 8005a48:	9209      	str	r2, [sp, #36]	; 0x24
 8005a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 80a2 	beq.w	8005b98 <_svfiprintf_r+0x1c8>
 8005a54:	2300      	movs	r3, #0
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a5e:	f10a 0a01 	add.w	sl, sl, #1
 8005a62:	9304      	str	r3, [sp, #16]
 8005a64:	9307      	str	r3, [sp, #28]
 8005a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a6c:	4654      	mov	r4, sl
 8005a6e:	2205      	movs	r2, #5
 8005a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a74:	4851      	ldr	r0, [pc, #324]	; (8005bbc <_svfiprintf_r+0x1ec>)
 8005a76:	f7fa fbeb 	bl	8000250 <memchr>
 8005a7a:	9a04      	ldr	r2, [sp, #16]
 8005a7c:	b9d8      	cbnz	r0, 8005ab6 <_svfiprintf_r+0xe6>
 8005a7e:	06d0      	lsls	r0, r2, #27
 8005a80:	bf44      	itt	mi
 8005a82:	2320      	movmi	r3, #32
 8005a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a88:	0711      	lsls	r1, r2, #28
 8005a8a:	bf44      	itt	mi
 8005a8c:	232b      	movmi	r3, #43	; 0x2b
 8005a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a92:	f89a 3000 	ldrb.w	r3, [sl]
 8005a96:	2b2a      	cmp	r3, #42	; 0x2a
 8005a98:	d015      	beq.n	8005ac6 <_svfiprintf_r+0xf6>
 8005a9a:	9a07      	ldr	r2, [sp, #28]
 8005a9c:	4654      	mov	r4, sl
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	f04f 0c0a 	mov.w	ip, #10
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aaa:	3b30      	subs	r3, #48	; 0x30
 8005aac:	2b09      	cmp	r3, #9
 8005aae:	d94e      	bls.n	8005b4e <_svfiprintf_r+0x17e>
 8005ab0:	b1b0      	cbz	r0, 8005ae0 <_svfiprintf_r+0x110>
 8005ab2:	9207      	str	r2, [sp, #28]
 8005ab4:	e014      	b.n	8005ae0 <_svfiprintf_r+0x110>
 8005ab6:	eba0 0308 	sub.w	r3, r0, r8
 8005aba:	fa09 f303 	lsl.w	r3, r9, r3
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	9304      	str	r3, [sp, #16]
 8005ac2:	46a2      	mov	sl, r4
 8005ac4:	e7d2      	b.n	8005a6c <_svfiprintf_r+0x9c>
 8005ac6:	9b03      	ldr	r3, [sp, #12]
 8005ac8:	1d19      	adds	r1, r3, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	9103      	str	r1, [sp, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bfbb      	ittet	lt
 8005ad2:	425b      	neglt	r3, r3
 8005ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ad8:	9307      	strge	r3, [sp, #28]
 8005ada:	9307      	strlt	r3, [sp, #28]
 8005adc:	bfb8      	it	lt
 8005ade:	9204      	strlt	r2, [sp, #16]
 8005ae0:	7823      	ldrb	r3, [r4, #0]
 8005ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ae4:	d10c      	bne.n	8005b00 <_svfiprintf_r+0x130>
 8005ae6:	7863      	ldrb	r3, [r4, #1]
 8005ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aea:	d135      	bne.n	8005b58 <_svfiprintf_r+0x188>
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	1d1a      	adds	r2, r3, #4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	9203      	str	r2, [sp, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bfb8      	it	lt
 8005af8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005afc:	3402      	adds	r4, #2
 8005afe:	9305      	str	r3, [sp, #20]
 8005b00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005bcc <_svfiprintf_r+0x1fc>
 8005b04:	7821      	ldrb	r1, [r4, #0]
 8005b06:	2203      	movs	r2, #3
 8005b08:	4650      	mov	r0, sl
 8005b0a:	f7fa fba1 	bl	8000250 <memchr>
 8005b0e:	b140      	cbz	r0, 8005b22 <_svfiprintf_r+0x152>
 8005b10:	2340      	movs	r3, #64	; 0x40
 8005b12:	eba0 000a 	sub.w	r0, r0, sl
 8005b16:	fa03 f000 	lsl.w	r0, r3, r0
 8005b1a:	9b04      	ldr	r3, [sp, #16]
 8005b1c:	4303      	orrs	r3, r0
 8005b1e:	3401      	adds	r4, #1
 8005b20:	9304      	str	r3, [sp, #16]
 8005b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b26:	4826      	ldr	r0, [pc, #152]	; (8005bc0 <_svfiprintf_r+0x1f0>)
 8005b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b2c:	2206      	movs	r2, #6
 8005b2e:	f7fa fb8f 	bl	8000250 <memchr>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	d038      	beq.n	8005ba8 <_svfiprintf_r+0x1d8>
 8005b36:	4b23      	ldr	r3, [pc, #140]	; (8005bc4 <_svfiprintf_r+0x1f4>)
 8005b38:	bb1b      	cbnz	r3, 8005b82 <_svfiprintf_r+0x1b2>
 8005b3a:	9b03      	ldr	r3, [sp, #12]
 8005b3c:	3307      	adds	r3, #7
 8005b3e:	f023 0307 	bic.w	r3, r3, #7
 8005b42:	3308      	adds	r3, #8
 8005b44:	9303      	str	r3, [sp, #12]
 8005b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b48:	4433      	add	r3, r6
 8005b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b4c:	e767      	b.n	8005a1e <_svfiprintf_r+0x4e>
 8005b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b52:	460c      	mov	r4, r1
 8005b54:	2001      	movs	r0, #1
 8005b56:	e7a5      	b.n	8005aa4 <_svfiprintf_r+0xd4>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	3401      	adds	r4, #1
 8005b5c:	9305      	str	r3, [sp, #20]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	f04f 0c0a 	mov.w	ip, #10
 8005b64:	4620      	mov	r0, r4
 8005b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b6a:	3a30      	subs	r2, #48	; 0x30
 8005b6c:	2a09      	cmp	r2, #9
 8005b6e:	d903      	bls.n	8005b78 <_svfiprintf_r+0x1a8>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0c5      	beq.n	8005b00 <_svfiprintf_r+0x130>
 8005b74:	9105      	str	r1, [sp, #20]
 8005b76:	e7c3      	b.n	8005b00 <_svfiprintf_r+0x130>
 8005b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e7f0      	b.n	8005b64 <_svfiprintf_r+0x194>
 8005b82:	ab03      	add	r3, sp, #12
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	462a      	mov	r2, r5
 8005b88:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <_svfiprintf_r+0x1f8>)
 8005b8a:	a904      	add	r1, sp, #16
 8005b8c:	4638      	mov	r0, r7
 8005b8e:	f7fe f87b 	bl	8003c88 <_printf_float>
 8005b92:	1c42      	adds	r2, r0, #1
 8005b94:	4606      	mov	r6, r0
 8005b96:	d1d6      	bne.n	8005b46 <_svfiprintf_r+0x176>
 8005b98:	89ab      	ldrh	r3, [r5, #12]
 8005b9a:	065b      	lsls	r3, r3, #25
 8005b9c:	f53f af2c 	bmi.w	80059f8 <_svfiprintf_r+0x28>
 8005ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ba2:	b01d      	add	sp, #116	; 0x74
 8005ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba8:	ab03      	add	r3, sp, #12
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	462a      	mov	r2, r5
 8005bae:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <_svfiprintf_r+0x1f8>)
 8005bb0:	a904      	add	r1, sp, #16
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	f7fe faf4 	bl	80041a0 <_printf_i>
 8005bb8:	e7eb      	b.n	8005b92 <_svfiprintf_r+0x1c2>
 8005bba:	bf00      	nop
 8005bbc:	080069f4 	.word	0x080069f4
 8005bc0:	080069fe 	.word	0x080069fe
 8005bc4:	08003c89 	.word	0x08003c89
 8005bc8:	08005919 	.word	0x08005919
 8005bcc:	080069fa 	.word	0x080069fa

08005bd0 <_sbrk_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	4d06      	ldr	r5, [pc, #24]	; (8005bec <_sbrk_r+0x1c>)
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	4608      	mov	r0, r1
 8005bda:	602b      	str	r3, [r5, #0]
 8005bdc:	f7fb f930 	bl	8000e40 <_sbrk>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d102      	bne.n	8005bea <_sbrk_r+0x1a>
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	b103      	cbz	r3, 8005bea <_sbrk_r+0x1a>
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	200002d4 	.word	0x200002d4

08005bf0 <__assert_func>:
 8005bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005bf2:	4614      	mov	r4, r2
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <__assert_func+0x2c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	68d8      	ldr	r0, [r3, #12]
 8005bfe:	b14c      	cbz	r4, 8005c14 <__assert_func+0x24>
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <__assert_func+0x30>)
 8005c02:	9100      	str	r1, [sp, #0]
 8005c04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c08:	4906      	ldr	r1, [pc, #24]	; (8005c24 <__assert_func+0x34>)
 8005c0a:	462b      	mov	r3, r5
 8005c0c:	f000 f80e 	bl	8005c2c <fiprintf>
 8005c10:	f000 faa4 	bl	800615c <abort>
 8005c14:	4b04      	ldr	r3, [pc, #16]	; (8005c28 <__assert_func+0x38>)
 8005c16:	461c      	mov	r4, r3
 8005c18:	e7f3      	b.n	8005c02 <__assert_func+0x12>
 8005c1a:	bf00      	nop
 8005c1c:	2000000c 	.word	0x2000000c
 8005c20:	08006a05 	.word	0x08006a05
 8005c24:	08006a12 	.word	0x08006a12
 8005c28:	08006a40 	.word	0x08006a40

08005c2c <fiprintf>:
 8005c2c:	b40e      	push	{r1, r2, r3}
 8005c2e:	b503      	push	{r0, r1, lr}
 8005c30:	4601      	mov	r1, r0
 8005c32:	ab03      	add	r3, sp, #12
 8005c34:	4805      	ldr	r0, [pc, #20]	; (8005c4c <fiprintf+0x20>)
 8005c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c3a:	6800      	ldr	r0, [r0, #0]
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	f000 f88f 	bl	8005d60 <_vfiprintf_r>
 8005c42:	b002      	add	sp, #8
 8005c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c48:	b003      	add	sp, #12
 8005c4a:	4770      	bx	lr
 8005c4c:	2000000c 	.word	0x2000000c

08005c50 <__ascii_mbtowc>:
 8005c50:	b082      	sub	sp, #8
 8005c52:	b901      	cbnz	r1, 8005c56 <__ascii_mbtowc+0x6>
 8005c54:	a901      	add	r1, sp, #4
 8005c56:	b142      	cbz	r2, 8005c6a <__ascii_mbtowc+0x1a>
 8005c58:	b14b      	cbz	r3, 8005c6e <__ascii_mbtowc+0x1e>
 8005c5a:	7813      	ldrb	r3, [r2, #0]
 8005c5c:	600b      	str	r3, [r1, #0]
 8005c5e:	7812      	ldrb	r2, [r2, #0]
 8005c60:	1e10      	subs	r0, r2, #0
 8005c62:	bf18      	it	ne
 8005c64:	2001      	movne	r0, #1
 8005c66:	b002      	add	sp, #8
 8005c68:	4770      	bx	lr
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	e7fb      	b.n	8005c66 <__ascii_mbtowc+0x16>
 8005c6e:	f06f 0001 	mvn.w	r0, #1
 8005c72:	e7f8      	b.n	8005c66 <__ascii_mbtowc+0x16>

08005c74 <memmove>:
 8005c74:	4288      	cmp	r0, r1
 8005c76:	b510      	push	{r4, lr}
 8005c78:	eb01 0402 	add.w	r4, r1, r2
 8005c7c:	d902      	bls.n	8005c84 <memmove+0x10>
 8005c7e:	4284      	cmp	r4, r0
 8005c80:	4623      	mov	r3, r4
 8005c82:	d807      	bhi.n	8005c94 <memmove+0x20>
 8005c84:	1e43      	subs	r3, r0, #1
 8005c86:	42a1      	cmp	r1, r4
 8005c88:	d008      	beq.n	8005c9c <memmove+0x28>
 8005c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c92:	e7f8      	b.n	8005c86 <memmove+0x12>
 8005c94:	4402      	add	r2, r0
 8005c96:	4601      	mov	r1, r0
 8005c98:	428a      	cmp	r2, r1
 8005c9a:	d100      	bne.n	8005c9e <memmove+0x2a>
 8005c9c:	bd10      	pop	{r4, pc}
 8005c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ca6:	e7f7      	b.n	8005c98 <memmove+0x24>

08005ca8 <__malloc_lock>:
 8005ca8:	4801      	ldr	r0, [pc, #4]	; (8005cb0 <__malloc_lock+0x8>)
 8005caa:	f000 bc17 	b.w	80064dc <__retarget_lock_acquire_recursive>
 8005cae:	bf00      	nop
 8005cb0:	200002dc 	.word	0x200002dc

08005cb4 <__malloc_unlock>:
 8005cb4:	4801      	ldr	r0, [pc, #4]	; (8005cbc <__malloc_unlock+0x8>)
 8005cb6:	f000 bc12 	b.w	80064de <__retarget_lock_release_recursive>
 8005cba:	bf00      	nop
 8005cbc:	200002dc 	.word	0x200002dc

08005cc0 <_realloc_r>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	460e      	mov	r6, r1
 8005cc8:	b921      	cbnz	r1, 8005cd4 <_realloc_r+0x14>
 8005cca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cce:	4611      	mov	r1, r2
 8005cd0:	f7ff bdc8 	b.w	8005864 <_malloc_r>
 8005cd4:	b922      	cbnz	r2, 8005ce0 <_realloc_r+0x20>
 8005cd6:	f7ff fd75 	bl	80057c4 <_free_r>
 8005cda:	4625      	mov	r5, r4
 8005cdc:	4628      	mov	r0, r5
 8005cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce0:	f000 fc62 	bl	80065a8 <_malloc_usable_size_r>
 8005ce4:	42a0      	cmp	r0, r4
 8005ce6:	d20f      	bcs.n	8005d08 <_realloc_r+0x48>
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4638      	mov	r0, r7
 8005cec:	f7ff fdba 	bl	8005864 <_malloc_r>
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d0f2      	beq.n	8005cdc <_realloc_r+0x1c>
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	f7ff f9c7 	bl	800508c <memcpy>
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4638      	mov	r0, r7
 8005d02:	f7ff fd5f 	bl	80057c4 <_free_r>
 8005d06:	e7e9      	b.n	8005cdc <_realloc_r+0x1c>
 8005d08:	4635      	mov	r5, r6
 8005d0a:	e7e7      	b.n	8005cdc <_realloc_r+0x1c>

08005d0c <__sfputc_r>:
 8005d0c:	6893      	ldr	r3, [r2, #8]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	b410      	push	{r4}
 8005d14:	6093      	str	r3, [r2, #8]
 8005d16:	da08      	bge.n	8005d2a <__sfputc_r+0x1e>
 8005d18:	6994      	ldr	r4, [r2, #24]
 8005d1a:	42a3      	cmp	r3, r4
 8005d1c:	db01      	blt.n	8005d22 <__sfputc_r+0x16>
 8005d1e:	290a      	cmp	r1, #10
 8005d20:	d103      	bne.n	8005d2a <__sfputc_r+0x1e>
 8005d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d26:	f000 b94b 	b.w	8005fc0 <__swbuf_r>
 8005d2a:	6813      	ldr	r3, [r2, #0]
 8005d2c:	1c58      	adds	r0, r3, #1
 8005d2e:	6010      	str	r0, [r2, #0]
 8005d30:	7019      	strb	r1, [r3, #0]
 8005d32:	4608      	mov	r0, r1
 8005d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <__sfputs_r>:
 8005d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	460f      	mov	r7, r1
 8005d40:	4614      	mov	r4, r2
 8005d42:	18d5      	adds	r5, r2, r3
 8005d44:	42ac      	cmp	r4, r5
 8005d46:	d101      	bne.n	8005d4c <__sfputs_r+0x12>
 8005d48:	2000      	movs	r0, #0
 8005d4a:	e007      	b.n	8005d5c <__sfputs_r+0x22>
 8005d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d50:	463a      	mov	r2, r7
 8005d52:	4630      	mov	r0, r6
 8005d54:	f7ff ffda 	bl	8005d0c <__sfputc_r>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d1f3      	bne.n	8005d44 <__sfputs_r+0xa>
 8005d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d60 <_vfiprintf_r>:
 8005d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	460d      	mov	r5, r1
 8005d66:	b09d      	sub	sp, #116	; 0x74
 8005d68:	4614      	mov	r4, r2
 8005d6a:	4698      	mov	r8, r3
 8005d6c:	4606      	mov	r6, r0
 8005d6e:	b118      	cbz	r0, 8005d78 <_vfiprintf_r+0x18>
 8005d70:	6983      	ldr	r3, [r0, #24]
 8005d72:	b90b      	cbnz	r3, 8005d78 <_vfiprintf_r+0x18>
 8005d74:	f000 fb14 	bl	80063a0 <__sinit>
 8005d78:	4b89      	ldr	r3, [pc, #548]	; (8005fa0 <_vfiprintf_r+0x240>)
 8005d7a:	429d      	cmp	r5, r3
 8005d7c:	d11b      	bne.n	8005db6 <_vfiprintf_r+0x56>
 8005d7e:	6875      	ldr	r5, [r6, #4]
 8005d80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d82:	07d9      	lsls	r1, r3, #31
 8005d84:	d405      	bmi.n	8005d92 <_vfiprintf_r+0x32>
 8005d86:	89ab      	ldrh	r3, [r5, #12]
 8005d88:	059a      	lsls	r2, r3, #22
 8005d8a:	d402      	bmi.n	8005d92 <_vfiprintf_r+0x32>
 8005d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d8e:	f000 fba5 	bl	80064dc <__retarget_lock_acquire_recursive>
 8005d92:	89ab      	ldrh	r3, [r5, #12]
 8005d94:	071b      	lsls	r3, r3, #28
 8005d96:	d501      	bpl.n	8005d9c <_vfiprintf_r+0x3c>
 8005d98:	692b      	ldr	r3, [r5, #16]
 8005d9a:	b9eb      	cbnz	r3, 8005dd8 <_vfiprintf_r+0x78>
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f000 f96e 	bl	8006080 <__swsetup_r>
 8005da4:	b1c0      	cbz	r0, 8005dd8 <_vfiprintf_r+0x78>
 8005da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da8:	07dc      	lsls	r4, r3, #31
 8005daa:	d50e      	bpl.n	8005dca <_vfiprintf_r+0x6a>
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295
 8005db0:	b01d      	add	sp, #116	; 0x74
 8005db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db6:	4b7b      	ldr	r3, [pc, #492]	; (8005fa4 <_vfiprintf_r+0x244>)
 8005db8:	429d      	cmp	r5, r3
 8005dba:	d101      	bne.n	8005dc0 <_vfiprintf_r+0x60>
 8005dbc:	68b5      	ldr	r5, [r6, #8]
 8005dbe:	e7df      	b.n	8005d80 <_vfiprintf_r+0x20>
 8005dc0:	4b79      	ldr	r3, [pc, #484]	; (8005fa8 <_vfiprintf_r+0x248>)
 8005dc2:	429d      	cmp	r5, r3
 8005dc4:	bf08      	it	eq
 8005dc6:	68f5      	ldreq	r5, [r6, #12]
 8005dc8:	e7da      	b.n	8005d80 <_vfiprintf_r+0x20>
 8005dca:	89ab      	ldrh	r3, [r5, #12]
 8005dcc:	0598      	lsls	r0, r3, #22
 8005dce:	d4ed      	bmi.n	8005dac <_vfiprintf_r+0x4c>
 8005dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dd2:	f000 fb84 	bl	80064de <__retarget_lock_release_recursive>
 8005dd6:	e7e9      	b.n	8005dac <_vfiprintf_r+0x4c>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9309      	str	r3, [sp, #36]	; 0x24
 8005ddc:	2320      	movs	r3, #32
 8005dde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005de6:	2330      	movs	r3, #48	; 0x30
 8005de8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005fac <_vfiprintf_r+0x24c>
 8005dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005df0:	f04f 0901 	mov.w	r9, #1
 8005df4:	4623      	mov	r3, r4
 8005df6:	469a      	mov	sl, r3
 8005df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dfc:	b10a      	cbz	r2, 8005e02 <_vfiprintf_r+0xa2>
 8005dfe:	2a25      	cmp	r2, #37	; 0x25
 8005e00:	d1f9      	bne.n	8005df6 <_vfiprintf_r+0x96>
 8005e02:	ebba 0b04 	subs.w	fp, sl, r4
 8005e06:	d00b      	beq.n	8005e20 <_vfiprintf_r+0xc0>
 8005e08:	465b      	mov	r3, fp
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	4630      	mov	r0, r6
 8005e10:	f7ff ff93 	bl	8005d3a <__sfputs_r>
 8005e14:	3001      	adds	r0, #1
 8005e16:	f000 80aa 	beq.w	8005f6e <_vfiprintf_r+0x20e>
 8005e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e1c:	445a      	add	r2, fp
 8005e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8005e20:	f89a 3000 	ldrb.w	r3, [sl]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 80a2 	beq.w	8005f6e <_vfiprintf_r+0x20e>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e34:	f10a 0a01 	add.w	sl, sl, #1
 8005e38:	9304      	str	r3, [sp, #16]
 8005e3a:	9307      	str	r3, [sp, #28]
 8005e3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e40:	931a      	str	r3, [sp, #104]	; 0x68
 8005e42:	4654      	mov	r4, sl
 8005e44:	2205      	movs	r2, #5
 8005e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e4a:	4858      	ldr	r0, [pc, #352]	; (8005fac <_vfiprintf_r+0x24c>)
 8005e4c:	f7fa fa00 	bl	8000250 <memchr>
 8005e50:	9a04      	ldr	r2, [sp, #16]
 8005e52:	b9d8      	cbnz	r0, 8005e8c <_vfiprintf_r+0x12c>
 8005e54:	06d1      	lsls	r1, r2, #27
 8005e56:	bf44      	itt	mi
 8005e58:	2320      	movmi	r3, #32
 8005e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e5e:	0713      	lsls	r3, r2, #28
 8005e60:	bf44      	itt	mi
 8005e62:	232b      	movmi	r3, #43	; 0x2b
 8005e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e68:	f89a 3000 	ldrb.w	r3, [sl]
 8005e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e6e:	d015      	beq.n	8005e9c <_vfiprintf_r+0x13c>
 8005e70:	9a07      	ldr	r2, [sp, #28]
 8005e72:	4654      	mov	r4, sl
 8005e74:	2000      	movs	r0, #0
 8005e76:	f04f 0c0a 	mov.w	ip, #10
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e80:	3b30      	subs	r3, #48	; 0x30
 8005e82:	2b09      	cmp	r3, #9
 8005e84:	d94e      	bls.n	8005f24 <_vfiprintf_r+0x1c4>
 8005e86:	b1b0      	cbz	r0, 8005eb6 <_vfiprintf_r+0x156>
 8005e88:	9207      	str	r2, [sp, #28]
 8005e8a:	e014      	b.n	8005eb6 <_vfiprintf_r+0x156>
 8005e8c:	eba0 0308 	sub.w	r3, r0, r8
 8005e90:	fa09 f303 	lsl.w	r3, r9, r3
 8005e94:	4313      	orrs	r3, r2
 8005e96:	9304      	str	r3, [sp, #16]
 8005e98:	46a2      	mov	sl, r4
 8005e9a:	e7d2      	b.n	8005e42 <_vfiprintf_r+0xe2>
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	1d19      	adds	r1, r3, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	9103      	str	r1, [sp, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bfbb      	ittet	lt
 8005ea8:	425b      	neglt	r3, r3
 8005eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8005eae:	9307      	strge	r3, [sp, #28]
 8005eb0:	9307      	strlt	r3, [sp, #28]
 8005eb2:	bfb8      	it	lt
 8005eb4:	9204      	strlt	r2, [sp, #16]
 8005eb6:	7823      	ldrb	r3, [r4, #0]
 8005eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8005eba:	d10c      	bne.n	8005ed6 <_vfiprintf_r+0x176>
 8005ebc:	7863      	ldrb	r3, [r4, #1]
 8005ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8005ec0:	d135      	bne.n	8005f2e <_vfiprintf_r+0x1ce>
 8005ec2:	9b03      	ldr	r3, [sp, #12]
 8005ec4:	1d1a      	adds	r2, r3, #4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	9203      	str	r2, [sp, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bfb8      	it	lt
 8005ece:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ed2:	3402      	adds	r4, #2
 8005ed4:	9305      	str	r3, [sp, #20]
 8005ed6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005fbc <_vfiprintf_r+0x25c>
 8005eda:	7821      	ldrb	r1, [r4, #0]
 8005edc:	2203      	movs	r2, #3
 8005ede:	4650      	mov	r0, sl
 8005ee0:	f7fa f9b6 	bl	8000250 <memchr>
 8005ee4:	b140      	cbz	r0, 8005ef8 <_vfiprintf_r+0x198>
 8005ee6:	2340      	movs	r3, #64	; 0x40
 8005ee8:	eba0 000a 	sub.w	r0, r0, sl
 8005eec:	fa03 f000 	lsl.w	r0, r3, r0
 8005ef0:	9b04      	ldr	r3, [sp, #16]
 8005ef2:	4303      	orrs	r3, r0
 8005ef4:	3401      	adds	r4, #1
 8005ef6:	9304      	str	r3, [sp, #16]
 8005ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005efc:	482c      	ldr	r0, [pc, #176]	; (8005fb0 <_vfiprintf_r+0x250>)
 8005efe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f02:	2206      	movs	r2, #6
 8005f04:	f7fa f9a4 	bl	8000250 <memchr>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d03f      	beq.n	8005f8c <_vfiprintf_r+0x22c>
 8005f0c:	4b29      	ldr	r3, [pc, #164]	; (8005fb4 <_vfiprintf_r+0x254>)
 8005f0e:	bb1b      	cbnz	r3, 8005f58 <_vfiprintf_r+0x1f8>
 8005f10:	9b03      	ldr	r3, [sp, #12]
 8005f12:	3307      	adds	r3, #7
 8005f14:	f023 0307 	bic.w	r3, r3, #7
 8005f18:	3308      	adds	r3, #8
 8005f1a:	9303      	str	r3, [sp, #12]
 8005f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f1e:	443b      	add	r3, r7
 8005f20:	9309      	str	r3, [sp, #36]	; 0x24
 8005f22:	e767      	b.n	8005df4 <_vfiprintf_r+0x94>
 8005f24:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f28:	460c      	mov	r4, r1
 8005f2a:	2001      	movs	r0, #1
 8005f2c:	e7a5      	b.n	8005e7a <_vfiprintf_r+0x11a>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	3401      	adds	r4, #1
 8005f32:	9305      	str	r3, [sp, #20]
 8005f34:	4619      	mov	r1, r3
 8005f36:	f04f 0c0a 	mov.w	ip, #10
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f40:	3a30      	subs	r2, #48	; 0x30
 8005f42:	2a09      	cmp	r2, #9
 8005f44:	d903      	bls.n	8005f4e <_vfiprintf_r+0x1ee>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0c5      	beq.n	8005ed6 <_vfiprintf_r+0x176>
 8005f4a:	9105      	str	r1, [sp, #20]
 8005f4c:	e7c3      	b.n	8005ed6 <_vfiprintf_r+0x176>
 8005f4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f52:	4604      	mov	r4, r0
 8005f54:	2301      	movs	r3, #1
 8005f56:	e7f0      	b.n	8005f3a <_vfiprintf_r+0x1da>
 8005f58:	ab03      	add	r3, sp, #12
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	462a      	mov	r2, r5
 8005f5e:	4b16      	ldr	r3, [pc, #88]	; (8005fb8 <_vfiprintf_r+0x258>)
 8005f60:	a904      	add	r1, sp, #16
 8005f62:	4630      	mov	r0, r6
 8005f64:	f7fd fe90 	bl	8003c88 <_printf_float>
 8005f68:	4607      	mov	r7, r0
 8005f6a:	1c78      	adds	r0, r7, #1
 8005f6c:	d1d6      	bne.n	8005f1c <_vfiprintf_r+0x1bc>
 8005f6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f70:	07d9      	lsls	r1, r3, #31
 8005f72:	d405      	bmi.n	8005f80 <_vfiprintf_r+0x220>
 8005f74:	89ab      	ldrh	r3, [r5, #12]
 8005f76:	059a      	lsls	r2, r3, #22
 8005f78:	d402      	bmi.n	8005f80 <_vfiprintf_r+0x220>
 8005f7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f7c:	f000 faaf 	bl	80064de <__retarget_lock_release_recursive>
 8005f80:	89ab      	ldrh	r3, [r5, #12]
 8005f82:	065b      	lsls	r3, r3, #25
 8005f84:	f53f af12 	bmi.w	8005dac <_vfiprintf_r+0x4c>
 8005f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f8a:	e711      	b.n	8005db0 <_vfiprintf_r+0x50>
 8005f8c:	ab03      	add	r3, sp, #12
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	462a      	mov	r2, r5
 8005f92:	4b09      	ldr	r3, [pc, #36]	; (8005fb8 <_vfiprintf_r+0x258>)
 8005f94:	a904      	add	r1, sp, #16
 8005f96:	4630      	mov	r0, r6
 8005f98:	f7fe f902 	bl	80041a0 <_printf_i>
 8005f9c:	e7e4      	b.n	8005f68 <_vfiprintf_r+0x208>
 8005f9e:	bf00      	nop
 8005fa0:	08006b6c 	.word	0x08006b6c
 8005fa4:	08006b8c 	.word	0x08006b8c
 8005fa8:	08006b4c 	.word	0x08006b4c
 8005fac:	080069f4 	.word	0x080069f4
 8005fb0:	080069fe 	.word	0x080069fe
 8005fb4:	08003c89 	.word	0x08003c89
 8005fb8:	08005d3b 	.word	0x08005d3b
 8005fbc:	080069fa 	.word	0x080069fa

08005fc0 <__swbuf_r>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	460e      	mov	r6, r1
 8005fc4:	4614      	mov	r4, r2
 8005fc6:	4605      	mov	r5, r0
 8005fc8:	b118      	cbz	r0, 8005fd2 <__swbuf_r+0x12>
 8005fca:	6983      	ldr	r3, [r0, #24]
 8005fcc:	b90b      	cbnz	r3, 8005fd2 <__swbuf_r+0x12>
 8005fce:	f000 f9e7 	bl	80063a0 <__sinit>
 8005fd2:	4b21      	ldr	r3, [pc, #132]	; (8006058 <__swbuf_r+0x98>)
 8005fd4:	429c      	cmp	r4, r3
 8005fd6:	d12b      	bne.n	8006030 <__swbuf_r+0x70>
 8005fd8:	686c      	ldr	r4, [r5, #4]
 8005fda:	69a3      	ldr	r3, [r4, #24]
 8005fdc:	60a3      	str	r3, [r4, #8]
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	071a      	lsls	r2, r3, #28
 8005fe2:	d52f      	bpl.n	8006044 <__swbuf_r+0x84>
 8005fe4:	6923      	ldr	r3, [r4, #16]
 8005fe6:	b36b      	cbz	r3, 8006044 <__swbuf_r+0x84>
 8005fe8:	6923      	ldr	r3, [r4, #16]
 8005fea:	6820      	ldr	r0, [r4, #0]
 8005fec:	1ac0      	subs	r0, r0, r3
 8005fee:	6963      	ldr	r3, [r4, #20]
 8005ff0:	b2f6      	uxtb	r6, r6
 8005ff2:	4283      	cmp	r3, r0
 8005ff4:	4637      	mov	r7, r6
 8005ff6:	dc04      	bgt.n	8006002 <__swbuf_r+0x42>
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 f93c 	bl	8006278 <_fflush_r>
 8006000:	bb30      	cbnz	r0, 8006050 <__swbuf_r+0x90>
 8006002:	68a3      	ldr	r3, [r4, #8]
 8006004:	3b01      	subs	r3, #1
 8006006:	60a3      	str	r3, [r4, #8]
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	6022      	str	r2, [r4, #0]
 800600e:	701e      	strb	r6, [r3, #0]
 8006010:	6963      	ldr	r3, [r4, #20]
 8006012:	3001      	adds	r0, #1
 8006014:	4283      	cmp	r3, r0
 8006016:	d004      	beq.n	8006022 <__swbuf_r+0x62>
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	07db      	lsls	r3, r3, #31
 800601c:	d506      	bpl.n	800602c <__swbuf_r+0x6c>
 800601e:	2e0a      	cmp	r6, #10
 8006020:	d104      	bne.n	800602c <__swbuf_r+0x6c>
 8006022:	4621      	mov	r1, r4
 8006024:	4628      	mov	r0, r5
 8006026:	f000 f927 	bl	8006278 <_fflush_r>
 800602a:	b988      	cbnz	r0, 8006050 <__swbuf_r+0x90>
 800602c:	4638      	mov	r0, r7
 800602e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006030:	4b0a      	ldr	r3, [pc, #40]	; (800605c <__swbuf_r+0x9c>)
 8006032:	429c      	cmp	r4, r3
 8006034:	d101      	bne.n	800603a <__swbuf_r+0x7a>
 8006036:	68ac      	ldr	r4, [r5, #8]
 8006038:	e7cf      	b.n	8005fda <__swbuf_r+0x1a>
 800603a:	4b09      	ldr	r3, [pc, #36]	; (8006060 <__swbuf_r+0xa0>)
 800603c:	429c      	cmp	r4, r3
 800603e:	bf08      	it	eq
 8006040:	68ec      	ldreq	r4, [r5, #12]
 8006042:	e7ca      	b.n	8005fda <__swbuf_r+0x1a>
 8006044:	4621      	mov	r1, r4
 8006046:	4628      	mov	r0, r5
 8006048:	f000 f81a 	bl	8006080 <__swsetup_r>
 800604c:	2800      	cmp	r0, #0
 800604e:	d0cb      	beq.n	8005fe8 <__swbuf_r+0x28>
 8006050:	f04f 37ff 	mov.w	r7, #4294967295
 8006054:	e7ea      	b.n	800602c <__swbuf_r+0x6c>
 8006056:	bf00      	nop
 8006058:	08006b6c 	.word	0x08006b6c
 800605c:	08006b8c 	.word	0x08006b8c
 8006060:	08006b4c 	.word	0x08006b4c

08006064 <__ascii_wctomb>:
 8006064:	b149      	cbz	r1, 800607a <__ascii_wctomb+0x16>
 8006066:	2aff      	cmp	r2, #255	; 0xff
 8006068:	bf85      	ittet	hi
 800606a:	238a      	movhi	r3, #138	; 0x8a
 800606c:	6003      	strhi	r3, [r0, #0]
 800606e:	700a      	strbls	r2, [r1, #0]
 8006070:	f04f 30ff 	movhi.w	r0, #4294967295
 8006074:	bf98      	it	ls
 8006076:	2001      	movls	r0, #1
 8006078:	4770      	bx	lr
 800607a:	4608      	mov	r0, r1
 800607c:	4770      	bx	lr
	...

08006080 <__swsetup_r>:
 8006080:	4b32      	ldr	r3, [pc, #200]	; (800614c <__swsetup_r+0xcc>)
 8006082:	b570      	push	{r4, r5, r6, lr}
 8006084:	681d      	ldr	r5, [r3, #0]
 8006086:	4606      	mov	r6, r0
 8006088:	460c      	mov	r4, r1
 800608a:	b125      	cbz	r5, 8006096 <__swsetup_r+0x16>
 800608c:	69ab      	ldr	r3, [r5, #24]
 800608e:	b913      	cbnz	r3, 8006096 <__swsetup_r+0x16>
 8006090:	4628      	mov	r0, r5
 8006092:	f000 f985 	bl	80063a0 <__sinit>
 8006096:	4b2e      	ldr	r3, [pc, #184]	; (8006150 <__swsetup_r+0xd0>)
 8006098:	429c      	cmp	r4, r3
 800609a:	d10f      	bne.n	80060bc <__swsetup_r+0x3c>
 800609c:	686c      	ldr	r4, [r5, #4]
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060a4:	0719      	lsls	r1, r3, #28
 80060a6:	d42c      	bmi.n	8006102 <__swsetup_r+0x82>
 80060a8:	06dd      	lsls	r5, r3, #27
 80060aa:	d411      	bmi.n	80060d0 <__swsetup_r+0x50>
 80060ac:	2309      	movs	r3, #9
 80060ae:	6033      	str	r3, [r6, #0]
 80060b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060b4:	81a3      	strh	r3, [r4, #12]
 80060b6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ba:	e03e      	b.n	800613a <__swsetup_r+0xba>
 80060bc:	4b25      	ldr	r3, [pc, #148]	; (8006154 <__swsetup_r+0xd4>)
 80060be:	429c      	cmp	r4, r3
 80060c0:	d101      	bne.n	80060c6 <__swsetup_r+0x46>
 80060c2:	68ac      	ldr	r4, [r5, #8]
 80060c4:	e7eb      	b.n	800609e <__swsetup_r+0x1e>
 80060c6:	4b24      	ldr	r3, [pc, #144]	; (8006158 <__swsetup_r+0xd8>)
 80060c8:	429c      	cmp	r4, r3
 80060ca:	bf08      	it	eq
 80060cc:	68ec      	ldreq	r4, [r5, #12]
 80060ce:	e7e6      	b.n	800609e <__swsetup_r+0x1e>
 80060d0:	0758      	lsls	r0, r3, #29
 80060d2:	d512      	bpl.n	80060fa <__swsetup_r+0x7a>
 80060d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060d6:	b141      	cbz	r1, 80060ea <__swsetup_r+0x6a>
 80060d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060dc:	4299      	cmp	r1, r3
 80060de:	d002      	beq.n	80060e6 <__swsetup_r+0x66>
 80060e0:	4630      	mov	r0, r6
 80060e2:	f7ff fb6f 	bl	80057c4 <_free_r>
 80060e6:	2300      	movs	r3, #0
 80060e8:	6363      	str	r3, [r4, #52]	; 0x34
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060f0:	81a3      	strh	r3, [r4, #12]
 80060f2:	2300      	movs	r3, #0
 80060f4:	6063      	str	r3, [r4, #4]
 80060f6:	6923      	ldr	r3, [r4, #16]
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	89a3      	ldrh	r3, [r4, #12]
 80060fc:	f043 0308 	orr.w	r3, r3, #8
 8006100:	81a3      	strh	r3, [r4, #12]
 8006102:	6923      	ldr	r3, [r4, #16]
 8006104:	b94b      	cbnz	r3, 800611a <__swsetup_r+0x9a>
 8006106:	89a3      	ldrh	r3, [r4, #12]
 8006108:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800610c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006110:	d003      	beq.n	800611a <__swsetup_r+0x9a>
 8006112:	4621      	mov	r1, r4
 8006114:	4630      	mov	r0, r6
 8006116:	f000 fa07 	bl	8006528 <__smakebuf_r>
 800611a:	89a0      	ldrh	r0, [r4, #12]
 800611c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006120:	f010 0301 	ands.w	r3, r0, #1
 8006124:	d00a      	beq.n	800613c <__swsetup_r+0xbc>
 8006126:	2300      	movs	r3, #0
 8006128:	60a3      	str	r3, [r4, #8]
 800612a:	6963      	ldr	r3, [r4, #20]
 800612c:	425b      	negs	r3, r3
 800612e:	61a3      	str	r3, [r4, #24]
 8006130:	6923      	ldr	r3, [r4, #16]
 8006132:	b943      	cbnz	r3, 8006146 <__swsetup_r+0xc6>
 8006134:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006138:	d1ba      	bne.n	80060b0 <__swsetup_r+0x30>
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	0781      	lsls	r1, r0, #30
 800613e:	bf58      	it	pl
 8006140:	6963      	ldrpl	r3, [r4, #20]
 8006142:	60a3      	str	r3, [r4, #8]
 8006144:	e7f4      	b.n	8006130 <__swsetup_r+0xb0>
 8006146:	2000      	movs	r0, #0
 8006148:	e7f7      	b.n	800613a <__swsetup_r+0xba>
 800614a:	bf00      	nop
 800614c:	2000000c 	.word	0x2000000c
 8006150:	08006b6c 	.word	0x08006b6c
 8006154:	08006b8c 	.word	0x08006b8c
 8006158:	08006b4c 	.word	0x08006b4c

0800615c <abort>:
 800615c:	b508      	push	{r3, lr}
 800615e:	2006      	movs	r0, #6
 8006160:	f000 fa52 	bl	8006608 <raise>
 8006164:	2001      	movs	r0, #1
 8006166:	f7fa fdf3 	bl	8000d50 <_exit>
	...

0800616c <__sflush_r>:
 800616c:	898a      	ldrh	r2, [r1, #12]
 800616e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006172:	4605      	mov	r5, r0
 8006174:	0710      	lsls	r0, r2, #28
 8006176:	460c      	mov	r4, r1
 8006178:	d458      	bmi.n	800622c <__sflush_r+0xc0>
 800617a:	684b      	ldr	r3, [r1, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	dc05      	bgt.n	800618c <__sflush_r+0x20>
 8006180:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	dc02      	bgt.n	800618c <__sflush_r+0x20>
 8006186:	2000      	movs	r0, #0
 8006188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800618c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800618e:	2e00      	cmp	r6, #0
 8006190:	d0f9      	beq.n	8006186 <__sflush_r+0x1a>
 8006192:	2300      	movs	r3, #0
 8006194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006198:	682f      	ldr	r7, [r5, #0]
 800619a:	602b      	str	r3, [r5, #0]
 800619c:	d032      	beq.n	8006204 <__sflush_r+0x98>
 800619e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	075a      	lsls	r2, r3, #29
 80061a4:	d505      	bpl.n	80061b2 <__sflush_r+0x46>
 80061a6:	6863      	ldr	r3, [r4, #4]
 80061a8:	1ac0      	subs	r0, r0, r3
 80061aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061ac:	b10b      	cbz	r3, 80061b2 <__sflush_r+0x46>
 80061ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061b0:	1ac0      	subs	r0, r0, r3
 80061b2:	2300      	movs	r3, #0
 80061b4:	4602      	mov	r2, r0
 80061b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061b8:	6a21      	ldr	r1, [r4, #32]
 80061ba:	4628      	mov	r0, r5
 80061bc:	47b0      	blx	r6
 80061be:	1c43      	adds	r3, r0, #1
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	d106      	bne.n	80061d2 <__sflush_r+0x66>
 80061c4:	6829      	ldr	r1, [r5, #0]
 80061c6:	291d      	cmp	r1, #29
 80061c8:	d82c      	bhi.n	8006224 <__sflush_r+0xb8>
 80061ca:	4a2a      	ldr	r2, [pc, #168]	; (8006274 <__sflush_r+0x108>)
 80061cc:	40ca      	lsrs	r2, r1
 80061ce:	07d6      	lsls	r6, r2, #31
 80061d0:	d528      	bpl.n	8006224 <__sflush_r+0xb8>
 80061d2:	2200      	movs	r2, #0
 80061d4:	6062      	str	r2, [r4, #4]
 80061d6:	04d9      	lsls	r1, r3, #19
 80061d8:	6922      	ldr	r2, [r4, #16]
 80061da:	6022      	str	r2, [r4, #0]
 80061dc:	d504      	bpl.n	80061e8 <__sflush_r+0x7c>
 80061de:	1c42      	adds	r2, r0, #1
 80061e0:	d101      	bne.n	80061e6 <__sflush_r+0x7a>
 80061e2:	682b      	ldr	r3, [r5, #0]
 80061e4:	b903      	cbnz	r3, 80061e8 <__sflush_r+0x7c>
 80061e6:	6560      	str	r0, [r4, #84]	; 0x54
 80061e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061ea:	602f      	str	r7, [r5, #0]
 80061ec:	2900      	cmp	r1, #0
 80061ee:	d0ca      	beq.n	8006186 <__sflush_r+0x1a>
 80061f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061f4:	4299      	cmp	r1, r3
 80061f6:	d002      	beq.n	80061fe <__sflush_r+0x92>
 80061f8:	4628      	mov	r0, r5
 80061fa:	f7ff fae3 	bl	80057c4 <_free_r>
 80061fe:	2000      	movs	r0, #0
 8006200:	6360      	str	r0, [r4, #52]	; 0x34
 8006202:	e7c1      	b.n	8006188 <__sflush_r+0x1c>
 8006204:	6a21      	ldr	r1, [r4, #32]
 8006206:	2301      	movs	r3, #1
 8006208:	4628      	mov	r0, r5
 800620a:	47b0      	blx	r6
 800620c:	1c41      	adds	r1, r0, #1
 800620e:	d1c7      	bne.n	80061a0 <__sflush_r+0x34>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0c4      	beq.n	80061a0 <__sflush_r+0x34>
 8006216:	2b1d      	cmp	r3, #29
 8006218:	d001      	beq.n	800621e <__sflush_r+0xb2>
 800621a:	2b16      	cmp	r3, #22
 800621c:	d101      	bne.n	8006222 <__sflush_r+0xb6>
 800621e:	602f      	str	r7, [r5, #0]
 8006220:	e7b1      	b.n	8006186 <__sflush_r+0x1a>
 8006222:	89a3      	ldrh	r3, [r4, #12]
 8006224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006228:	81a3      	strh	r3, [r4, #12]
 800622a:	e7ad      	b.n	8006188 <__sflush_r+0x1c>
 800622c:	690f      	ldr	r7, [r1, #16]
 800622e:	2f00      	cmp	r7, #0
 8006230:	d0a9      	beq.n	8006186 <__sflush_r+0x1a>
 8006232:	0793      	lsls	r3, r2, #30
 8006234:	680e      	ldr	r6, [r1, #0]
 8006236:	bf08      	it	eq
 8006238:	694b      	ldreq	r3, [r1, #20]
 800623a:	600f      	str	r7, [r1, #0]
 800623c:	bf18      	it	ne
 800623e:	2300      	movne	r3, #0
 8006240:	eba6 0807 	sub.w	r8, r6, r7
 8006244:	608b      	str	r3, [r1, #8]
 8006246:	f1b8 0f00 	cmp.w	r8, #0
 800624a:	dd9c      	ble.n	8006186 <__sflush_r+0x1a>
 800624c:	6a21      	ldr	r1, [r4, #32]
 800624e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006250:	4643      	mov	r3, r8
 8006252:	463a      	mov	r2, r7
 8006254:	4628      	mov	r0, r5
 8006256:	47b0      	blx	r6
 8006258:	2800      	cmp	r0, #0
 800625a:	dc06      	bgt.n	800626a <__sflush_r+0xfe>
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006262:	81a3      	strh	r3, [r4, #12]
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	e78e      	b.n	8006188 <__sflush_r+0x1c>
 800626a:	4407      	add	r7, r0
 800626c:	eba8 0800 	sub.w	r8, r8, r0
 8006270:	e7e9      	b.n	8006246 <__sflush_r+0xda>
 8006272:	bf00      	nop
 8006274:	20400001 	.word	0x20400001

08006278 <_fflush_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	690b      	ldr	r3, [r1, #16]
 800627c:	4605      	mov	r5, r0
 800627e:	460c      	mov	r4, r1
 8006280:	b913      	cbnz	r3, 8006288 <_fflush_r+0x10>
 8006282:	2500      	movs	r5, #0
 8006284:	4628      	mov	r0, r5
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	b118      	cbz	r0, 8006292 <_fflush_r+0x1a>
 800628a:	6983      	ldr	r3, [r0, #24]
 800628c:	b90b      	cbnz	r3, 8006292 <_fflush_r+0x1a>
 800628e:	f000 f887 	bl	80063a0 <__sinit>
 8006292:	4b14      	ldr	r3, [pc, #80]	; (80062e4 <_fflush_r+0x6c>)
 8006294:	429c      	cmp	r4, r3
 8006296:	d11b      	bne.n	80062d0 <_fflush_r+0x58>
 8006298:	686c      	ldr	r4, [r5, #4]
 800629a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0ef      	beq.n	8006282 <_fflush_r+0xa>
 80062a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062a4:	07d0      	lsls	r0, r2, #31
 80062a6:	d404      	bmi.n	80062b2 <_fflush_r+0x3a>
 80062a8:	0599      	lsls	r1, r3, #22
 80062aa:	d402      	bmi.n	80062b2 <_fflush_r+0x3a>
 80062ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062ae:	f000 f915 	bl	80064dc <__retarget_lock_acquire_recursive>
 80062b2:	4628      	mov	r0, r5
 80062b4:	4621      	mov	r1, r4
 80062b6:	f7ff ff59 	bl	800616c <__sflush_r>
 80062ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062bc:	07da      	lsls	r2, r3, #31
 80062be:	4605      	mov	r5, r0
 80062c0:	d4e0      	bmi.n	8006284 <_fflush_r+0xc>
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	059b      	lsls	r3, r3, #22
 80062c6:	d4dd      	bmi.n	8006284 <_fflush_r+0xc>
 80062c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062ca:	f000 f908 	bl	80064de <__retarget_lock_release_recursive>
 80062ce:	e7d9      	b.n	8006284 <_fflush_r+0xc>
 80062d0:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <_fflush_r+0x70>)
 80062d2:	429c      	cmp	r4, r3
 80062d4:	d101      	bne.n	80062da <_fflush_r+0x62>
 80062d6:	68ac      	ldr	r4, [r5, #8]
 80062d8:	e7df      	b.n	800629a <_fflush_r+0x22>
 80062da:	4b04      	ldr	r3, [pc, #16]	; (80062ec <_fflush_r+0x74>)
 80062dc:	429c      	cmp	r4, r3
 80062de:	bf08      	it	eq
 80062e0:	68ec      	ldreq	r4, [r5, #12]
 80062e2:	e7da      	b.n	800629a <_fflush_r+0x22>
 80062e4:	08006b6c 	.word	0x08006b6c
 80062e8:	08006b8c 	.word	0x08006b8c
 80062ec:	08006b4c 	.word	0x08006b4c

080062f0 <std>:
 80062f0:	2300      	movs	r3, #0
 80062f2:	b510      	push	{r4, lr}
 80062f4:	4604      	mov	r4, r0
 80062f6:	e9c0 3300 	strd	r3, r3, [r0]
 80062fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062fe:	6083      	str	r3, [r0, #8]
 8006300:	8181      	strh	r1, [r0, #12]
 8006302:	6643      	str	r3, [r0, #100]	; 0x64
 8006304:	81c2      	strh	r2, [r0, #14]
 8006306:	6183      	str	r3, [r0, #24]
 8006308:	4619      	mov	r1, r3
 800630a:	2208      	movs	r2, #8
 800630c:	305c      	adds	r0, #92	; 0x5c
 800630e:	f7fd fc23 	bl	8003b58 <memset>
 8006312:	4b05      	ldr	r3, [pc, #20]	; (8006328 <std+0x38>)
 8006314:	6263      	str	r3, [r4, #36]	; 0x24
 8006316:	4b05      	ldr	r3, [pc, #20]	; (800632c <std+0x3c>)
 8006318:	62a3      	str	r3, [r4, #40]	; 0x28
 800631a:	4b05      	ldr	r3, [pc, #20]	; (8006330 <std+0x40>)
 800631c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800631e:	4b05      	ldr	r3, [pc, #20]	; (8006334 <std+0x44>)
 8006320:	6224      	str	r4, [r4, #32]
 8006322:	6323      	str	r3, [r4, #48]	; 0x30
 8006324:	bd10      	pop	{r4, pc}
 8006326:	bf00      	nop
 8006328:	08006641 	.word	0x08006641
 800632c:	08006663 	.word	0x08006663
 8006330:	0800669b 	.word	0x0800669b
 8006334:	080066bf 	.word	0x080066bf

08006338 <_cleanup_r>:
 8006338:	4901      	ldr	r1, [pc, #4]	; (8006340 <_cleanup_r+0x8>)
 800633a:	f000 b8af 	b.w	800649c <_fwalk_reent>
 800633e:	bf00      	nop
 8006340:	08006279 	.word	0x08006279

08006344 <__sfmoreglue>:
 8006344:	b570      	push	{r4, r5, r6, lr}
 8006346:	1e4a      	subs	r2, r1, #1
 8006348:	2568      	movs	r5, #104	; 0x68
 800634a:	4355      	muls	r5, r2
 800634c:	460e      	mov	r6, r1
 800634e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006352:	f7ff fa87 	bl	8005864 <_malloc_r>
 8006356:	4604      	mov	r4, r0
 8006358:	b140      	cbz	r0, 800636c <__sfmoreglue+0x28>
 800635a:	2100      	movs	r1, #0
 800635c:	e9c0 1600 	strd	r1, r6, [r0]
 8006360:	300c      	adds	r0, #12
 8006362:	60a0      	str	r0, [r4, #8]
 8006364:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006368:	f7fd fbf6 	bl	8003b58 <memset>
 800636c:	4620      	mov	r0, r4
 800636e:	bd70      	pop	{r4, r5, r6, pc}

08006370 <__sfp_lock_acquire>:
 8006370:	4801      	ldr	r0, [pc, #4]	; (8006378 <__sfp_lock_acquire+0x8>)
 8006372:	f000 b8b3 	b.w	80064dc <__retarget_lock_acquire_recursive>
 8006376:	bf00      	nop
 8006378:	200002e0 	.word	0x200002e0

0800637c <__sfp_lock_release>:
 800637c:	4801      	ldr	r0, [pc, #4]	; (8006384 <__sfp_lock_release+0x8>)
 800637e:	f000 b8ae 	b.w	80064de <__retarget_lock_release_recursive>
 8006382:	bf00      	nop
 8006384:	200002e0 	.word	0x200002e0

08006388 <__sinit_lock_acquire>:
 8006388:	4801      	ldr	r0, [pc, #4]	; (8006390 <__sinit_lock_acquire+0x8>)
 800638a:	f000 b8a7 	b.w	80064dc <__retarget_lock_acquire_recursive>
 800638e:	bf00      	nop
 8006390:	200002db 	.word	0x200002db

08006394 <__sinit_lock_release>:
 8006394:	4801      	ldr	r0, [pc, #4]	; (800639c <__sinit_lock_release+0x8>)
 8006396:	f000 b8a2 	b.w	80064de <__retarget_lock_release_recursive>
 800639a:	bf00      	nop
 800639c:	200002db 	.word	0x200002db

080063a0 <__sinit>:
 80063a0:	b510      	push	{r4, lr}
 80063a2:	4604      	mov	r4, r0
 80063a4:	f7ff fff0 	bl	8006388 <__sinit_lock_acquire>
 80063a8:	69a3      	ldr	r3, [r4, #24]
 80063aa:	b11b      	cbz	r3, 80063b4 <__sinit+0x14>
 80063ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063b0:	f7ff bff0 	b.w	8006394 <__sinit_lock_release>
 80063b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063b8:	6523      	str	r3, [r4, #80]	; 0x50
 80063ba:	4b13      	ldr	r3, [pc, #76]	; (8006408 <__sinit+0x68>)
 80063bc:	4a13      	ldr	r2, [pc, #76]	; (800640c <__sinit+0x6c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80063c2:	42a3      	cmp	r3, r4
 80063c4:	bf04      	itt	eq
 80063c6:	2301      	moveq	r3, #1
 80063c8:	61a3      	streq	r3, [r4, #24]
 80063ca:	4620      	mov	r0, r4
 80063cc:	f000 f820 	bl	8006410 <__sfp>
 80063d0:	6060      	str	r0, [r4, #4]
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 f81c 	bl	8006410 <__sfp>
 80063d8:	60a0      	str	r0, [r4, #8]
 80063da:	4620      	mov	r0, r4
 80063dc:	f000 f818 	bl	8006410 <__sfp>
 80063e0:	2200      	movs	r2, #0
 80063e2:	60e0      	str	r0, [r4, #12]
 80063e4:	2104      	movs	r1, #4
 80063e6:	6860      	ldr	r0, [r4, #4]
 80063e8:	f7ff ff82 	bl	80062f0 <std>
 80063ec:	68a0      	ldr	r0, [r4, #8]
 80063ee:	2201      	movs	r2, #1
 80063f0:	2109      	movs	r1, #9
 80063f2:	f7ff ff7d 	bl	80062f0 <std>
 80063f6:	68e0      	ldr	r0, [r4, #12]
 80063f8:	2202      	movs	r2, #2
 80063fa:	2112      	movs	r1, #18
 80063fc:	f7ff ff78 	bl	80062f0 <std>
 8006400:	2301      	movs	r3, #1
 8006402:	61a3      	str	r3, [r4, #24]
 8006404:	e7d2      	b.n	80063ac <__sinit+0xc>
 8006406:	bf00      	nop
 8006408:	080067cc 	.word	0x080067cc
 800640c:	08006339 	.word	0x08006339

08006410 <__sfp>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	4607      	mov	r7, r0
 8006414:	f7ff ffac 	bl	8006370 <__sfp_lock_acquire>
 8006418:	4b1e      	ldr	r3, [pc, #120]	; (8006494 <__sfp+0x84>)
 800641a:	681e      	ldr	r6, [r3, #0]
 800641c:	69b3      	ldr	r3, [r6, #24]
 800641e:	b913      	cbnz	r3, 8006426 <__sfp+0x16>
 8006420:	4630      	mov	r0, r6
 8006422:	f7ff ffbd 	bl	80063a0 <__sinit>
 8006426:	3648      	adds	r6, #72	; 0x48
 8006428:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800642c:	3b01      	subs	r3, #1
 800642e:	d503      	bpl.n	8006438 <__sfp+0x28>
 8006430:	6833      	ldr	r3, [r6, #0]
 8006432:	b30b      	cbz	r3, 8006478 <__sfp+0x68>
 8006434:	6836      	ldr	r6, [r6, #0]
 8006436:	e7f7      	b.n	8006428 <__sfp+0x18>
 8006438:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800643c:	b9d5      	cbnz	r5, 8006474 <__sfp+0x64>
 800643e:	4b16      	ldr	r3, [pc, #88]	; (8006498 <__sfp+0x88>)
 8006440:	60e3      	str	r3, [r4, #12]
 8006442:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006446:	6665      	str	r5, [r4, #100]	; 0x64
 8006448:	f000 f847 	bl	80064da <__retarget_lock_init_recursive>
 800644c:	f7ff ff96 	bl	800637c <__sfp_lock_release>
 8006450:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006454:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006458:	6025      	str	r5, [r4, #0]
 800645a:	61a5      	str	r5, [r4, #24]
 800645c:	2208      	movs	r2, #8
 800645e:	4629      	mov	r1, r5
 8006460:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006464:	f7fd fb78 	bl	8003b58 <memset>
 8006468:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800646c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006470:	4620      	mov	r0, r4
 8006472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006474:	3468      	adds	r4, #104	; 0x68
 8006476:	e7d9      	b.n	800642c <__sfp+0x1c>
 8006478:	2104      	movs	r1, #4
 800647a:	4638      	mov	r0, r7
 800647c:	f7ff ff62 	bl	8006344 <__sfmoreglue>
 8006480:	4604      	mov	r4, r0
 8006482:	6030      	str	r0, [r6, #0]
 8006484:	2800      	cmp	r0, #0
 8006486:	d1d5      	bne.n	8006434 <__sfp+0x24>
 8006488:	f7ff ff78 	bl	800637c <__sfp_lock_release>
 800648c:	230c      	movs	r3, #12
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	e7ee      	b.n	8006470 <__sfp+0x60>
 8006492:	bf00      	nop
 8006494:	080067cc 	.word	0x080067cc
 8006498:	ffff0001 	.word	0xffff0001

0800649c <_fwalk_reent>:
 800649c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064a0:	4606      	mov	r6, r0
 80064a2:	4688      	mov	r8, r1
 80064a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80064a8:	2700      	movs	r7, #0
 80064aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064ae:	f1b9 0901 	subs.w	r9, r9, #1
 80064b2:	d505      	bpl.n	80064c0 <_fwalk_reent+0x24>
 80064b4:	6824      	ldr	r4, [r4, #0]
 80064b6:	2c00      	cmp	r4, #0
 80064b8:	d1f7      	bne.n	80064aa <_fwalk_reent+0xe>
 80064ba:	4638      	mov	r0, r7
 80064bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064c0:	89ab      	ldrh	r3, [r5, #12]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d907      	bls.n	80064d6 <_fwalk_reent+0x3a>
 80064c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064ca:	3301      	adds	r3, #1
 80064cc:	d003      	beq.n	80064d6 <_fwalk_reent+0x3a>
 80064ce:	4629      	mov	r1, r5
 80064d0:	4630      	mov	r0, r6
 80064d2:	47c0      	blx	r8
 80064d4:	4307      	orrs	r7, r0
 80064d6:	3568      	adds	r5, #104	; 0x68
 80064d8:	e7e9      	b.n	80064ae <_fwalk_reent+0x12>

080064da <__retarget_lock_init_recursive>:
 80064da:	4770      	bx	lr

080064dc <__retarget_lock_acquire_recursive>:
 80064dc:	4770      	bx	lr

080064de <__retarget_lock_release_recursive>:
 80064de:	4770      	bx	lr

080064e0 <__swhatbuf_r>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	460e      	mov	r6, r1
 80064e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e8:	2900      	cmp	r1, #0
 80064ea:	b096      	sub	sp, #88	; 0x58
 80064ec:	4614      	mov	r4, r2
 80064ee:	461d      	mov	r5, r3
 80064f0:	da07      	bge.n	8006502 <__swhatbuf_r+0x22>
 80064f2:	2300      	movs	r3, #0
 80064f4:	602b      	str	r3, [r5, #0]
 80064f6:	89b3      	ldrh	r3, [r6, #12]
 80064f8:	061a      	lsls	r2, r3, #24
 80064fa:	d410      	bmi.n	800651e <__swhatbuf_r+0x3e>
 80064fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006500:	e00e      	b.n	8006520 <__swhatbuf_r+0x40>
 8006502:	466a      	mov	r2, sp
 8006504:	f000 f902 	bl	800670c <_fstat_r>
 8006508:	2800      	cmp	r0, #0
 800650a:	dbf2      	blt.n	80064f2 <__swhatbuf_r+0x12>
 800650c:	9a01      	ldr	r2, [sp, #4]
 800650e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006512:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006516:	425a      	negs	r2, r3
 8006518:	415a      	adcs	r2, r3
 800651a:	602a      	str	r2, [r5, #0]
 800651c:	e7ee      	b.n	80064fc <__swhatbuf_r+0x1c>
 800651e:	2340      	movs	r3, #64	; 0x40
 8006520:	2000      	movs	r0, #0
 8006522:	6023      	str	r3, [r4, #0]
 8006524:	b016      	add	sp, #88	; 0x58
 8006526:	bd70      	pop	{r4, r5, r6, pc}

08006528 <__smakebuf_r>:
 8006528:	898b      	ldrh	r3, [r1, #12]
 800652a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800652c:	079d      	lsls	r5, r3, #30
 800652e:	4606      	mov	r6, r0
 8006530:	460c      	mov	r4, r1
 8006532:	d507      	bpl.n	8006544 <__smakebuf_r+0x1c>
 8006534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	6123      	str	r3, [r4, #16]
 800653c:	2301      	movs	r3, #1
 800653e:	6163      	str	r3, [r4, #20]
 8006540:	b002      	add	sp, #8
 8006542:	bd70      	pop	{r4, r5, r6, pc}
 8006544:	ab01      	add	r3, sp, #4
 8006546:	466a      	mov	r2, sp
 8006548:	f7ff ffca 	bl	80064e0 <__swhatbuf_r>
 800654c:	9900      	ldr	r1, [sp, #0]
 800654e:	4605      	mov	r5, r0
 8006550:	4630      	mov	r0, r6
 8006552:	f7ff f987 	bl	8005864 <_malloc_r>
 8006556:	b948      	cbnz	r0, 800656c <__smakebuf_r+0x44>
 8006558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800655c:	059a      	lsls	r2, r3, #22
 800655e:	d4ef      	bmi.n	8006540 <__smakebuf_r+0x18>
 8006560:	f023 0303 	bic.w	r3, r3, #3
 8006564:	f043 0302 	orr.w	r3, r3, #2
 8006568:	81a3      	strh	r3, [r4, #12]
 800656a:	e7e3      	b.n	8006534 <__smakebuf_r+0xc>
 800656c:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <__smakebuf_r+0x7c>)
 800656e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	6020      	str	r0, [r4, #0]
 8006574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006578:	81a3      	strh	r3, [r4, #12]
 800657a:	9b00      	ldr	r3, [sp, #0]
 800657c:	6163      	str	r3, [r4, #20]
 800657e:	9b01      	ldr	r3, [sp, #4]
 8006580:	6120      	str	r0, [r4, #16]
 8006582:	b15b      	cbz	r3, 800659c <__smakebuf_r+0x74>
 8006584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006588:	4630      	mov	r0, r6
 800658a:	f000 f8d1 	bl	8006730 <_isatty_r>
 800658e:	b128      	cbz	r0, 800659c <__smakebuf_r+0x74>
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	f023 0303 	bic.w	r3, r3, #3
 8006596:	f043 0301 	orr.w	r3, r3, #1
 800659a:	81a3      	strh	r3, [r4, #12]
 800659c:	89a0      	ldrh	r0, [r4, #12]
 800659e:	4305      	orrs	r5, r0
 80065a0:	81a5      	strh	r5, [r4, #12]
 80065a2:	e7cd      	b.n	8006540 <__smakebuf_r+0x18>
 80065a4:	08006339 	.word	0x08006339

080065a8 <_malloc_usable_size_r>:
 80065a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065ac:	1f18      	subs	r0, r3, #4
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	bfbc      	itt	lt
 80065b2:	580b      	ldrlt	r3, [r1, r0]
 80065b4:	18c0      	addlt	r0, r0, r3
 80065b6:	4770      	bx	lr

080065b8 <_raise_r>:
 80065b8:	291f      	cmp	r1, #31
 80065ba:	b538      	push	{r3, r4, r5, lr}
 80065bc:	4604      	mov	r4, r0
 80065be:	460d      	mov	r5, r1
 80065c0:	d904      	bls.n	80065cc <_raise_r+0x14>
 80065c2:	2316      	movs	r3, #22
 80065c4:	6003      	str	r3, [r0, #0]
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80065ce:	b112      	cbz	r2, 80065d6 <_raise_r+0x1e>
 80065d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065d4:	b94b      	cbnz	r3, 80065ea <_raise_r+0x32>
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 f830 	bl	800663c <_getpid_r>
 80065dc:	462a      	mov	r2, r5
 80065de:	4601      	mov	r1, r0
 80065e0:	4620      	mov	r0, r4
 80065e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065e6:	f000 b817 	b.w	8006618 <_kill_r>
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d00a      	beq.n	8006604 <_raise_r+0x4c>
 80065ee:	1c59      	adds	r1, r3, #1
 80065f0:	d103      	bne.n	80065fa <_raise_r+0x42>
 80065f2:	2316      	movs	r3, #22
 80065f4:	6003      	str	r3, [r0, #0]
 80065f6:	2001      	movs	r0, #1
 80065f8:	e7e7      	b.n	80065ca <_raise_r+0x12>
 80065fa:	2400      	movs	r4, #0
 80065fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006600:	4628      	mov	r0, r5
 8006602:	4798      	blx	r3
 8006604:	2000      	movs	r0, #0
 8006606:	e7e0      	b.n	80065ca <_raise_r+0x12>

08006608 <raise>:
 8006608:	4b02      	ldr	r3, [pc, #8]	; (8006614 <raise+0xc>)
 800660a:	4601      	mov	r1, r0
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	f7ff bfd3 	b.w	80065b8 <_raise_r>
 8006612:	bf00      	nop
 8006614:	2000000c 	.word	0x2000000c

08006618 <_kill_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4d07      	ldr	r5, [pc, #28]	; (8006638 <_kill_r+0x20>)
 800661c:	2300      	movs	r3, #0
 800661e:	4604      	mov	r4, r0
 8006620:	4608      	mov	r0, r1
 8006622:	4611      	mov	r1, r2
 8006624:	602b      	str	r3, [r5, #0]
 8006626:	f7fa fb83 	bl	8000d30 <_kill>
 800662a:	1c43      	adds	r3, r0, #1
 800662c:	d102      	bne.n	8006634 <_kill_r+0x1c>
 800662e:	682b      	ldr	r3, [r5, #0]
 8006630:	b103      	cbz	r3, 8006634 <_kill_r+0x1c>
 8006632:	6023      	str	r3, [r4, #0]
 8006634:	bd38      	pop	{r3, r4, r5, pc}
 8006636:	bf00      	nop
 8006638:	200002d4 	.word	0x200002d4

0800663c <_getpid_r>:
 800663c:	f7fa bb70 	b.w	8000d20 <_getpid>

08006640 <__sread>:
 8006640:	b510      	push	{r4, lr}
 8006642:	460c      	mov	r4, r1
 8006644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006648:	f000 f894 	bl	8006774 <_read_r>
 800664c:	2800      	cmp	r0, #0
 800664e:	bfab      	itete	ge
 8006650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006652:	89a3      	ldrhlt	r3, [r4, #12]
 8006654:	181b      	addge	r3, r3, r0
 8006656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800665a:	bfac      	ite	ge
 800665c:	6563      	strge	r3, [r4, #84]	; 0x54
 800665e:	81a3      	strhlt	r3, [r4, #12]
 8006660:	bd10      	pop	{r4, pc}

08006662 <__swrite>:
 8006662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006666:	461f      	mov	r7, r3
 8006668:	898b      	ldrh	r3, [r1, #12]
 800666a:	05db      	lsls	r3, r3, #23
 800666c:	4605      	mov	r5, r0
 800666e:	460c      	mov	r4, r1
 8006670:	4616      	mov	r6, r2
 8006672:	d505      	bpl.n	8006680 <__swrite+0x1e>
 8006674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006678:	2302      	movs	r3, #2
 800667a:	2200      	movs	r2, #0
 800667c:	f000 f868 	bl	8006750 <_lseek_r>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	4632      	mov	r2, r6
 800668e:	463b      	mov	r3, r7
 8006690:	4628      	mov	r0, r5
 8006692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006696:	f000 b817 	b.w	80066c8 <_write_r>

0800669a <__sseek>:
 800669a:	b510      	push	{r4, lr}
 800669c:	460c      	mov	r4, r1
 800669e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a2:	f000 f855 	bl	8006750 <_lseek_r>
 80066a6:	1c43      	adds	r3, r0, #1
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	bf15      	itete	ne
 80066ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80066ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066b6:	81a3      	strheq	r3, [r4, #12]
 80066b8:	bf18      	it	ne
 80066ba:	81a3      	strhne	r3, [r4, #12]
 80066bc:	bd10      	pop	{r4, pc}

080066be <__sclose>:
 80066be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c2:	f000 b813 	b.w	80066ec <_close_r>
	...

080066c8 <_write_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4d07      	ldr	r5, [pc, #28]	; (80066e8 <_write_r+0x20>)
 80066cc:	4604      	mov	r4, r0
 80066ce:	4608      	mov	r0, r1
 80066d0:	4611      	mov	r1, r2
 80066d2:	2200      	movs	r2, #0
 80066d4:	602a      	str	r2, [r5, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	f7fa fb61 	bl	8000d9e <_write>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_write_r+0x1e>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_write_r+0x1e>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	200002d4 	.word	0x200002d4

080066ec <_close_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4d06      	ldr	r5, [pc, #24]	; (8006708 <_close_r+0x1c>)
 80066f0:	2300      	movs	r3, #0
 80066f2:	4604      	mov	r4, r0
 80066f4:	4608      	mov	r0, r1
 80066f6:	602b      	str	r3, [r5, #0]
 80066f8:	f7fa fb6d 	bl	8000dd6 <_close>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d102      	bne.n	8006706 <_close_r+0x1a>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	b103      	cbz	r3, 8006706 <_close_r+0x1a>
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	bd38      	pop	{r3, r4, r5, pc}
 8006708:	200002d4 	.word	0x200002d4

0800670c <_fstat_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4d07      	ldr	r5, [pc, #28]	; (800672c <_fstat_r+0x20>)
 8006710:	2300      	movs	r3, #0
 8006712:	4604      	mov	r4, r0
 8006714:	4608      	mov	r0, r1
 8006716:	4611      	mov	r1, r2
 8006718:	602b      	str	r3, [r5, #0]
 800671a:	f7fa fb68 	bl	8000dee <_fstat>
 800671e:	1c43      	adds	r3, r0, #1
 8006720:	d102      	bne.n	8006728 <_fstat_r+0x1c>
 8006722:	682b      	ldr	r3, [r5, #0]
 8006724:	b103      	cbz	r3, 8006728 <_fstat_r+0x1c>
 8006726:	6023      	str	r3, [r4, #0]
 8006728:	bd38      	pop	{r3, r4, r5, pc}
 800672a:	bf00      	nop
 800672c:	200002d4 	.word	0x200002d4

08006730 <_isatty_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4d06      	ldr	r5, [pc, #24]	; (800674c <_isatty_r+0x1c>)
 8006734:	2300      	movs	r3, #0
 8006736:	4604      	mov	r4, r0
 8006738:	4608      	mov	r0, r1
 800673a:	602b      	str	r3, [r5, #0]
 800673c:	f7fa fb67 	bl	8000e0e <_isatty>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_isatty_r+0x1a>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b103      	cbz	r3, 800674a <_isatty_r+0x1a>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	200002d4 	.word	0x200002d4

08006750 <_lseek_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d07      	ldr	r5, [pc, #28]	; (8006770 <_lseek_r+0x20>)
 8006754:	4604      	mov	r4, r0
 8006756:	4608      	mov	r0, r1
 8006758:	4611      	mov	r1, r2
 800675a:	2200      	movs	r2, #0
 800675c:	602a      	str	r2, [r5, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	f7fa fb60 	bl	8000e24 <_lseek>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_lseek_r+0x1e>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	b103      	cbz	r3, 800676e <_lseek_r+0x1e>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	200002d4 	.word	0x200002d4

08006774 <_read_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4d07      	ldr	r5, [pc, #28]	; (8006794 <_read_r+0x20>)
 8006778:	4604      	mov	r4, r0
 800677a:	4608      	mov	r0, r1
 800677c:	4611      	mov	r1, r2
 800677e:	2200      	movs	r2, #0
 8006780:	602a      	str	r2, [r5, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	f7fa faee 	bl	8000d64 <_read>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d102      	bne.n	8006792 <_read_r+0x1e>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	b103      	cbz	r3, 8006792 <_read_r+0x1e>
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	200002d4 	.word	0x200002d4

08006798 <_init>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr

080067a4 <_fini>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	bf00      	nop
 80067a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067aa:	bc08      	pop	{r3}
 80067ac:	469e      	mov	lr, r3
 80067ae:	4770      	bx	lr
